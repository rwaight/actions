{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home - Actions Monorepo","text":"<p>This site is hosted with GitHub Pages using Material for MkDocs. The <code>frontmatter</code> is used for YAML style meta-data.</p>"},{"location":"actions-release-notes/","title":"Actions release notes","text":""},{"location":"actions-release-notes/#updates-and-releases-to-this-actions-monorepo","title":"Updates and releases to this actions monorepo","text":"<p>In order to push changes to the actions, so that any downstream workflows can use the changes or when any of the actions or workflows need to be updated.  The current process for this <code>actions</code> repo is: 1. Set up your workstation with this repo and to sign commits and tags    1. Ensure you have a local copy of this <code>actions</code> repo cloned to your workstation    2. Follow GitHub's signing tags docs to ensure you can sign tags from your workstation 2. Create a development branch and make the proper code changes     -  You should use the <code>dev-*</code> naming convention (example: <code>dev-unique_branch_name_here</code>)     -  Update the specific action or workflow, as needed 3. Determine the next version for this <code>actions</code> repo     - Check with <code>@rwaight</code> to determine the version level change     - The changes should be either <code>patch</code>, <code>minor</code>, or <code>major</code>     - Make note of the next version, as it will be used later in the release process 4. Open a pull request from your development branch into <code>base: main</code>     - Be sure to include the proper <code>version:</code> label 5. Have your pull request reviewed, then merge the changes into <code>main</code>    1. Make a note of the commit that was merged into main (example: \"merged commit <code>8675309</code> into <code>main</code>\")    2. The value listed for commit is the first seven (7) characters of the commit hash 6. Update your local clone of this <code>actions</code> repo with the changes from <code>main</code>    1. If you have your development branch open, issue <code>git stash</code> to save the local changes    2. Fetch the remote branches with <code>git fetch --all</code>    3. Switch to the <code>main</code> branch with <code>git checkout main</code>    4. Use <code>git pull origin main</code> to ensure your local clone is updated from origin 7. Verify your local clone has the latest commit to <code>main</code>    1. Use one of the following commands to get the list of recent commits:       - <code>git log --pretty=format:\"%h - %an, %ar : %s\" --since=3.days</code>       - <code>git log --pretty=oneline</code>       - <code>git log --pretty=format:\"%h - %an, %ar : %s\" --since=2.weeks</code>       - <code>git log --pretty=format:\"%h - %an, %ar : %s\" --since=1.week</code>    2. Look for the commit that was merged into main    3. Alternatively, pipe the output from the <code>git log</code> command into <code>grep</code> and add the commit       - Example: <code>git log --pretty=oneline | grep 8675309</code>    4. Use <code>echo</code> to remind yourself of the commit that will be used for the new <code>git tag</code>, example:       1. <code>echo \"the commit linked to v1.1.1 is 8675309\"</code> 8. Create a signed <code>git tag</code> and verify the signed tag    1. Follow GitHub's signing tags docs to ensure you can sign tags from your workstation    2. You will use the <code>-a</code>, <code>-m</code>, and <code>-s</code> options when creating and signing the tag    3. Use <code>git tag</code> and the <code>-s</code> option to create the tag for the next version, example:       - <code>git tag -a v1.1.1 -m \"Code updated to v1.1.1\" -s 8675309</code>    4. You will use the <code>-v</code> option to verify the signed tag    5. Sign the tag with <code>git tag -v v1.1.1</code>    6. Confirm you see a <code>gpg: Good signature</code> response from issuing the <code>git tag -v</code> command 9. Push the signed and verified tag to this repo (origin)    1.  Be cerain that you have signed and verified the tag before proceeding    2.  Push the signed and verified tag with <code>git push -f origin v1.1.1</code> 10. Ask <code>@rwaight</code> why this is not part of a GitHub workflow (or a composite action) in this repo... because it should be</p>"},{"location":"actions-release-notes/#notes-about-reducing-time-spent-on-the-release-process","title":"Notes about reducing time spent on the release process","text":"<p>There are a few things to consider when attempting to reduce the time spent on the release process. - Keeping a changelog or other documentation for the changes made, without having to look through PRs - Keeping the major and minor tags updated when a new version is released - Using automation but now allowing automation to push to protected branches</p>"},{"location":"actions-repo-update-readme/","title":"Actions repo update readme","text":""},{"location":"actions-repo-update-readme/#keeping-the-readme-updated-in-this-actions-monorepo","title":"Keeping the README updated in this actions monorepo","text":""},{"location":"actions-repo-update-readme/#updating-the-readme","title":"Updating the README","text":"<p>Keep the README updated with the current list of actions.</p> commands to list directories (click to expand)  #### Get the categories from the root directory <pre><code># use the '-I' option to exclude the non-category directories\ntree . -d -L 1 -I '.git|.github|archive|assets|composite|docs|examples|test' --noreport\n</code></pre>  #### Get the actions by category <pre><code># use the '-I' option to exclude the non-category directories\ntree . -d -L 2 -I '.git|.github|archive|assets|composite|docs|examples|test' --noreport\n</code></pre>   #### Get the top two levels of directories from the root directory of the repo <pre><code># two levels of directories, using find\nfind . -type d -maxdepth 2\n\n# two levels of directories, using tree\ntree . -d -L 2\n\n# two levels of directories, using tree, without the report\ntree . -d -L 2 --noreport\n</code></pre>  #### Get the directories by category with `find` <pre><code># store the categories into an array to use in a for loop\ncategories=(builders chatops git github releases utilities vars)\n\n# get the action names by category, using find\nfor item in ${categories[@]}; do find $item -type d -maxdepth 1; done\n\n# not fancy way, using cut, to get the action names below their category\nfor item in ${categories[@]}; do find $item -type d -maxdepth 1 | cut -d'/' -f2-; done\n\n# similar to above, but with sed\nfor item in ${categories[@]}; do find $item -type d -maxdepth 1 | sed 's,^[^/]*/,,'; done\n</code></pre>  #### Get the directories by category with `tree` <pre><code># store the categories into an array to use in a for loop\ncategories=(builders chatops git github releases utilities vars)\n\n# get the action names by category, using tree\nfor item in ${categories[@]}; do tree $item -d -L 1; done\n</code></pre>  #### Filter out the non-category directories with `tree` <pre><code># use the '-I' option to exclude the non-category directories\ntree . -d -L 2 -I '.git|.github|archive|assets|composite|docs|examples|test' --noreport\n</code></pre>"},{"location":"actions-scripts-README/","title":"Scripts for the actions monorepo","text":"<p>There are currently two scripts for the actions monorepo: - <code>import_configs.sh</code> - <code>monorepo_updates.sh</code></p> <p>The scripts update (and use) a <code>import-config.yml</code> file, which is stored for each individual action.</p> <p>Table of Contents - Import Config File Specifications - Import Configs Script - Monorepo Updates Script</p>"},{"location":"actions-scripts-README/#import-config-file-specifications","title":"Import Config File Specifications","text":"<p>The <code>import-config.yml</code> file is a structured YAML configuration file generated or updated by the <code>import_configs.sh</code> script; the file is also updated by the <code>monorepo_updates.sh</code> script. The <code>import-config.yml</code> file provides metadata and specifications for GitHub Actions, whether they are locally created or imported from external sources. Below is a breakdown of its structure and an example/template:</p>"},{"location":"actions-scripts-README/#file-structure","title":"File Structure","text":"<ol> <li>Metadata Fields:</li> <li><code>name</code>: The name of the action (derived from the directory name).</li> <li><code>author</code>: The author of the action. If not specified, a placeholder is used.</li> <li><code>description</code>: A brief description of the action. Defaults to \"placeholder\" if not provided.</li> <li> <p><code>group</code>: The name of the parent directory group.</p> </li> <li> <p>Import Status:</p> </li> <li> <p><code>imported</code>: A boolean indicating if the action is imported (<code>true</code>) or locally created (<code>false</code>).</p> </li> <li> <p>Source Information (if <code>imported</code> is <code>true</code>):</p> </li> <li><code>source.action_name</code>: The name of the imported action.</li> <li><code>source.author</code>: The author of the source action.</li> <li><code>source.repo_name</code>: The name of the GitHub repository containing the action.</li> <li><code>source.repo_url</code>: The URL of the source repository.</li> <li><code>source.current_version</code>: The version currently in use.</li> <li><code>source.latest_version</code>: The latest available version of the action.</li> <li> <p><code>source.update_available</code>: Boolean indicating if an update is available.</p> </li> <li> <p>Local Modifications:</p> </li> <li><code>local.author</code>: The author of the local action (if not imported).</li> <li><code>local.modifications</code>: Boolean indicating if modifications have been made.</li> <li> <p><code>local.update.exclusions</code>: A list of files to exclude when updating from source.</p> </li> <li> <p>Specifications:</p> </li> <li><code>specs.action_file</code>: The name of the action file (<code>action.yml</code> or <code>action.yaml</code>).</li> <li><code>specs.inputs</code>: A list of input keys defined in the action.</li> <li><code>specs.outputs</code>: A list of output keys defined in the action.</li> <li><code>specs.runs.using</code>: The execution environment (e.g., <code>node12</code>, <code>docker</code>).</li> <li> <p><code>specs.runs.main</code>: The entry point file for the action (if applicable).</p> </li> <li> <p>Tests:</p> </li> <li><code>tests._comment</code>: A reserved section for future test-related fields.</li> </ol>"},{"location":"actions-scripts-README/#example-import-configyml","title":"Example <code>import-config.yml</code>","text":"<pre><code>name: example-action\nauthor: \"john-doe\"\ndescription: \"An example GitHub Action for demonstration purposes.\"\ngroup: \"example-group\"\nimported: true\n\nsource:\n  action_name: \"example-action\"\n  author: \"external-author\"\n  repo_name: \"example-repo\"\n  repo_url: \"https://github.com/external-author/example-repo\"\n  current_version: \"v1.0.0\"\n  latest_version: \"v1.1.0\"\n  update_available: true\n  monorepo: true\n  monorepo_path: \"example/\"\n\nlocal:\n  author: \"john-doe\"\n  modifications: false\n  update:\n    exclusions:\n      - README-examples.md\n      - example-custom-notes.md\n\nspecs:\n  action_file: \"action.yml\"\n  inputs: [\"input1\", \"input2\"]\n  outputs: [\"output1\"]\n  runs:\n    using: \"node20\"\n    main: \"dist/index.js\"\n\ntests:\n  _comment: \"reserved for future use\"\n</code></pre>"},{"location":"actions-scripts-README/#notes","title":"Notes","text":"<ul> <li>Placeholders: If the script cannot determine certain values, placeholders (<code>\"placeholder\"</code>) are inserted to prompt the user for manual updates.</li> <li>Dynamic Updates: For imported actions, fields such as <code>source.latest_version</code> and <code>source.update_available</code> are dynamically updated based on the GitHub API.</li> <li>Flexibility: The file structure accommodates both locally created and imported actions, ensuring versatility in various workflows.</li> </ul>"},{"location":"actions-scripts-README/#import-configs-script","title":"Import Configs Script","text":"<p>The <code>import_configs.sh</code> script automates the creation and maintenance of <code>import-config.yml</code> files for actions found in specified directories. It achieves the following:</p> <ol> <li>Read Configuration:</li> <li> <p>Reads target directories from a configuration file <code>target_dirs.conf</code>.</p> </li> <li> <p>Identify Action Files:</p> </li> <li> <p>Checks each subdirectory for the presence of an <code>action.yml</code> or <code>action.yaml</code> file.</p> </li> <li> <p>Process <code>import-config.yml</code>:</p> </li> <li> <p>For each subdirectory:</p> <ul> <li>If <code>import-config.yml</code> exists:</li> <li>Updates fields like <code>author</code>, <code>description</code>, <code>specs</code> (including <code>inputs</code>, <code>outputs</code>, <code>runs</code>), and <code>source</code> (if applicable).</li> <li>Checks for updates if the action is marked as \"imported\" by querying the GitHub API for the latest release.</li> <li>If <code>import-config.yml</code> does not exist:</li> <li>Prompts the user to specify if the action is \"imported\" or \"local.\"</li> <li>Generates an initial <code>import-config.yml</code> with fields such as <code>author</code>, <code>group</code>, <code>imported</code>, <code>specs</code>, and optionally, <code>source</code> details for imported actions.</li> </ul> </li> <li> <p>Extract and Format Data:</p> </li> <li>Uses the <code>yq</code> tool to parse and extract data from YAML files and to update/create YAML fields.</li> <li> <p>Extracts keys (e.g., <code>inputs</code>, <code>outputs</code>) and converts them into a suitable format for YAML.</p> </li> <li> <p>GitHub Integration:</p> </li> <li> <p>For imported actions, fetches the latest version information from GitHub API to determine if an update is available.</p> </li> <li> <p>Handle User Input:</p> </li> <li> <p>Prompts the user to input metadata when creating <code>import-config.yml</code> for new actions, especially for imported actions.</p> </li> <li> <p>Iterate Over All Actions:</p> </li> <li> <p>Processes every subdirectory in the target directories, ensuring that all actions are updated or have an <code>import-config.yml</code> generated.</p> </li> <li> <p>Placeholder Values:</p> </li> <li> <p>Inserts placeholders for fields like <code>author</code> or <code>description</code> if they are missing in the action file.</p> </li> <li> <p>Reserved Tests Section:</p> </li> <li> <p>Adds a <code>tests</code> block in the <code>import-config.yml</code> file for future use.</p> </li> <li> <p>Output:</p> <ul> <li>Displays progress and completion messages for each action processed.</li> </ul> </li> </ol>"},{"location":"actions-scripts-README/#notes_1","title":"Notes","text":"<p>This script is designed to be extensible and works efficiently for managing configurations of multiple GitHub Actions. It uses <code>yq</code> for YAML manipulation, <code>jq</code> for JSON parsing, and assumes user access to GitHub API for imported action metadata.</p>"},{"location":"actions-scripts-README/#monorepo-updates-script","title":"Monorepo Updates Script","text":"<p>This script automates the process of checking for updates in repositories and applying those updates to the actions monorepo based on configurations specified in <code>import-config.yml</code> files within target directories. It achieves the following:</p> <ol> <li>Configuration Loading:</li> <li>Reads target directories from <code>target_dirs.conf</code>.</li> <li> <p>Optionally allows specifying a specific group and action to process instead of using all target directories.</p> </li> <li> <p>Update Check Logic:</p> </li> <li> <p>For each <code>import-config.yml</code> file found in the target directories:</p> <ul> <li>Checks if the action is \"imported.\"</li> <li>Verifies if an update is available by comparing the current version with the latest version.</li> <li>Fetches the latest version information from the repository using GitHub APIs (via <code>curl</code> and <code>jq</code>).</li> </ul> </li> <li> <p>Repository Update Process:</p> </li> <li>Clones the repository at the specified latest version.</li> <li>Processes the repository:<ul> <li>Renames <code>.github/</code> directory to <code>__dot_github/</code> and disables <code>.yml</code> files within.</li> <li>Adds a repository name prefix to <code>.md</code> and <code>.yml</code> files.</li> </ul> </li> <li>Creates a new branch in the actions monorepo for the update.</li> <li> <p>Generates a new <code>README.md</code> based on a template (<code>imported_readme_template.md</code>), using <code>sed</code> to populate placeholders with details (e.g., group name, action name, new version).</p> <ul> <li>Eventually this will be managed by a workflow within the actions repo.</li> </ul> </li> <li> <p>Git Workflow:</p> </li> <li>Prepares changes for a commit (does not auto-commit or push).</li> <li> <p>Provides instructions for the user to commit and push changes manually.</p> </li> <li> <p>Temporary Directory Management:</p> </li> <li>Uses a temporary directory for processing repository updates.</li> <li> <p>Prompts the user for cleanup after processing.</p> </li> <li> <p>Configuration File Update:</p> </li> <li>Updates the <code>current_version</code> and <code>update_available</code> fields in <code>import-config.yml</code> after successful processing.</li> </ol>"},{"location":"actions-scripts-README/#notes_2","title":"Notes","text":"<p>The script also has some interactive features: - Prompts the user for specifying specific actions to update. - Offers manual intervention for committing, pushing changes, and cleaning up temporary directories.</p>"},{"location":"actions-to-import/","title":"Actions to import","text":"<p>An attempt to keep track of what actions should be imported into this monorepo.</p>"},{"location":"actions-to-import/#future-planning-actions-to-import-to-this-repo","title":"Future planning - actions to import to this repo","text":"<p>The following actions should be copied/imported to this repo: - builders     - None at this time. - chatops     - See https://www.pagerduty.com/blog/what-is-chatops/     - <code>peter-evans/slash-command-dispatch</code>         - A GitHub action that facilitates \"ChatOps\" by creating repository dispatch events for slash commands     - <code>peter-evans/slash-command-dispatch-processor</code>         - A command processor for slash-command-dispatch, a GitHub action that facilitates \"ChatOps\" - git     - None at this time. - github     - <code>imjohnbo/issue-bot</code> action         - GitHub Actions powered Issue Bot     - <code>imjohnbo/extract-issue-template-fields</code> action         - Extract issue template fields with GitHub Actions     - <code>robvanderleek/create-issue-branch</code> action         - GitHub App/Action that automates the creation of issue branches - releases     - None at this time. - utilities     - <code>DamianReeves/write-file-action</code>         - A GitHub action to write a file         - Use case: overwrite, append, or preserve files     - <code>c-py/action-dotenv-to-setenv</code>         - GitHub Action to export a dotenv file to environment variables (via set-env)     - <code>imjohnbo/action-to-mermaid</code>         - GitHub action that generates a Mermaid diagram out of an action's metadata file     - <code>jakejarvis/s3-sync-action</code>         - GitHub Action to sync a directory with a remote S3 bucket</p> <p>The actions should have their <code>branding</code> section updated according to the update standards listed below.</p>"},{"location":"actions-to-import/#actions-pending-import","title":"Actions pending import","text":"<p>The following actions are pending import to this repo: - builders     - None at this time. - chatops     - None at this time. - git     - None at this time. - github     - None at this time. - releases     - None at this time. - utilities     - None at this time.</p>"},{"location":"actions-to-import/#other-actions-to-review","title":"Other actions to review","text":"<p>The following actions should be reviewed as candidates to import to this repo: - builders     - None at this time. - chatops     - None at this time. - git     - <code>stefanzweifel/git-auto-commit-action</code>         - Automatically commit and push changed files back to GitHub with this GitHub Action for the 80% use case.     - <code>mdomke/git-semver</code>         - Semantic Versioning with git tags     - <code>peter-evans/rebase</code>         - A GitHub action to rebase pull requests in a repository     - <code>actions-ecosystem/action-get-latest-tag</code>         - GitHub Action to get a latest Git tag     - <code>WyriHaximus/github-action-get-previous-tag</code>         - Get the previous tag     - <code>WyriHaximus/github-action-next-semvers</code>         - Github Action that output the next version for major, minor, and patch version based on the given semver version.     - <code>phish108/autotag-action</code>         - A lightning fast autotagger for semver tagging in github actions     - <code>codedesignplus/semver-git-version</code>         - Semver versioning based on the git history and commit messages of your repository.     - <code>auguwu/git-tag-action</code>         - GitHub action to split your Git release tag into SemVer 2.0 parts - github     - <code>actions-cool/issues-helper</code>         - A GitHub Action easily helps you automatically manage issues.     - <code>Ismoh-Games/find-linked-issues</code>         - Marketplace action for finding the linked issues of a pull request.     - <code>peter-evans/enable-pull-request-automerge</code>         - A GitHub action to enable auto-merge on a pull request         - NOTE same functionality exists in the GitHub CLI. See the <code>gh pr merge</code> documentation <pre><code>    - name: Enable Pull Request Automerge\n      run: gh pr merge --merge --auto \"1\"\n      env:\n        GH_TOKEN: ${{ secrets.PAT }}\n</code></pre> - releases     - <code>huggingface/semver-release-action</code>         - Github Action to release projects using Semantic Release.         - Uses <code>semantic-release/semantic-release</code>     - <code>K-Phoen/semver-release-action</code>         - GitHub Action to automatically create SemVer compliant releases based on PR labels.         - Based on the <code>github_tag_and_release.yml</code> workflow     - <code>phish108/release-check</code>         - Check if a push or pull request should trigger a release.     - <code>InsonusK/get-latest-release</code>         - Get latest release, include all types of release     - <code>cardinalby/git-get-release-action</code>         - Github Action that allows you to get release information by release id, tag, commit SHA (current commit or specified). - utilities     - <code>peter-evans/ghaction-import-gpg</code>         - GitHub Action to import a GPG key     - <code>EndBug/version-check</code>         - An action that allows you to check whether your npm package version has been updated     - <code>technote-space/package-version-check-action</code>         - GitHub Actions to check package version before publish     - <code>antifree/json-to-variables</code>         - GitHub action reads JSON file and writes its content as environment variables.     - <code>tomwhross/write-good-action</code>         - A Markdown prose linting action based on <code>write-good</code></p>"},{"location":"actions-to-import/#reviewed-actions","title":"Reviewed actions","text":"<p>This section should contain the actions that have been reviewed and status.</p>"},{"location":"actions-to-import/#tracking-table-legend","title":"Tracking Table Legend","text":"Legend for tracking imports (click to expand)   #### Legend We can use emoji and reference an [emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet) ([punctuation link](https://github.com/ikatyang/emoji-cheat-sheet#punctuation)).  | Icon | Description | |:----:|:-----------:| | :white_check_mark: | Imported | | :large_orange_diamond: | Partially imported | | :exclamation: | Update is needed | | :grey_question: | Under review | | :grey_exclamation: | Review needed | | :x: | Not selected for import,  needs a comment | | :wavy_dash: | Not applicable | | :coffee: | Created in this repo |"},{"location":"actions-to-import/#reviewed-actions-by-category","title":"Reviewed actions by category","text":"<ul> <li>builders<ul> <li><code>set-version</code> :coffee:<ul> <li>Determine a build version using <code>git describe</code>.</li> <li>Source: Created within this repo.</li> </ul> </li> </ul> </li> <li>chatops<ul> <li><code>create-or-update-comment</code> :white_check_mark:<ul> <li>Create or update an issue or pull request comment.</li> <li>Source: <code>peter-evans/create-or-update-comment</code></li> </ul> </li> <li><code>find-comment</code> :white_check_mark:<ul> <li>Find an issue or pull request comment.</li> <li>Source: <code>peter-evans/find-comment</code></li> </ul> </li> </ul> </li> <li>git<ul> <li><code>add-and-commit</code> :white_check_mark:<ul> <li>Commit changes made in your workflow run directly to your repo: for example, you use it to lint your code, update documentation, commit updated builds, etc...</li> <li>Source: <code>EndBug/add-and-commit</code></li> </ul> </li> <li><code>git-describe-semver</code> :white_check_mark:<ul> <li>Replacement for <code>git describe --tags</code> that produces semver compatible versions that follow to semver sorting rules.</li> <li>Source: <code>choffmeister/git-describe-semver</code></li> </ul> </li> <li><code>keep-a-changelog-action</code> :white_check_mark:<ul> <li>A GitHub Action that performs various operations on changelogs that adhere to keep-a-changelog and Semantic Versioning conventions.</li> <li>Source: <code>release-flow/keep-a-changelog-action</code></li> </ul> </li> <li><code>repo-version-info</code> :coffee:<ul> <li>Provide version information from a git repo</li> <li>Source: Created within this repo.</li> </ul> </li> <li><code>semver-git-version</code> :white_check_mark:<ul> <li>Semver versioning based on the git history and commit messages of your repository.</li> <li>Source: <code>codedesignplus/semver-git-version</code></li> </ul> </li> </ul> </li> <li>github<ul> <li>This section needs to be updated.</li> <li><code>create-pull-request</code> :white_check_mark:<ul> <li>Create a pull request for changes to your repository in the actions workspace.</li> <li>Source: <code>peter-evans/create-pull-request</code></li> </ul> </li> <li><code>export-label-config</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>find-pull-request</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>github-changelog-generator</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>issue-triage</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>label-checker</code> :white_check_mark:<ul> <li>Check pull requests (PRs) for the presence or absence of specified labels</li> <li>Source: <code>agilepathway/label-checker</code></li> </ul> </li> <li><code>label-manager</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>label-sync</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>projectnext-label-assigner</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>repository-dispatch</code> :white_check_mark:<ul> <li>A GitHub action to create a repository dispatch event.</li> <li>Source: <code>peter-evans/repository-dispatch</code></li> </ul> </li> <li><code>semantic-pull-request</code> :white_check_mark:<ul> <li>Ensure that your pull request titles match the Conventional Commits spec.</li> <li>Source: <code>amannn/action-semantic-pull-request</code></li> </ul> </li> </ul> </li> <li>releases<ul> <li>This section needs to be updated.</li> <li><code>release-drafter</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>release-tag-updater</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>semantic-release</code> :white_check_mark:<ul> <li>GitHub Action for Semantic Release</li> <li>Uses <code>semantic-release/semantic-release</code></li> <li>Source: <code>cycjimmy/semantic-release-action</code></li> </ul> </li> </ul> </li> <li>utilities<ul> <li>This section needs to be updated.</li> <li><code>copycat</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>packer</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>paths-filter</code> :white_check_mark:<ul> <li>Enables conditional execution of workflow steps and jobs, based on the files modified by pull request, on a feature branch, or by the recently pushed commits.</li> <li>Source: <code>dorny/paths-filter</code></li> </ul> </li> <li><code>public-ip</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> <li><code>render-template</code> :exclamation:<ul> <li>description</li> <li>Source: </li> </ul> </li> </ul> </li> </ul>"},{"location":"actions-to-import/#template-for-entries-in-this-section","title":"Template for entries in this section","text":"<pre><code>    - `name` :exclamation:\n        - description\n        - Source: \n</code></pre>"},{"location":"actions-to-import/#created-actions","title":"Created Actions","text":"<p>This section contains the actions that have been created within this repo and have been moved out of testing.</p> <ul> <li>builders<ul> <li><code>rwaight/actions</code> set-version :coffee:</li> </ul> </li> <li>git<ul> <li><code>rwaight/actions</code> repo-version-info :coffee:</li> </ul> </li> </ul>"},{"location":"adding-commitlint/","title":"Adding commitlint to this repo","text":"<p>The new <code>actions-ci</code> workflow, which is based off of commitlint (commitlint GitHub), has been added in an effort to enforce good git hygiene.</p> <p>The workflow originated from the CI setup GitHub Actions section of the commitlint guides.  The example workflow needed to be updated in order to run, but it should be working now.</p> <p>The default commitlint configuration: <pre><code>module.exports = {\n    extends: [\n        \"@commitlint/config-conventional\"\n    ],\n}\n</code></pre></p>"},{"location":"adding-commitlint/#enforcing-good-git-hygiene","title":"Enforcing good git hygiene","text":"<p>Part of ensuring proper commit messages (and pull requests) will help with automating releases.  For example, the semantic release tool can be used in a GitHub action, via this semantic-release-action.</p> <p>Here are some other write-ups on the topic: - https://www.vantage-ai.com/blog/how-to-enforce-good-pull-requests-on-github - https://hugooodias.medium.com/the-anatomy-of-a-perfect-pull-request-567382bb6067</p>"},{"location":"adding-commitlint/#resources","title":"Resources","text":"<p>commitlint guide links: - Guide: Getting started - Guide: Local setup - Guide: CI Setup</p> <p>Actions that can be used with <code>commitlint</code>: - https://github.com/webiny/action-conventional-commits - https://github.com/wagoid/commitlint-github-action - https://github.com/commitizen/conventional-commit-types - https://github.com/amannn/action-semantic-pull-request - (deprecated) https://github.com/squash-commit-app/squash-commit-app - (deprecated) https://github.com/zeke/semantic-pull-requests</p> <p>Examples with a <code>semantic.yml</code> file within a GitHub repo: - https://github.com/GoogleChrome/lighthouse-ci/blob/main/.github/semantic.yml - https://github.com/minecrafthome/minecrafthome/blob/master/semantic.yml - https://github.com/meltano/sdk/blob/main/.github/semantic.yml - https://github.com/vectordotdev/vector/blob/master/.github/semantic.yml</p> <p>Here are links to other resources: - https://github.blog/changelog/2022-05-11-default-to-pr-titles-for-squash-merge-commit-messages/ - https://semantic-release.gitbook.io/semantic-release/recipes/ci-configurations/github-actions - https://jamiewen00.medium.com/integrate-commitlint-to-your-repository-67d6524d0d24 - https://ajcwebdev.com/semantic-github/</p>"},{"location":"automating-pull-requests/","title":"Automating Pull Requests","text":"<p>Resources: - https://github.com/bjornvandijkman1993/pull-request-automation     - https://github.com/bjornvandijkman1993/pull-request-automation/blob/main/.github/semantic.yml</p>"},{"location":"automating-pull-requests/#adding-commitlint-to-a-github-repo","title":"Adding commitlint to a GitHub repo","text":"<p>The new <code>actions-ci</code> workflow, which is based off of commitlint (commitlint GitHub), has been added in an effort to enforce good git hygiene.</p> <p>The workflow originated from the CI setup GitHub Actions section of the commitlint guides.  The example workflow needed to be updated in order to run, but it should be working now.</p> <p>The default commitlint configuration: <pre><code>module.exports = {\n    extends: [\n        \"@commitlint/config-conventional\"\n    ],\n}\n</code></pre></p>"},{"location":"automating-pull-requests/#resources","title":"Resources","text":"<p>commitlint guide links: - Guide: Getting started - Guide: Local setup - Guide: CI Setup</p> <p>Actions that can be used with <code>commitlint</code>: - https://github.com/webiny/action-conventional-commits - https://github.com/wagoid/commitlint-github-action - https://github.com/commitizen/conventional-commit-types - https://github.com/amannn/action-semantic-pull-request - (deprecated) https://github.com/squash-commit-app/squash-commit-app - (deprecated) https://github.com/zeke/semantic-pull-requests</p> <p>Examples with a <code>semantic.yml</code> file within a GitHub repo: - https://github.com/GoogleChrome/lighthouse-ci/blob/main/.github/semantic.yml - https://github.com/minecrafthome/minecrafthome/blob/master/semantic.yml - https://github.com/meltano/sdk/blob/main/.github/semantic.yml - https://github.com/vectordotdev/vector/blob/master/.github/semantic.yml</p> <p>Here are links to other resources: - https://github.blog/changelog/2022-05-11-default-to-pr-titles-for-squash-merge-commit-messages/ - https://semantic-release.gitbook.io/semantic-release/recipes/ci-configurations/github-actions - https://jamiewen00.medium.com/integrate-commitlint-to-your-repository-67d6524d0d24 - https://ajcwebdev.com/semantic-github/</p>"},{"location":"autorelease-process-notes/","title":"Autorelease Process","text":""},{"location":"autorelease-process-notes/#about-the-autorelease-process","title":"About the autorelease process","text":"<p>The goal of autorelease process is to reduce time spent on the overall \"release\" process.  This includes, but is not limited to: code changes; software updates; deploying new containers or images; deploying updated templates and files; reviewing and verifying built applications, artifacts, images, tools, etc.</p>"},{"location":"autorelease-process-notes/#process-overview","title":"Process Overview","text":"<p>The \"autorelease process\" currently exists as 5 steps, with hopefully minimal time spent on the actual \"release\".</p>"},{"location":"autorelease-process-notes/#inputs-and-outputs","title":"Inputs and outputs","text":"<p>this section is incomplete</p>"},{"location":"autorelease-process-notes/#autorelease-reusable-workflows","title":"Autorelease Reusable Workflows","text":"<p>The autorelease process currently leverages GitHub's reusable workflows. - Future state is that most of the actual jobs below would become composite GitHub Actions that are called by the reusable workflows. - There is a limitation that subdirectories are not supported for reusable workflows     - See https://github.com/orgs/community/discussions/15935     &gt; Reusable workflows are YAML-formatted files, very similar to any other workflow file. As with other workflow files, you locate reusable workflows in the <code>.github/workflows</code> directory of a repository. Subdirectories of the <code>workflows</code> directory are not supported.</p>"},{"location":"autorelease-process-notes/#github-credentials","title":"GitHub Credentials","text":"<p>Using autorelease requires a GitHub token to access the GitHub API. You configure this token via the <code>ACTIONS_TOKEN</code> secret and the <code>GH_APP_ID</code> and <code>GH_APP_KEY</code> secrets.</p> <p>In the future, you might have the option to specify if you want to use a Personal Access Token or authenticate with a GitHub app (bot).</p> <p>[!WARNING] You will need to specify the both token secrets for your workflows to run the autorelease workflows.</p> <p>All resources created by the autorelease workflows will not trigger future GitHub actions workflows,  and workflows normally triggered by the applicable \"autorelease\" events will also not run.  From GitHub's  triggering a workflow docs:</p> <p>When you use the repository's <code>GITHUB_TOKEN</code> to perform tasks, events triggered by the <code>GITHUB_TOKEN</code> will not create a new workflow run. This prevents you from accidentally creating recursive workflow runs.</p> <p>You will want to need a GitHub Actions secret with a Personal Access Token if you want GitHub Actions run on the applicable \"autorelease\" events.</p>"},{"location":"autorelease-process-notes/#workflow-permissions","title":"Workflow Permissions","text":"<p>The autorelease workflows should specify the permissions needed; however, if they do not then they will need the following permissions:</p> <pre><code>permissions:\n  contents: write\n  pull-requests: write\n</code></pre>"},{"location":"autorelease-process-notes/#workflow-numbering-order","title":"Workflow Numbering Order","text":"<p>The numbering for autorelease workflows should be as follows</p>"},{"location":"autorelease-process-notes/#step-1","title":"Step 1","text":"<p>The process starts when the user runs the Autorelease - prepare release PR workflow - For repos without builds, this should be the <code>autorelease-01-prep-pr</code> workflow file - For repos with builds, this should be the <code>autorelease-01-prep-build</code> workflow file</p>"},{"location":"autorelease-process-notes/#01-prepare-release","title":"01. prepare-release","text":"<p>Check inputs, get next version, determine next steps - for repos with packer, this is called from 'prep-build'?</p> <ol> <li>check the user inputs             (tbd???)</li> <li>get the next version              (reuse-next-version)</li> <li>determine the next step for inputs and outputs... (tbd???)</li> </ol>"},{"location":"autorelease-process-notes/#02-prep-build","title":"02. prep-build","text":"<p>if applicable</p> <ol> <li>validate the reviewed image ID    (reuse-verify-reviewed-image)</li> <li>call 'test-build'</li> <li>gather build results</li> <li>send results to 'prepare-pr'</li> </ol>"},{"location":"autorelease-process-notes/#03-prepare-pr","title":"03. prepare-pr","text":"<p>this job is the last part of the \"first step\" for the autorelease process</p> <ol> <li>prepare the release items    (prepare-pr)<ul> <li>prepare and create the initial release draft</li> <li>prepare and create the release pull request</li> </ul> </li> <li>print the prepare-release outputs</li> <li>(wish-list item) update the repo changelog<ul> <li>for repos with builds, this would also update the \"build log\"</li> </ul> </li> <li>(wish-list item) check to make sure no other PRs are opened (or pushes to the default branch)<ul> <li>it would probably be part of this job... and would auto-close the release pull request, since a change was made??</li> </ul> </li> </ol>"},{"location":"autorelease-process-notes/#step-2","title":"Step 2","text":"<p>The process starts when the release pull request is merged into the default branch - For all repos, this should be the <code>autorelease-02-pr-merged</code> workflow file</p>"},{"location":"autorelease-process-notes/#04-pr-merged","title":"04. pr-merged","text":"<ol> <li>get the version from the autorelease branch;                             (check-autorelease-branch)    ## done</li> <li>get the version, type, and reviewed image id from the JSON_VARS_FILE;    (check-json-file)             ## done</li> <li>get the commit SHA's from the merged pull request;                       (check-commit-sha)            ## done</li> <li>validate the versions match (between autorelease and the file);          (validate-version)            ## done</li> <li>create the full-version tag with the new version;                    (create-tag)                  ## broken</li> </ol>"},{"location":"autorelease-process-notes/#step-3","title":"Step 3","text":"<p>The process starts when the full version tag is created (by the pr-merged job) - For repos without builds, this should be the <code>autorelease-03-prep-release</code> workflow file - For repos with builds, this should be the <code>autorelease-03-build-prod</code> workflow file</p>"},{"location":"autorelease-process-notes/#05-validate-tag-was-autorelease-03-validate-from-created-tag","title":"05. validate-tag   (was autorelease 03 - validate from created tag)","text":"<ol> <li>get the version from the tag;                                            (check-tag)             ## done</li> <li>get the version, type, and reviewed image id from the JSON_VARS_FILE;    (check-json-file)       ## done  (update to call the new reusable workflow..)</li> <li>(wish-list item) update a separate \"release log\"<ul> <li>for repos with builds, this would also update the \"build log\"</li> </ul> </li> <li>check for any non-build outputs that might need to go to the 'prepare-final-draft' job </li> </ol>"},{"location":"autorelease-process-notes/#06-build-prod-was-autorelease-03-build-prod","title":"06. build-prod     (was autorelease 03 - build-prod)","text":"<p>if applicable this job should be called by the 'validate-tag' job in the remote repo</p> <ol> <li>validate the reviewed image ID from the JSON_VARS_FILE;             (check-image-id)          (validate-image-id)       (update to call the new reusable workflow..)</li> <li>validate the versions match (between autorelease and the file);     (validate-version)        (use the same job from the '02 pr-merged' workflow)</li> <li>call the builder using the 'convert-to-prod' build method;               (call-build-prod)</li> <li>print the build results</li> <li>gather the AMI info and upload the artifact somewhere??<ul> <li>upload the AMI artifact file to the draft release</li> </ul> </li> <li>update the release template file (or send the proper outputs to the 'prepare-final-draft' job)<ul> <li>probably use <code>sed</code> or something to find/replace the new AMI ID into the file</li> </ul> </li> <li>print output that the new image has been built and to check the status of the 'prepare-final-draft' job</li> </ol>"},{"location":"autorelease-process-notes/#07-prepare-final-draft-was-autorelease-04-update-final-draft-release","title":"07. prepare-final-draft     (was autorelease 04 - update FINAL draft release)","text":"<ol> <li>verify the draft release has the proper updates (either from validate-tag or build-prod)<ul> <li>for build-prod, verify the new AMI ID.  If an update needs to be made, use <code>sed</code> or something</li> <li>for validate-tag, need to verify the applicable outputs or updates.  If an update needs to be made, use <code>sed</code> or something</li> </ul> </li> <li>verify the applicable artifacts are added to the draft release<ul> <li>for build-prod, verify the AMI artifact file is uploaded</li> </ul> </li> <li>update the release draft</li> <li>maybe a check to ensure the draft release is valid?</li> <li>print output that the release draft is ready for review</li> <li>the next step is manual, requiring someone to review the release draft</li> </ol>"},{"location":"autorelease-process-notes/#step-4","title":"Step 4","text":"<p>This step starts with a manual review of the release draft.</p> <p>Once the release draft has been reviewed and verified, click Publish release</p>"},{"location":"autorelease-process-notes/#step-5","title":"Step 5","text":"<p>The process starts when the release is published manually by the person reviewing the release draft - For all repos, this should be the <code>autorelease-04-update-tags</code> workflow file</p>"},{"location":"autorelease-process-notes/#08-update-tags-maybe-rename-this","title":"08. update-tags    (maybe rename this??)","text":"<ol> <li>Update major and minor tags on release (update-tags-on-release)   this might be the last step</li> <li>(wish-list item) send a notification (maybe on Slack, Discord, etc)</li> <li>(wish-list item) if applicable make updates with any needed IDs or artifacts from the release, then open a PR with post-release notes??</li> <li>celebrate!</li> </ol>"},{"location":"autorelease-process-notes/#details-about-specific-jobs-and-actions","title":"Details about specific jobs and actions","text":""},{"location":"autorelease-process-notes/#calculating-the-next-version","title":"Calculating the next version","text":"<p>Autorelease currently uses the <code>test/get-next-semver</code> action to determine the next version. - Details about how the next version is calculated can be found in the next-tag section of the <code>get-next-semver</code> README - The only time the \"next version\" will match the \"build version\" is when a full version tag is created.</p>"},{"location":"autorelease-process-notes/#calculating-the-build-version","title":"Calculating the build version","text":"<p>Autorelease will use the <code>builders/set-version</code> action to determine the build version. - The default build version is calculated based on the output from running the command <code>git describe --tags --match \"v[0-9].[0-9].[0-9]*\"</code> - The only time the \"next version\" will match the \"build version\" is when a full version tag is created.</p>"},{"location":"autorelease-process-notes/#filtering-for-the-full-version-tag-in-an-action","title":"Filtering for the full version tag in an action","text":"<p>Note the filter pattern will need to be updated to allow double digits, either: - specify 2 digits with a second range followed by <code>?</code>:      - using: <code>'v[0-9][0-9]?.[0-9][0-9]?.[0-9][0-9]?'</code> - or keep the single digit, but match one or more with <code>+</code>:     - using: <code>'v[0-9]+.[0-9]+.[0-9]+'</code></p> <p>See GitHub's filter pattern cheat sheet for more info.</p> <p>important: using <code>'v*.*.*'</code> does not work.  For example, using <code>if: contains('refs/tags/v*.*.*', github.ref) &amp;&amp; github.ref_type == 'tag'</code> will not ever be true since <code>'v*.*.*'</code> is not the proper syntax.  You must use <code>v[0-9].[0-9].[0-9]</code> (or one of the options above) instead.</p>"},{"location":"bots-in-github-actions/","title":"Using bots and apps in GitHub Actions","text":""},{"location":"bots-in-github-actions/#login-to-git-as-a-github-app","title":"Login to Git as a GitHub App","text":"<p>From https://github.com/orgs/community/discussions/24664#discussioncomment-3244950</p> <p>How would I log into Git as a GitHub App? \ud83e\udd14 I\u2019ve sort of got it working, but I\u2019m curious what the \u201cactual\u201d way of doing this is \ud83d\ude03</p> <p>It\u2019s possible to authenticate with GitHub.com as a GitHub App; here\u2019s the section on HTTP-based Git access by an installation.</p> <p>What would I set as the Git username and email? Thank you!</p> <p>That\u2019s a great question! The way we currently attribute commits made by GitHub Apps isn\u2019t currently publicly documented in our <code>Setting your commit email address</code> article and is subject to change at anytime without notice. If it\u2019s helpful in the meantime, here\u2019s something you could try (though your mileage may vary over time).</p> <p>You could set the Git username is the name of your application with <code>[bot]</code> appended at the end. For example, if your bot\u2019s name is <code>machina</code>, then the Git username is <code>machina[bot]</code>: <pre><code>git config user.name \"machina[bot]\"\n</code></pre></p> <p>For the email, you could set it to the GitHub App\u2019s user <code>id</code>, a plus sign (<code>+</code>), and its name with <code>[bot]</code> appended, followed by the Users No Reply GitHub email address. For example, if the app\u2019s user <code>id</code> is <code>123456789</code>, then the email would be: <pre><code>git config user.email \"123456789+machina[bot]@users.noreply.github.com\"\n</code></pre> Here\u2019s an example commit showing the GitHub Actions installation committing to a repository: <code>actions-packages-examples/github-script__playground@f75a13b</code></p> <p>In its patch file, observe the second line\u2019s contents: <pre><code>From: \"github-actions[bot]\"\n &lt;41898282+github-actions[bot]@users.noreply.github.com&gt;\n</code></pre> One approach for obtaining the GitHub App\u2019s user ID is to create a new file using the Contents API, navigating to the commit on GitHub.com, and appending <code>.patch</code> to the end of that commit URL to reveal the patch information showcasing the actor name and email address we use. I hope this helps!</p> <p>update Not to be confused with GitHub App ID. This must be the UID for the GitHub App itself. You can find it using the approach from: https://github.com/orgs/community/discussions/24664#discussioncomment-3880274</p>"},{"location":"bots-in-github-actions/#getting-the-app-uid","title":"Getting the App UID","text":"<p>A much simpler approach to getting your app's \"User ID\" is to simply call:</p> <p><code>https://api.github.com/users/myapp[bot]</code></p> <p>Replacing <code>myapp</code> with your app name, but leaving the <code>[bot]</code> suffix in place. You can get any app's user ID this way (yes, even private apps) - you do not even need to use an auth token for that request, let alone wrangle with creating a JWT from your private key and using the contents API to make a commit from which to get that ID.</p>"},{"location":"bots-in-github-actions/#using-the-github-actions-bot-user","title":"Using the GitHub Actions bot user","text":"<p>If you want to use the proper GitHub actions bot user, take a look at <code>actions/checkout#13</code>, which has dozens of linked PRs where the proper configurations are configured to use the bot.</p> <p>The source is actions/checkout#13 (comment 724415212):</p> <p>I think this would be a nice feature. It would also lead to a more consistent appearance of commits created by GitHub Actions. I'm currently wondering which email address and username I should use for the time being.</p> <ol> <li>The README.md suggests <code>github-actions &lt;github-actions@github.com&gt;</code>. However, this email is not recognized by the platform. GitHub displays the author of the commit with the generic icon and without a link.    </li> <li>A thread in the GitHub Support Community suggests <code>github-actions[bot] &lt;41898282+github-actions[bot]@users.noreply.github.com&gt;</code>. This seems to work nicely. The author of the commit has the same icon and name as GitHub Actions everywhere else. The link goes to https://github.com/features/actions as I would expect. I'm just wondering if there is any caveat since it is not promoted in the README.md.    </li> <li>Most repositories I found seem to use <code>GitHub Action &lt;action@github.com&gt;</code>. I don't know where this is comming from. GitHub seems to link it to some user but clicking on the user opens a 404-page. The icon and name doesn't match what is usually shown for GitHub Actions.    </li> </ol> <p>If there is no caveat for the second option, I would suggest that the checkout action configures Git accordingly if none of both options is already set. (Alternatively, GitHub's runners could be updated to use this configuration.)</p>"},{"location":"bots-in-github-actions/#examples-with-updated-configuration","title":"Examples with updated configuration","text":""},{"location":"bots-in-github-actions/#ad-mgithub-push-action","title":"ad-m/github-push-action","text":"<p>From https://github.com/ad-m/github-push-action/pull/72</p> <p>See the differences between these two 'users' here: actions/checkout#13 (comment)</p> <p>As well as some investigation here: https://github.community/t/github-actions-bot-email-address/17204</p> <p>Also changing the <code>default</code> in the docs to reflect the actual default specified in the <code>actions.yml</code> file. <pre><code>    - name: Commit files\n      run: |\n        git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n        git config --local user.name \"github-actions[bot]\"\n        git commit -m \"Add changes\" -a\n</code></pre></p>"},{"location":"bots-in-github-actions/#squidfunkmkdocs-material","title":"squidfunk/mkdocs-material","text":"<p>From https://github.com/squidfunk/mkdocs-material/pull/6335</p> <p>Workflow for \"Material for MkDocs\" <pre><code>    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n        steps:\n          - uses: actions/checkout@v4\n          - name: Configure Git Credentials\n            run: |\n              git config user.name github-actions[bot]\n              git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n</code></pre></p> <p>Workflow for \"Insiders\" <pre><code>    jobs:\n      deploy:\n        runs-on: ubuntu-latest\n        if: github.event.repository.fork == false\n        steps:\n          - uses: actions/checkout@v4\n          - name: Configure Git Credentials\n            run: |\n              git config user.name github-actions[bot]\n              git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n</code></pre></p>"},{"location":"bots-in-github-actions/#idkbrowbygamingrealm-frontend","title":"idkbrowby/gamingrealm-frontend","text":"<p>From: https://github.com/idkbrowby/gamingrealm-frontend/pull/17</p> <pre><code>      - name: Commit file\n        run: |\n          git config --global user.name github-actions[bot]\n          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com\n</code></pre>"},{"location":"bots-in-github-actions/#ownerrepo","title":"owner/repo","text":"<p>From: https://github.com/northy/pdf-to-markdown-workflow/pull/2</p> <pre><code>git config --global user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\ngit config --global user.name \"github-actions[bot]\"\n</code></pre>"},{"location":"bots-in-github-actions/#ownerrepo_1","title":"owner/repo","text":""},{"location":"bots-in-github-actions/#ownerrepo_2","title":"owner/repo","text":""},{"location":"git-revert-examples/","title":"Git revert examples","text":"<p>Examples to revert changes in a repo, primarily using <code>git revert</code>.  These examples come from the following sources: - https://stackoverflow.com/questions/3293531/how-to-permanently-remove-few-commits-from-remote-branch - https://christoph.ruegg.name/blog/git-howto-revert-a-commit-already-pushed-to-a-remote-reposit</p>"},{"location":"git-revert-examples/#revert-an-already-pushed-commit","title":"Revert an already pushed commit","text":"<p>Important: Make sure you specify which branches on <code>git push -f</code> or you might inadvertently modify other branches![*]</p>"},{"location":"git-revert-examples/#delete-the-last-n-commits","title":"Delete the last <code>n</code> commits","text":"<p>Example: Delete the last 4 commits: <pre><code>git reset --hard HEAD~4\n</code></pre></p> <p>Then run the following command (on your local machine) to force the remote branch to rewrite its history: <pre><code>git push --force\n</code></pre></p>"},{"location":"git-revert-examples/#delete-to-a-specific-commit-id","title":"Delete to a specific commit ID","text":"<p>Retrieve the desired commit ID by running <pre><code>git log\n</code></pre></p> <p>In the example, the desired commit is <code>8675309</code>.</p> <p>Then you can replace <code>HEAD~N</code> with the desired commit ID like this: <pre><code>git reset --hard 8675309\n</code></pre></p> <p>If you want to keep changes on file system and just modify index (commit history), use <code>--soft</code> flag like <code>git reset --soft HEAD~4</code>. Then you have chance to check your latest changes and keep or drop all or parts of them. In the latter case running <code>git status</code> shows the files changed since <code>&lt;desired-commit-id&gt;</code>. If you use <code>--hard</code> option, <code>git status</code> will tell you that your local branch is exactly the same as the remote one. If you don't use <code>--hard</code> nor <code>--soft</code>, the default mode is used that is <code>--mixed</code>. In this mode, <code>git help reset</code> says:</p> <p>Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated.</p>"},{"location":"git-revert-examples/#revert-the-full-commit","title":"Revert the full commit","text":"<pre><code>git revert 8675309\n</code></pre>"},{"location":"git-revert-examples/#delete-the-last-commit","title":"Delete the last commit","text":"<p>On a remote branch: <pre><code>git push &lt;&lt;remote&gt;&gt; +8675309^:&lt;&lt;BRANCH_NAME_HERE&gt;&gt;\n</code></pre></p> <p>On a local branch: <pre><code>git reset HEAD^ --hard\ngit push &lt;&lt;remote&gt;&gt; -f\n</code></pre></p> <p>Where <code>+8675309</code> is your commit hash and git interprets <code>x^</code> as the parent of <code>x</code>, and <code>+</code> as a forced non-fastforwared push.</p>"},{"location":"git-revert-examples/#delete-the-commit-from-a-list","title":"Delete the commit from a list","text":"<pre><code>git rebase -i 8675309^\n</code></pre> <p>This will open and editor showing a list of all commits. Delete the one you want to get rid off. Finish the rebase and push force to repo.</p> <pre><code>git rebase --continue\ngit push &lt;remote_repo&gt; &lt;remote_branch&gt; -f\n</code></pre>"},{"location":"git-revert-examples/#remove-commits-from-remote-without-removing-from-local","title":"Remove commits from remote without removing from local","text":"<p>clean way of removing your commits from the remote repository without losing your work</p> <pre><code>git reset --soft HEAD~1 # 1 represents only last 1 commit \ngit stash # hold your work temporary storage temporarily.\ngit pull # bring your local in sync with remote\ngit reset --hard HEAD~1 # hard reset 1 commit behind (deletes local commit)\ngit push -f # force push to sync local with remote\ngit stash pop # get back your unpushed work from stash\n</code></pre>"},{"location":"git-tags-examples/","title":"Git tag examples","text":""},{"location":"git-tags-examples/#getting-tags-on-a-git-repository","title":"Getting tags on a git repository","text":"<p>Use <code>git describe --tags</code> to get the tags.</p>"},{"location":"git-tags-examples/#examples-using-git-describe","title":"Examples using git describe","text":"Examples using git describe (click to expand)  ### Examples using git describe  Using `git describe --tags`: <pre><code>git describe --tags\n## output\nv0.2.1-15-g7a82bbe\n</code></pre>  Using `git describe` <pre><code>git describe\n## output\nv0.1.2-39-g7a82bbe\n</code></pre>  Using `git describe --abbrev=0 --tags` to get the tag from the current branch <pre><code>git describe --abbrev=0 --tags\n## output\nv0.2.1\n</code></pre>  Using `git describe` with `git rev-list` to get tags across all branches, not just the current branch <pre><code>git describe --tags `git rev-list --tags --max-count=1`\n## output\nv0.2.1\n</code></pre>"},{"location":"git-tags-examples/#other-examples","title":"Other examples","text":"Other git describe examples (click to expand)  ### Other examples using git describe  Get the latest tagged version and remove the `v` prefix: <pre><code>git tag --sort=committerdate | grep -E '[0-9]' | tail -1 | cut -b 2-7\n## output\n0.2.1\n</code></pre>  Using `git describe` with `--abbrev` set to `0` <pre><code>git describe --abbrev=0\n## output\nv0.1.2\n</code></pre>"},{"location":"git-tags-examples/#sorting-tags","title":"Sorting tags","text":""},{"location":"git-tags-examples/#using-the-sort-option","title":"Using the --sort option","text":"<p>From https://stackoverflow.com/questions/14273531/how-to-sort-git-tags-by-version-string-order-of-form-rc-x-y-z-w?#answer-22634649</p> <p>With Git 2.0 (June 2014), you will be able to specify a sorting order!</p> <p>Using <code>--sort=&lt;type&gt;</code></p> <p>Sort in a specific order. Supported type is: * \"<code>refname</code>\" (lexicographic order), * \"<code>version:refname</code>\" or \"<code>v:refname</code>\" (tag names are treated as versions).</p> <p>Prepend \"<code>-</code>\" to reverse sort order.</p> <p>So, if you have: <pre><code>git tag foo1.3 &amp;&amp;\ngit tag foo1.6 &amp;&amp;\ngit tag foo1.10\n</code></pre></p> <p>Here is what you would get: <pre><code># lexical sort\ngit tag -l --sort=refname \"foo*\"\nfoo1.10\nfoo1.3\nfoo1.6\n\n# version sort\ngit tag -l --sort=version:refname \"foo*\"\nfoo1.3\nfoo1.6\nfoo1.10\n\n# reverse version sort\ngit tag -l --sort=-version:refname \"foo*\"\nfoo1.10\nfoo1.6\nfoo1.3\n\n# reverse lexical sort\ngit tag -l --sort=-refname \"foo*\"\nfoo1.6\nfoo1.3\nfoo1.10\n</code></pre></p>"},{"location":"git-tags-examples/#examples-using-git-tag-to-sort-tags","title":"Examples using git tag to sort tags","text":"<p>Sort by <code>-taggerdate</code> <pre><code>git tag --sort=-taggerdate\n## output\nv0.1.2\nv0.1.1\nv0\nv0.1.0\nv0.2\nv0.2.0\nv0.2.1\n</code></pre></p> <p>Sort by <code>taggerdate</code> <pre><code>git tag --sort=taggerdate\n## output\nv0\nv0.1.0\nv0.2\nv0.2.0\nv0.2.1\nv0.1.1\nv0.1.2\n</code></pre></p> <p>Sort by <code>-committerdate</code> <pre><code>git tag --sort=-committerdate\n## output\nv0.2.1\nv0\nv0.2\nv0.2.0\nv0.1.0\nv0.1.1\nv0.1.2\n</code></pre></p> <p>Sort by <code>committerdate</code> <pre><code>git tag --sort=committerdate\n## output\nv0.1.1\nv0.1.2\nv0.1.0\nv0\nv0.2\nv0.2.0\nv0.2.1\n</code></pre></p>"},{"location":"git-tags-examples/#getting-the-latest-tag","title":"Getting the latest tag","text":"<p>You can use any of the following commands to get the latest tag</p>"},{"location":"git-tags-examples/#using-git-ls-remote","title":"Using <code>git ls-remote</code>","text":"<p>Using <code>git ls-remote --tags --sort=committerdate</code>: <pre><code>git ls-remote --tags --sort=committerdate | grep -o 'v.*' | sort -r\n## output\nFrom https://github.com/rwaight/actions.git\nv0.2.1\nv0.2.0\nv0.2\nv0.1.2^{}\nv0.1.2\nv0.1.1^{}\nv0.1.1\nv0.1.0\nv0\n</code></pre></p> <p>Using <code>git ls-remote --tags --sort=committerdate | grep -o 'v.*'</code>: <pre><code>git ls-remote --tags --sort=committerdate | grep -o 'v.*'\n## output\nv0.1.1\nv0.1.2\nv0.1.0\nv0.1.1^{}\nv0.1.2^{}\nv0.2.0\nv0\nv0.2\nv0.2.1\n</code></pre></p> <p>Using <code>git ls-remote --tags --sort=taggerdate | grep -o 'v.*' | sort -r</code>: <pre><code>git ls-remote --tags --sort=taggerdate | grep -o 'v.*' | sort -r\n## output\nFrom https://github.com/rwaight/actions.git\nv0.2.1\nv0.2.0\nv0.2\nv0.1.2^{}\nv0.1.2\nv0.1.1^{}\nv0.1.1\nv0.1.0\nv0\n</code></pre></p>"},{"location":"git-tags-examples/#using-git-tag","title":"Using <code>git tag</code>","text":"<p>Using <code>git tag --sort=-taggerdate | tail -1</code>: <pre><code>git tag --sort=-taggerdate | tail -1\n## output\nv0.2.1\n</code></pre></p> <p>Using <code>git tag --sort=committerdate | grep -o 'v.*' | sort -r</code>: <pre><code>git tag --sort=committerdate | grep -o 'v.*' | sort -r\n## output\nv0.2.1\nv0.2.0\nv0.2\nv0.1.2\nv0.1.1\nv0.1.0\nv0\n</code></pre></p> <p>Using <code>git tag --sort=committerdate | grep -o 'v.*' | sort -r | head -1</code>: <pre><code>git tag --sort=committerdate | grep -o 'v.*' | sort -r | head -1\n## output\nv0.2.1\n</code></pre></p>"},{"location":"git-tags-examples/#using-git-for-each-ref","title":"Using <code>git for-each-ref</code>","text":"<p>Using <code>git for-each-ref --sort=creatordate --format '%(refname) %(creatordate)' refs/tags</code>: <pre><code>git for-each-ref --sort=creatordate --format '%(refname) %(creatordate)' refs/tags\n## output\nrefs/tags/v0.1.0 Mon Mar 11 12:10:23 2024 -0500\nrefs/tags/v0.1.1 Mon Mar 11 13:37:32 2024 -0500\nrefs/tags/v0.1.2 Mon Mar 11 13:50:12 2024 -0500\nrefs/tags/v0 Mon Mar 11 20:00:06 2024 -0500\nrefs/tags/v0.2 Mon Mar 11 20:00:06 2024 -0500\nrefs/tags/v0.2.0 Mon Mar 11 20:00:06 2024 -0500\nrefs/tags/v0.2.1 Thu Mar 14 11:39:55 2024 -0500\n</code></pre></p>"},{"location":"git-tags-examples/#examples-using-git-tag","title":"Examples using git tag","text":"Examples using git tag (click to expand)  ### Examples using git tag  Using `git tag -l`: <pre><code>git tag -l\n## output\nv0\nv0.1.0\nv0.1.1\nv0.1.2\nv0.2\nv0.2.0\nv0.2.1\n</code></pre>  Using `git tag -l | tail -1`: <pre><code>git tag -l | tail -1\n## output\nv0.2.1\n</code></pre>  Using `git tag | sort -V`: <pre><code>git tag | sort -V\n## output\nv0\nv0.1.0\nv0.1.1\nv0.1.2\nv0.2\nv0.2.0\nv0.2.1\n</code></pre>"},{"location":"git-tags-examples/#examples-using-git-rev-list","title":"Examples using git rev-list","text":"Examples using git rev-list (click to expand)  ### Examples using git rev-list  Using `git rev-list --tags --max-count=1`: <pre><code>git rev-list --tags --max-count=1\n## output\nd702f1832400f86753094a219e8383ae817ade34\n</code></pre>"},{"location":"git-tags-examples/#templates-below","title":"templates below","text":"<pre><code>### command template\n\nUsing `command_here`:\n```bash\ncommand_here\n## output\noutput_here\n```\n</code></pre>"},{"location":"github-meta-issues/","title":"Github meta issues","text":"<p>This page is from https://github.com/dart-lang/sdk/blob/main/docs/Working-with-meta-issues.md</p> <p>[!IMPORTANT] This page was copied from https://github.com/dart-lang/sdk/wiki and needs review. Please contribute changes to bring it up-to-date -</p> <p>When doing a large task that involves multiple people or changes to the codebase, it helps to have a single issue that tracks the overall state of the task. This is called a \"meta-issue\". It describes the overall goal and links to more specific issues for individual pieces of work.</p> <p>If a meta-issue involves work across multiple areas, it should have the \"area:meta\" label. It should also be assigned to a person who is responsible for coordinating the work across teams and keeping the meta-issue updated. If all of the tasks are within a single area, the meta-issue should instead be labeled with that area. In that case, it doesn't need an assignee, though having one doesn't hurt.</p> <p>Like other specific issues, it should have a <code>type:</code> label that describes the type of the overall change: type:fix, type:feat, etc.</p> <p>The meta-issue's body text should give a high-level overview of the change followed by a task list for all the sub-issues. Each entry should have a very brief description and a link to the sub-issue. A task list can be created using the following Markdown:</p> <pre><code>- [ ] item\n- [ ] item\n- [x] checked item\n</code></pre> <p>Once a sub-issue is completed, its entry should be checked. If applicable, the first release to contain the fix should be mentioned as well.</p> <p>Occasionally new sub-issues come up. For example, a bug might be found in the solution to a previously-completed sub-issue. To add these to the meta-issue, a triager should both add a comment linking to the new sub-issue and add it to the task list. Adding a comment notifies interested parties of a new blocking issue, and updating the task list ensures that the original post continues to provide an up-to-date view of everything required for the meta-issue.</p> <p>When all of the sub-issues are closed and the owner of the meta-issue decides the overall task is complete, they should close the meta-issue.</p> <p>See this <code>dart-lang/sdk</code> issue for a good example of a meta-issue.</p>"},{"location":"importing-actions-manual/","title":"Importing actions manual","text":""},{"location":"importing-actions-manual/#update-standards-for-imported-actions","title":"Update standards for imported actions","text":"<p>Note: Once the action has been imported, be sure to keep the repo README updated</p>"},{"location":"importing-actions-manual/#branding-imported-actions","title":"Branding Imported Actions","text":"<p>Use the code block below to add <code>branding</code> to the imported actions. <pre><code>branding:\n  icon: 'copy'\n  color: 'blue'\n  # Ref: https://haya14busa.github.io/github-action-brandings/\n  # fork: https://github.com/rwaight/github-action-brandings\n</code></pre></p>"},{"location":"importing-actions-manual/#copying-documentation-in-place","title":"Copying documentation in place","text":"<p>When importing a new action, <code>cd</code> into the directory then run the following commands to keep an original copy of specific files: <pre><code>import=example-action\n# cd into the directory\ncd $import\n# rename the '.github' directory\nmv .github __dot_github\n# copy and rename the '.yml' file(s) in the '__dot_github' directory\nfor f in __dot_github/*.yml; do mv \"$f\" \"$f.disabled\"; done\n# copy and rename the '.yml' file(s) in the '__dot_github/workflows' directory\nfor f in __dot_github/workflows/*.yml; do mv \"$f\" \"$f.disabled\"; done\n# copy and rename the '.md' file(s)\nfor f in *.md; do cp \"$f\" \"${import}__$f\"; done\n# copy and rename the '.yml' file(s)\nfor f in *.yml; do cp \"$f\" \"${import}__$f\"; done\n</code></pre></p>"},{"location":"importing-actions-manual/#documentation-for-imported-actions","title":"Documentation for imported actions","text":"<p>The source actions repository README should be renamed to <code>&lt;reponame&gt;__README.md</code> and a new README should be created, using the following as a template: <pre><code># GitHub ACTION_TITLE Action\n\nThe current version in this repo was based off of [**REPO_NAME_ONLY** RELEASE_TAG_VERSION_HERE](https://github.com/REPO_OWNER_SLASH_REPO_NAME/releases/tag/RELEASE_TAG_VERSION_HERE)\n- for specific commits, include the following _after_ the tag link: `(specifically [this commit](https://github.com/REPO_OWNER_SLASH_REPO_NAME/commit/HASH_OF_UNIQUE_COMMIT_IN_SOURCE_REPO))`\n- This action is from https://github.com/REPO_OWNER_SLASH_REPO_NAME.\n\n\nThe [`REPO_OWNER_SLASH_REPO_NAME`](https://github.com/REPO_OWNER_SLASH_REPO_NAME) has a (an) LICENSE_NAME_HERE:\n&gt; LICENSE_SUMMARY_TEXT_HERE\n\n## Updates to the action\n\nNone at this time.\n\n## ACTION_TITLE action\n\nACTION_SUMMARY_DESCRIPTION_HERE\n\n## Inputs\n\nACTION_INPUTS_SUMMARY_HERE\n\n## Outputs\n\nACTION_OUTPUTS_SUMMARY_HERE\n\n## Deploying this action\n\nExample workflow:\n```yml\nname: EXAMPLE_WORKFLOW_NAME_HERE\nrun-name: EXAMPLE_WORKFLOW_RUN_NAME_HERE\n\non:\n  push:\n    branches:\n        - 'main'\n\njobs:\n  EXAMPLE_JOB_NAME:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: EXAMPLE_STEP_WITH_ACTION\n        id: example_step_id\n        #uses: rwaight/actions/ACTION_CATEGORY/ACTION_DIRECTORY@main # can use version specific or main\n        uses: rwaight/actions/ACTION_CATEGORY/ACTION_DIRECTORY@v1\n\n```\n</code></pre></p>"},{"location":"importing-actions-manual/#update-the-repo-readme","title":"Update the repo README","text":"<p>Once the action has been imported, be sure to keep the repo README updated</p>"},{"location":"sign-automatic-commits-in-github-actions/","title":"Sign automatic commits in github actions","text":"<p>From https://github.com/Nautilus-Cyberneering/pygithub/blob/main/docs/how_to_sign_automatic_commits_in_github_actions.md</p>"},{"location":"sign-automatic-commits-in-github-actions/#sign-automatic-commits-in-github-actions","title":"Sign automatic commits in GitHub Actions","text":"<p>I'm working on a project where we use GitHub Actions intensively. One of the challenges we are facing is how we can sign commits when commits are created automatically from a GitHub Action. There is a lot of information about signing commits manually when the developer is creating the commit:</p> <p>https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits</p> <p>but I have not found enough information about signing commits from bots and GitHub Actions. I have only found a couple of official pages from GitHub explaining how the commit signature works when using bots.</p> <p>On the 15th of August 2019, GitHub published this very short article: Commit signing support for bots and other GitHub Apps</p> <p>The article points to the official documentation about signature verification for bots where you can read:</p> <p>Signature verification for bots</p> <p>Organizations and GitHub Apps that require commit signing can use bots to sign commits. If a commit or tag has a bot signature that is cryptographically verifiable, GitHub marks the commit or tag as verified.</p> <p>Signature verification for bots will only work if the request is verified and authenticated as the GitHub App or bot and contains no custom author information, custom committer information, and no custom signature information, such as Commits API.</p> <p>You can also find a link to the explanation about \"Authenticating as an installation\". The whole documents refers to tokens that you can create for GitHub Apps. You can use those tokens in your GitHub Apps (bots) to access the GitHub API.</p> <p>One of the things you can do with the API is to create a commit. So what they say is if you use a token generated for a bot (GitHub App) and you make a request to the API using that token (without custom author information), the GitHub API will recognize the bot token and will show the commit as verified.</p> <p>So we can try to implement a solution using a token generated for a GitHub App.</p> <ul> <li>Sign automatic commits in GitHub Actions</li> <li>Solution 01: using the temporary GITHUB_TOKEN generated for each workflow job</li> <li>Solution 02: using your own PGP Key as a secret</li> <li>Notes</li> <li>Links</li> </ul>"},{"location":"sign-automatic-commits-in-github-actions/#solution-01-using-the-temporary-github_token-generated-for-each-workflow-job","title":"Solution 01: using the temporary GITHUB_TOKEN generated for each workflow job","text":"<p>What GitHub Apps authorization has to do with GitHub actions in a workflow?</p> <p>As you can read on GitHub docs \"at the start of each workflow run, GitHub automatically creates a unique GITHUB_TOKEN secret to use in your workflow. You can use the GITHUB_TOKEN to authenticate in a workflow run.\". You can use that token to execute git commands and access the GitHub API too.</p> <p>In fact, the token is generated for every job: \"before each job begins, GitHub fetches an installation access token for the job. The token expires when the job is finished.\"</p> <p>The Checkout V2 GitHub Action uses the token and persists it in the local git config. \"This enables your scripts to run authenticated git commands. The token is removed during post-job cleanup\".</p> <p>So basically, you are provided with a kind of GitHub App token that you can use during the workflow execution.</p> <p>You can use that token directly like this:</p> <p>https://github.com/marketplace/actions/checkout#push-a-commit-using-the-built-in-token</p> <pre><code>on: push\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - run: |\n          date &gt; generated.txt\n          git config user.name github-actions\n          git config user.email github-actions@github.com\n          git add .\n          git commit -m \"generated\"\n          git push\n</code></pre> <p>But the problem with that solution is the commit is not going to be signed. The other option is to use the token to make a request to the GitHub API to create the commit. There is an example in this repo using a GitHub API Python wrapper:</p> <p>01_sign_commit_using_github_api.py</p> <p>WARNING: if you run the example locally using your own token the commit is not going to be signed. It only works when you use an app token. You can check the workflow using this example.</p> <p>Drawbacks for this solution:</p> <ul> <li>I have had problems with a 70MB file. The size limit for files in GitHub (without using LFS is 100MB).</li> <li>I have also had some timeouts.</li> <li>You have to deal with network latency, connection errors, etcetera in your workflow.</li> <li>If you make other git changes in your runner you end up changing the branch locally (runner) and remotely (API), and that could lead to a lot of merge conflicts.</li> </ul> <p>The alternative solution could be to use your own PGP Key.</p>"},{"location":"sign-automatic-commits-in-github-actions/#solution-02-using-your-own-pgp-key-as-a-secret","title":"Solution 02: using your own PGP Key as a secret","text":"<p>If you do not want to use the <code>GITHUB_TOKEN</code>, you can use your own GPG key. For this example, I'm not using the <code>GiPython</code> package because it seems it does not support commit signing directly. I use a GitHub Action that imports and sets up a GPG key in your workflow git configuration.</p> <p>example-02.yml</p> <p>First at all, you need a PGP key. I did not want to use my personal PGP key because it's going to be exposed as a repo secret. That means every maintainer (who has access to the workflow) could sign a commit using my PGP Key. I have created a new GitHub account for this example (https://github.com/josecelano-bot), and I gave access to the bot to this repo.</p> <p>Then, you only need to follow the steps on the action documentation:</p> <ol> <li>Export the Bot's PGP secret key:</li> </ol> <pre><code>gpg --armor --export-secret-key bot@josecelano.com -w0\n</code></pre> <ol> <li>Add the secrets to your repo: PGP secret key and passphrase</li> </ol> <p>If you follow the process, your commits will be signed like this:</p> <p></p> <p>The funniest thing about this solution is that you can easily check your bot's activity:</p> <p></p> <p>Does it make sense to use a shared PGP key? All maintainers will have access to the key.</p> <p>There is a different proposal in a GitHub runner issue: https://github.com/actions/runner/issues/667#issuecomment-940441757</p> <p>The actual feature we should propose is to recognize myname+actions@github.com as a non-human account associated with me, and can be verified by my GPG keys. All I need is to store a private key as actions secret and use it for signing the commits.</p> <p>If I understand the proposal, that means all automatic commits will be signed with the PGP key of the developer who triggered the workflow, just telling GitHub your PGP secret key and using a specific email for the commit author <code>josecelano+actions@github.com</code>. In the end, it's almost the same as creating your own bot account, but with two more advantages:</p> <ul> <li>You do not have to pay for an extra seat (depending on the GitHub license you are using).</li> <li>You do not have to share that key with other maintainers.</li> </ul> <p>If you want to use your own bot approach you could create a bot for every repo, and change the PGP key every time a maintainer is removed from the project.</p>"},{"location":"sign-automatic-commits-in-github-actions/#notes","title":"Notes","text":"<p>GiPython does not support commit signing directly:</p> <ul> <li>https://github.com/gitpython-developers/GitPython/issues/580</li> <li>https://github.com/gitpython-developers/GitPython/issues/579</li> </ul>"},{"location":"sign-automatic-commits-in-github-actions/#links","title":"Links","text":"<ul> <li>GitHub runner issue demanding signed commits for GitHub actions</li> <li>Sign bot commit in actions, GitHub Community/</li> <li>How to properly GPG-sign GitHub App (bot) created commits</li> <li>Verified commits made easy with GitHub Actions</li> <li>GitHub Action to easily import a GPG key</li> </ul>"},{"location":"plugins/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"plugins/test1-tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"}]}