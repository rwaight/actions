name: 'Set build type'
description: 'Determine a build type based on predetermined conditions.'
# Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
author: 'rwaight'
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#branding
branding:
  icon: 'info'
  color: 'blue'
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  checkout:
    description: 'If the action should checkout the repo using `actions/checkout`, defaults to false. '
    required: false
    default: 'false'
  event-name:
    description: 'This should be the github.event_name variable. '
    default: ${{ github.event_name }}
    required: false
  gh-token:
    description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT), may be needed for the GitHub CLI. '
    required: false
    default: ${{ github.token }}
  ref:
    description: 'This should be the github.ref variable. '
    default: ${{ github.ref }}
    required: false
  ref-name:
    description: 'This should be the github.ref_type variable. '
    default: ${{ github.ref_name }}
    required: false
  ref-type:
    description: 'This should be the github.ref_type variable. '
    default: ${{ github.ref_type }}
    required: false
  release-tag-name:
    description: 'This should be the github.ref_type variable. '
    default: ${{ github.event.release.tag_name }}
    required: false
  # strategy:
  #   description: >-
  #     This is not used to set the build type. 
  #     The strategy to use when calculating the type, either: `simple`, `wildcard`, `github-event`, `convert`, `test`, or `no-idea`.
  #   required: false
  #   default: 'github-event'
  workflow:
    description: 'This should be the github.workflow variable. '
    default: ${{ github.workflow }}
    required: false
  workflow-summary:
    description: 'Determine if the action should output to the GitHub summary (`$GITHUB_STEP_SUMMARY`), defaults to false. '
    required: false
    default: 'false'
  verbose:
    description: 'Determine if the action should run verbose tasks, defaults to false. '
    required: false
    default: 'false'

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  build-type:
    description: "The determined build type, either: `dev`, `test`, `main`, or `prod`. "
    value: ${{ steps.set-type-output.outputs.BUILD_TYPE }}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:

    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message
      shell: bash
      run: |
        echo "error in the action '${{ github.action }}' at file path: '${{ github.action_path }}' "
        echo "::error file=builders/set-type/action.yml,title=â›” build-type error hint::This action supports Linux only"
        exit 1

    - name: Greet the triggering_actor
      if: inputs.verbose=='true' || ${{ runner.debug == '1' }}
      shell: bash
      run: | 
        echo "Hello ${{ github.triggering_actor }}, the verbose variable is set to true."
        echo ""
        echo "Here is some information about this action: "
        echo "  action name  :  ${{ github.action }} "
        echo "  action path  :  ${{ github.action_path }} "
        echo "  action ref   :  ${{ github.action_ref }} "
        echo "  action repo  :  ${{ github.action_repository }} "
        echo "  action status:  ${{ github.action_status }} "
        echo ""

    - name: Show GitHub runner context
      if: inputs.verbose=='true' || ${{ runner.debug == '1' }}
      # to do:  run this if either the verbose input is true or the runner.debug is true
      id: show-runner-context
      ## The 'runner.*' and 'RUNNER_*' variables are not available in the WORKFLOW env context or the top-level JOB context, but are available in the STEP env context
      shell: bash
      env:
        EVAL_GH_VAR_RUNNER_DEBUG_EQ0: ${{ runner.debug == '0' }}
        EVAL_GH_VAR_RUNNER_DEBUG_EQ1: ${{ runner.debug == '1' }}
        FOOBAR: ${{ runner.debug == '1' && 'foo' || 'bar' }}
        # https://github.com/actions/runner/issues/2204#issuecomment-1287947031
        # https://github.com/orgs/community/discussions/27627#discussioncomment-3302259
        GH_RUNNER_LOG: "${{ runner.debug == '1' && 'INFO' || 'ERROR' }}"
        GH_VAR_RUNNER_DEBUG1: ${{ runner.debug }}
        GH_VAR_RUNNER_DEBUG2: ${{ env.RUNNER_DEBUG }}
        GH_VAR_RUNNER_OS1: ${{ runner.os }}
        GH_VAR_RUNNER_OS2: ${{ env.RUNNER_OS }}
        GH_VAR_RUNNER_ARCH1: ${{ runner.arch }}
        GH_VAR_RUNNER_ARCH2: ${{ env.RUNNER_ARCH }}
      run: |
        echo "::group::starting the 'show-runner-context' step... "
        echo ""
        echo "NOTE: The 'runner.*' and 'RUNNER_*' variables are not available in the WORKFLOW env context or the top-level JOB context, but are available in the STEP env context "
        echo ""
        echo "eval if the 'runner.debug' is set to either '0' or '1' "
        echo "     runner.debug equal 0:  ${EVAL_GH_VAR_RUNNER_DEBUG_EQ0} "
        echo "     runner.debug equal 1:  ${EVAL_GH_VAR_RUNNER_DEBUG_EQ1} "
        echo ""
        echo "set FOOBAR to 'foo' if 'runner.debug' is '1'; otherwise set FOOBAR to 'bar' "
        echo "    FOOBAR:  ${FOOBAR} "
        echo ""
        echo "set GH_RUNNER_LOG to 'INFO' if 'runner.debug' is '1'; otherwise set GH_RUNNER_LOG to 'ERROR' "
        echo "    GH_RUNNER_LOG:  ${GH_RUNNER_LOG} "
        echo ""
        echo "the values of 'runner.debug' and 'env.RUNNER_DEBUG': "
        echo "    GH_VAR_RUNNER_DEBUG1:  ${GH_VAR_RUNNER_DEBUG1} "
        echo "    GH_VAR_RUNNER_DEBUG2:  ${GH_VAR_RUNNER_DEBUG2} "
        echo ""
        echo "the values of 'runner.os' and 'env.RUNNER_OS': "
        echo "    GH_VAR_RUNNER_OS1:  ${GH_VAR_RUNNER_OS1} "
        echo "    GH_VAR_RUNNER_OS2:  ${GH_VAR_RUNNER_OS2} "
        echo ""
        echo "the values of 'runner.arch' and 'env.RUNNER_ARCH': "
        echo "    GH_VAR_RUNNER_ARCH1:  ${GH_VAR_RUNNER_ARCH1} "
        echo "    GH_VAR_RUNNER_ARCH2:  ${GH_VAR_RUNNER_ARCH2} "
        echo ""
        echo "finishing the 'show-runner-context' step... "
        ##
        echo "::endgroup::"
      ## The 'runner.*' and 'RUNNER_*' variables are not available in the WORKFLOW env context or the top-level JOB context, but are available in the STEP env context

    - name: Verbose | Print the inputs
      if: inputs.verbose=='true' || ${{ runner.debug == '1' }}
      id: verbose-print-inputs
      shell: bash
      run: | 
        echo "::group::starting the 'verbose-print-inputs' step... "
        ## Print the inputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo ""
        echo "Here are the inputs provided to the action: "
        echo "    gh-token SHOULD BE MASKED, but is set to ${{ inputs.gh-token }} "
        echo "    checkout        :  ${{ inputs.checkout }} "
        echo "    event-name      :  ${{ inputs.event-name }} "
        echo "    ref             :  ${{ inputs.ref }} "
        echo "    ref-name        :  ${{ inputs.ref-name }} "
        echo "    ref-type        :  ${{ inputs.ref-type }} "
        echo "    release-tag-name:  ${{ inputs.release-tag-name }} "
        echo "    strategy        :  ${{ inputs.strategy }} "
        echo "    workflow        :  ${{ inputs.workflow }} "
        echo "    workflow-summary:  ${{ inputs.workflow-summary }} "
        echo "    verbose         :  ${{ inputs.verbose }} "
        echo ""
        echo "finishing the 'verbose-print-inputs' step... "
        ##
        echo "::endgroup::"

    - name: Verbose | Print GitHub Context
      if: inputs.verbose=='true' || ${{ runner.debug == '1' }}
      id: verbose-github-context
      shell: bash
      run: | 
        echo "::group::starting the 'verbose-github-context' step... "
        ## Print the inputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo ""
        echo "GitHub context values: "
        echo "    event_name:  ${{ github.event_name }} "
        echo "    ref       :  ${{ github.ref }} "
        echo "    ref_name  :  ${{ github.ref_name }} "
        echo "    ref_type  :  ${{ github.ref_type }} "
        echo "    workflow  :  ${{ github.workflow }} "
        echo ""
        echo "GitHub event context values: "
        echo "    event.release.tag_name         :  ${{ github.event.release.tag_name }} "
        echo "    event.repository.default_branch:  ${{ github.event.repository.default_branch }} "
        echo ""
        echo "GitHub release event context values: "
        echo "    created_at:  ${{ github.event.release.created_at }} "
        echo "    draft     :  ${{ github.event.release.draft }} "
        echo "    id        :  ${{ github.event.release.id }} "
        echo "    name      :  ${{ github.event.release.name }} "
        echo "    tag_name  :  ${{ github.event.release.tag_name }} "
        echo "    prerelease:  ${{ github.event.release.prerelease }} "
        echo "    url       :  ${{ github.event.release.url }} "
        echo ""
        echo "finishing the 'verbose-github-context' step... "
        ##
        echo "::endgroup::"

    - name: Checkout files from commit tree
      # Verified creator: https://github.com/marketplace/actions/checkout
      # GitHub Action for checking out a repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      id: checkout-without-token
      if: inputs.checkout=='true'
      continue-on-error: true
      with:
        fetch-depth: 0

    - name: Checkout files from commit tree with the token
      # Verified creator: https://github.com/marketplace/actions/checkout
      # GitHub Action for checking out a repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      id: checkout-with-token
      if: steps.checkout-without-token.outcome == 'failure'
      with:
        fetch-depth: 0
        token: ${{ inputs.gh-token }}

    - name: Extra | The ref_type is 'tag'
      id: extra-ref-type-tag
      if: github.ref_type == 'tag'
      shell: bash
      run: |
        echo "::group::starting the 'extra-ref-type-tag' step... "
        echo "The ref_type is 'tag' "
        ##echo ""
        echo "    ref     :  ${{ github.ref }} "
        echo "    ref_name:  ${{ github.ref_name }} "
        echo "    ref_type:  ${{ github.ref_type }} "
        echo ""
        echo "The release information is: "
        echo "    release.tag_name:  ${{ github.event.release.tag_name }}"
        echo ""
        echo "finishing the 'extra-ref-type-tag' step... "
        ##
        echo "::endgroup::"

    - name: Extra | The tag starts with the proper version numbering syntax
      id: extra-tag-with-version-syntax
      if: github.ref_type == 'tag' && startsWith('refs/tags/v[0-9].[0-9].[0-9]', github.ref)
      # the filter pattern will need to be updated to allow double digits, using either: 
      #    specify 2 digits with a second range followed by `?`:
      #        'v[0-9][0-9]?.[0-9][0-9]?.[0-9][0-9]?'     
      #    or keep the single digit, but match one or more with `+`:
      #        'v[0-9]+.[0-9]+.[0-9]+'
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      shell: bash
      run: |
        echo "::group::starting the 'extra-tag-with-version-syntax' step... "
        echo "The ref_type is 'tag' and the tag starts with the proper version numbering syntax "
        ##echo ""
        echo "    ref     :  ${{ github.ref }} "
        echo "    ref_name:  ${{ github.ref_name }} "
        echo "    ref_type:  ${{ github.ref_type }} "
        echo ""
        echo "The release information is: "
        echo "    release.tag_name:  ${{ github.event.release.tag_name }}"
        echo ""
        echo "finishing the 'extra-tag-with-version-syntax' step... "
        ##
        echo "::endgroup::"

    - name: Set environmental variables used to evaluate the build type
      id: set-eval-type-env-vars
      # Ensure that the needed environmental variables are set
      #   - 'EVAL_BUILD_TYPE' is set to 'false'
      #   - 'GH_DEFAULT_BRANCH' is set to '${{ github.event.repository.default_branch }}'
      if: ${{ always() }}
      shell: bash
      run: |
        echo "::group::starting the 'set-eval-type-env-vars' step... "
        echo ""
        echo "Setting EVAL_BUILD_TYPE to false..."
        echo "EVAL_BUILD_TYPE=false" >> $GITHUB_ENV
        echo "Setting GH_DEFAULT_BRANCH to '${{ github.event.repository.default_branch }}'..."
        echo "GH_DEFAULT_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
        echo ""
        echo "finishing the 'set-eval-type-env-vars' step... "
        echo "::endgroup::"

    - name: get-tag-version
      id: get-tag-version
      if: (github.ref_type == 'tag')
      shell: bash
      run: |
        echo "::group::starting step 'get-tag-version' "
        VERSION="${{ github.event.release.tag_name || github.ref_name }}"
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.VERBOSE }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE "
            fi
        else
            echo "::error file=builders/set-type/action.yml,title=â›” set-type error hint::Version '$VERSION' is not in a valid format, see the 'get-tag-version' step output."
            exit 1
        fi
        ##
        if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
        ##
        ##echo "full-version-tag=$VERSION" >> $GITHUB_OUTPUT
        ##echo "full-version-ref=v$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
        echo "full-version-ref=$VERSION" >> $GITHUB_OUTPUT
        echo "major-ref=v$MAJOR" >> $GITHUB_OUTPUT
        echo "minor-ref=v$MINOR" >> $GITHUB_OUTPUT
        echo "patch-ref=v$PATCH" >> $GITHUB_OUTPUT
        echo "is-prerelease=$pre" >> $GITHUB_OUTPUT
        echo ""
        echo "completing the 'get-tag-version' step. "
        echo "::endgroup::"

    - name: get-tag-version | Print outputs
      id: check-get-tag-version
      #if: (github.ref_type == 'tag')
      if: ${{ steps.get-tag-version.outputs.full-version-ref }}
      shell: bash
      run: |
        echo "::group::starting step 'check-get-tag-version' "
        echo "## get-tag-version outputs"
        echo "Full version: ${{ env.FULL_VERSION_REF }} "
        echo "Major ref   : ${{ env.MAJOR_REF }} "
        echo "Minor ref   : ${{ env.MINOR_REF }} "
        echo "Patch ref   : ${{ env.PATCH_REF }} "
        echo "Prerelease  : ${{ env.IS_PRERELEASE }}"
        echo ""
        echo "completing the 'check-get-tag-version' step. "
        echo "::endgroup::"
      env:
        #FULL_VERSION_TAG: ${{ steps.get-tag-version.outputs.full-version-tag }}
        FULL_VERSION_REF: ${{ steps.get-tag-version.outputs.full-version-ref }}
        MAJOR_REF: ${{ steps.get-tag-version.outputs.major-ref }}
        MINOR_REF: ${{ steps.get-tag-version.outputs.minor-ref }}
        PATCH_REF: ${{ steps.get-tag-version.outputs.patch-ref }}
        IS_PRERELEASE: ${{ steps.get-tag-version.outputs.is-prerelease }}

    - name: BUILD_TYPE | Check for a full version tag, set the build type to prod
      #name: BUILD_TYPE | Check for 'v*.*.*' tags, set the build type to prod
      # This step is run when the branch is a 'v*.*.*' tag
      id: set-build-type-prod-full-version-tag
      #if: (github.ref == 'refs/heads/v*.*.*' || github.ref_name == 'v*.*.*')
      #using 'v*.*.*' does not work# #if: ${{ contains('refs/tags/v*.*.*', github.ref) }} && (github.ref_type == 'tag')
      #using 'v*.*.*' does not work# #if: ${{ contains('refs/tags/v*.*.*', github.ref) }}
      #if: {{ github.ref == 'ref/head/v*' }}
      #using 'v*.*.*' does not work# #was#if: ${{ contains('refs/tags/v*.*.*', github.ref) && (github.ref_type == 'tag') && (github.event_name=='push') }}
      #using 'v*.*.*' does not work# #if: (contains('refs/tags/v*.*.*', github.ref) && github.ref_type == 'tag' && github.event_name=='push')
      if: ${{ steps.get-tag-version.outputs.full-version-ref }}
      shell: bash
      run: |
        echo "step id: 'set-build-type-prod-full-version-tag' "
        echo "result of new conditional:  ${{ steps.get-tag-version.outputs.full-version-ref }} "
        echo "result of old conditional:  ${{ contains('refs/tags/v[0-9].[0-9].[0-9]', github.ref) && (github.ref_type == 'tag') && (github.event_name=='push') }} "
        echo ""
        echo "Event name:  ${{ github.event_name }} "
        echo "Ref       :  ${{ github.ref }}"
        echo "Ref name  :  ${{ github.ref_name }} "
        echo "Ref type  :  ${{ github.ref_type }} "
        echo ""
        echo "release tag_name: ${{ github.event.release.tag_name }}"
        echo ""
        echo "Check for tags, setting BUILD_TYPE to 'prod' ... "
        echo ""
        echo "## get-tag-version outputs"
        echo "Full version: ${{ env.FULL_VERSION_REF }} "
        echo ""
        if [[ '${{ github.event_name }}' == 'push' ]]; then
            echo "the 'github.event_name' is 'push', going to set the build type to 'prod' "
            ##
            echo "BUILD_TYPE=prod" >> $GITHUB_ENV
            echo "Setting EVAL_BUILD_TYPE to true ... "
            echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        elif [[ '${{ github.event_name }}' != 'push' ]]; then
            echo "the 'github.event_name' is NOT 'push', going to set the build type to 'prod' "
            ##
            echo "BUILD_TYPE=prod" >> $GITHUB_ENV
            echo "Setting EVAL_BUILD_TYPE to true ... "
            echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        else
            echo "something strange is happening, not changing anything... "
        fi
        echo ""
      env:
        FULL_VERSION_REF: ${{ steps.get-tag-version.outputs.full-version-ref }}

    - name: BUILD_TYPE | Check for 'v*.*.*' tags (fallback), set the build type to prod
      # This step is run when the branch is a 'v*.*.*' tag
      id: set-build-type-prod-fallback
      #if: (github.ref == 'refs/heads/v*.*.*' || github.ref_name == 'v*.*.*')
      #using 'v*.*.*' does not work#if: ${{ contains('refs/tags/v*.*.*', github.ref) }} && (github.ref_type == 'tag')
      #using 'v*.*.*' does not work#if: ${{ contains('refs/tags/v*.*.*', github.ref) }}
      #if: {{ github.ref == 'ref/head/v*' }}
      #using 'v*.*.*' does not work#if: (contains('refs/tags/v*.*.*', github.ref) && github.ref_type == 'tag' && env.EVAL_BUILD_TYPE=='false')
      if: (github.ref_type == 'tag' && env.EVAL_BUILD_TYPE=='false')
      #try this next#if: (startsWith('refs/tags/v[0-9].[0-9].[0-9]', github.ref) && github.ref_type == 'tag')
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      shell: bash
      run: |
        echo "step id: 'set-build-type-prod-fallback' "
        echo "results of old conditional:  ${{ contains('refs/tags/v[0-9].[0-9].[0-9]', github.ref) && (github.ref_type == 'tag') && (env.EVAL_BUILD_TYPE=='false') }} "
        echo "results of new conditional:  ${{ (github.ref_type == 'tag' && env.EVAL_BUILD_TYPE=='false') }}"
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Ref type   :  ${{ github.ref_type }} "
        echo "Event name :  ${{ github.event_name }} "
        echo ""
        echo "Check for tags, setting BUILD_TYPE to 'prod'..."
        echo "BUILD_TYPE=prod" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Check for main branch (contains), set the build type to main
      id: set-eval-type-main-contains
      # This step is run when the branch is main
      #if: ${{ contains(github.ref_name, 'main') && (env.EVAL_BUILD_TYPE=='false') }}
      # does not work# if: |
      # does not work#   ${{ contains(github.ref, 'main') && (env.EVAL_BUILD_TYPE=='false') }} ||
      # does not work#   ${{ contains(github.ref_name, 'main') && (env.EVAL_BUILD_TYPE=='false') }}
      if: (contains(github.ref_name, 'main') && env.EVAL_BUILD_TYPE=='false')
      # try this next#if: ${{ startsWith(github.ref_name, 'main') && (env.EVAL_BUILD_TYPE=='false') }}
      # try this next#if: ${{ contains(github.ref_name, 'main*') && (env.EVAL_BUILD_TYPE=='false') }}
      shell: bash
      run: |
        echo "step id: 'set-eval-type-main-contains' "
        echo "results of old conditional: ${{ contains(github.ref_name, 'main') }} "
        echo "results of new conditional: ${{ (contains(github.ref_name, 'main') && env.EVAL_BUILD_TYPE=='false') }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        if [[ '${{ env.EVAL_BUILD_TYPE }}' == 'false' ]]; then
            echo "EVAL_BUILD_TYPE is set to false ... "
        elif [[ '${{ env.EVAL_BUILD_TYPE }}' == 'true' ]]; then
            echo "EVAL_BUILD_TYPE is set to true ... "
        else
            echo "EVAL_BUILD_TYPE is set to something else ... "
        fi
        echo "Check for main branch, setting BUILD_TYPE to 'main'..."
        echo "BUILD_TYPE=main" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Check for main branch (startsWith), set the build type to main
      id: set-eval-type-main-startswith
      # This step is run when the branch is main-2.x
      #if: (github.ref == 'refs/heads/main-2.x' || github.ref_name == 'main-2.x')
      # does not work# if: |
      # does not work#   ${{ contains(github.ref, 'main-2.x') && (env.EVAL_BUILD_TYPE=='false') }} ||
      # does not work#   ${{ contains(github.ref_name, 'main-2.x') && (env.EVAL_BUILD_TYPE=='false') }}
      # does not work# if: ${{ startsWith(github.ref_name, 'main') }} && ${{ env.EVAL_BUILD_TYPE=='false'}}
      if: (startsWith(github.ref_name, 'main') && env.EVAL_BUILD_TYPE=='false')
      shell: bash
      run: |
        echo "step id: 'set-eval-type-main-startswith' "
        echo "results of conditional: ${{ (startsWith(github.ref_name, 'main') && env.EVAL_BUILD_TYPE=='false') }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Check for a branch starting with 'main', setting BUILD_TYPE to 'main'..."
        echo "BUILD_TYPE=main" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Check for 'main-*' branch (contains), set the build type to main
      id: set-eval-type-contains-main-dash
      # This step is run when the branch is 'main-*'
      #if: ${{ contains('refs/heads/main-*', github.ref) }}
      #was#if: ${{ contains('refs/heads/main-*', github.ref) && (env.EVAL_BUILD_TYPE=='false') }}
      if: (contains('main-*', github.ref_name) && env.EVAL_BUILD_TYPE=='false')
      #try next# if: contains('refs/heads/main-*', github.ref) && (env.EVAL_BUILD_TYPE=='false')
      shell: bash
      run: |
        echo "step id: 'set-eval-type-contains-main-dash' "
        echo "results of conditional:  ${{ (contains('refs/heads/main-*', github.ref) && env.EVAL_BUILD_TYPE=='false') }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Check for 'main-*' branch, setting BUILD_TYPE to 'main'..."
        echo "BUILD_TYPE=main" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Check for dev branch (startsWith), set the build type to dev
      id: set-eval-type-dev-startswith
      # This step is run when the branch is dev
      #if: (github.ref == 'refs/heads/dev' || github.ref_name == 'dev')
      #was#if: ${{ startsWith(github.ref_name, 'dev') && (env.EVAL_BUILD_TYPE=='false') }}
      if: (startsWith(github.ref_name, 'dev') && env.EVAL_BUILD_TYPE=='false')
      #if: env.EVAL_BUILD_TYPE=='false'
      shell: bash
      run: |
        echo "step id: 'set-eval-type-dev-startswith' "
        echo "results of conditional:  ${{ (startsWith(github.ref_name, 'dev') && env.EVAL_BUILD_TYPE=='false') }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Check for dev branch, setting BUILD_TYPE to 'dev'..."
        echo "BUILD_TYPE=dev" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Check for 'dev' branch (contains), set the build type to dev
      id: set-eval-type-dev-contains
      # This step is run when the branch is dev
      #was#if: ${{ contains(github.ref_name, 'dev') && (env.EVAL_BUILD_TYPE=='false') }}
      if: (contains(github.ref_name, 'dev') && env.EVAL_BUILD_TYPE=='false')
      #if: env.EVAL_BUILD_TYPE=='false'
      shell: bash
      run: |
        echo "step id: 'set-eval-type-dev-contains' "
        echo "results of conditional:  ${{ (contains(github.ref_name, 'dev') && env.EVAL_BUILD_TYPE=='false') }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Check for 'dev' branch, setting BUILD_TYPE to 'dev'..."
        echo "BUILD_TYPE=dev" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Check for test branch (startsWith), set the build type to test
      id: set-eval-type-test-startswith
      # This step is run when the branch is test
      #was#if: ${{ startsWith(github.ref_name, 'test') && (env.EVAL_BUILD_TYPE=='false') }}
      if: (startsWith(github.ref_name, 'test') && env.EVAL_BUILD_TYPE=='false')
      #if: env.EVAL_BUILD_TYPE=='false'
      shell: bash
      run: |
        echo "step id: 'set-eval-type-test-startswith' "
        echo "results of conditional:  ${{ (startsWith(github.ref_name, 'test') && env.EVAL_BUILD_TYPE=='false') }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Setting BUILD_TYPE to 'test'..."
        echo "BUILD_TYPE=test" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Check for 'test' branch (contains), set the build type to test
      id: set-eval-type-test-contains
      # This step is run when the branch is test
      #was#if: ${{ contains(github.ref_name, 'test') && (env.EVAL_BUILD_TYPE=='false') }}
      if: (contains(github.ref_name, 'test') && env.EVAL_BUILD_TYPE=='false')
      #if: env.EVAL_BUILD_TYPE=='false'
      shell: bash
      run: |
        echo "step id: 'set-eval-type-test-contains' "
        echo "results of conditional:  ${{ (contains(github.ref_name, 'test') && env.EVAL_BUILD_TYPE=='false') }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Setting BUILD_TYPE to 'test'..."
        echo "BUILD_TYPE=test" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""

    - name: BUILD_TYPE | Fallback value - Set the build type to dev
      id: set-eval-type-fallback
      # This step is run when the branch is NOT main or dev
      #if: github.ref != 'refs/heads/main'
      # If this runs, then that means the previous steps were skipped
      if: env.EVAL_BUILD_TYPE=='false'
      shell: bash
      run: |
        echo "step id: 'set-eval-type-fallback' "
        echo "results of conditional:  ${{ env.EVAL_BUILD_TYPE=='false' }} "
        echo ""
        echo "Branch info:  ${{ github.ref_name }} "
        echo "Setting BUILD_TYPE to 'dev'..."
        echo "BUILD_TYPE=dev" >> $GITHUB_ENV
        echo "Setting EVAL_BUILD_TYPE to true..."
        echo "EVAL_BUILD_TYPE=true" >> $GITHUB_ENV
        echo ""
        echo "**NOTE**: BUILD_TYPE was set to the fallback value." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line

    - name: Error if the build type was not set
      id: set-eval-type-error
      if: ${{ env.BUILD_TYPE == '' }}
      shell: bash
      run: |
        echo "The build type was not set correctly. "
        echo "This workflow will now fail and exit. "
        echo "::error title=â›” error in the '${{ github.workflow }}' workflow hint::Build type not set correctly "
        exit 1
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message

    # Output the build type
    - name: Output the build type
      id: set-type-output
      shell: bash
      run: |
        echo "::group::starting the 'set-type-output' step ... "
        echo "The BUILD_TYPE has been set to '${{ env.BUILD_TYPE }}' ... "
        echo "BUILD_TYPE=${{ env.BUILD_TYPE }}" >> "$GITHUB_OUTPUT"
        echo ""
        echo "finishing the 'set-type-output' step ... "
        echo "::endgroup::"
