name: Reuse - Autorelease 06 Build Prod
# this is workflow 06 in the autorelease process, it should be called by a workflow named 'Autorelease Step 3 - Build Prod' (from the caller repo)
# this workflow SHOULD ONLY BE CALLED BY REPOS WITH BUILD REQUIREMENTS
#   * this workflow calls the 'reuse-autorelease-05-validate-tag' workflow first, before starting the build process
#   * the 'on' event criteria should be: on: push: tags: ['v*.*.*']
# ```
# on:
#   push:
#     tags:
#       - 'v*.*.*'
# ```
# autorelease notes:  https://github.com/rwaight/actions/blob/main/docs/autorelease-process-notes.md
#run-name: build-prod
run-name: build-prod
# This workflow was created so that other GitHub repos can call this reusable workflow and improve our build consistency
# NOTE: Because of how re-usable workflows handle inputs, all of the booleans must be treated as strings

on:
  # 'workflow_call' will allow other GitHub workflows to call this workflow
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows#creating-a-reusable-workflow
  # if we need to define inputs, then we need to review the docs in the link below
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-of-onworkflow_callinputs
  workflow_call:
    # Inputs and secrets: # https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow
    inputs:    # All of the 'inputs' below are passed from the caller workflow.
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
      # new variable for 'reuse-autorelease-06-build-prod'
      DRY_RUN:
        description: 'Perform a "dry run" or not.'
        required: false
        #default: false
        #type: boolean
        # set the input as a 'string' as a workaround for boolean inputs, until GitHub figures its life out
        # see https://github.com/actions/runner/issues/1483
        # if this is set to boolean, then the actual value will be 'null'
        # Need to keep this as a string, but then below use 'fromJSON' to cast this as a boolean
        # see https://github.com/actions/runner/issues/1483#issuecomment-1031671517
        # example to cast this as a boolean: ${{ fromJSON(inputs.WORKFLOW_SUMMARY) }}
        type: string
        default: 'false'
      # new variable for 'reuse-autorelease-06-build-prod'
      GH_APP_BOT_NAME:
        description: 'The name of the GitHub App. '
        #default: 'github-actions[bot]'
        default: 'rw-actions-bot[bot]'
        required: false
        type: string
      # new variable for 'reuse-autorelease-06-build-prod'
      JSON_VARS_FILE:
        description: >-
          The name and path of the variables file, this should be in json format.
          Example: `./my-custom-variables.json`
        default: 'not-set'
        required: true
        type: string
      # new variable for 'reuse-autorelease-06-build-prod'
      JSON_VARS_IMAGE_FIELD:
        description: 'The image ID field that should be checked within the JSON variables file. '
        default: 'reviewed_image_id'
        required: false
        type: string
      # new variable for 'reuse-autorelease-06-build-prod'
      JSON_VARS_TYPE_FIELD:
        description: 'The type field that should be checked within the JSON variables file. '
        default: 'release_type'
        required: false
        type: string
      # new variable for 'reuse-autorelease-06-build-prod'
      JSON_VARS_VERSION_FIELD:
        description: 'The version field that should be checked within the JSON variables file. '
        default: 'my_custom_version'
        required: false
        type: string
      # new variable for 'reuse-autorelease-06-build-prod'
      NOTIFY_SLACK:
        description: 'Determine if a Slack message should be sent, defaults to sending a message (true)'
        required: false
        #default: false
        #type: boolean
        # set the input as a 'string' as a workaround for boolean inputs, until GitHub figures its life out
        # see https://github.com/actions/runner/issues/1483
        # if this is set to boolean, then the actual value will be 'null'
        # Need to keep this as a string, but then below use 'fromJSON' to cast this as a boolean
        # see https://github.com/actions/runner/issues/1483#issuecomment-1031671517
        # example to cast this as a boolean: ${{ fromJSON(inputs.NOTIFY_SLACK) }}
        type: string
        default: 'true'
      # new variable for 'reuse-autorelease-06-build-prod'
      PACKER_TEMPLATE_CONVERT:
        description: >-
          The name and path of the production template file that will be sent to Packer. 
          Example: `packer/packer-convert.pkr.hcl`
        default: 'not-set'
        required: true
        type: string
      # new variable for 'reuse-autorelease-06-build-prod'
      RELEASE_TEMPLATE_FILE:
        description: >-
          The name of the release drafter template (config) `.yml` file that is stored
          in the `.github` directory. Only provide the file name, do not provide the path.
          Example: release-template_repo-name.yml
        default: 'release-drafter.yml'
        required: true
        type: string
      # new variable for 'reuse-autorelease-06-build-prod'
      WORKFLOW_SUMMARY:
        description: 'Determine if the workflow should output to the summary page, a boolean that defaults to false'
        required: false
        #default: false
        #type: boolean
        # set the input as a 'string' as a workaround for boolean inputs, until GitHub figures its life out
        # see https://github.com/actions/runner/issues/1483
        # if this is set to boolean, then the actual value will be 'null'
        # Need to keep this as a string, but then below use 'fromJSON' to cast this as a boolean
        # see https://github.com/actions/runner/issues/1483#issuecomment-1031671517
        # example to cast this as a boolean: ${{ fromJSON(inputs.WORKFLOW_SUMMARY) }}
        type: string
        default: 'true'
      # new variable for 'reuse-autorelease-06-build-prod'
      VERBOSE:
        description: 'Determine if the workflow should run debug tasks, a boolean that defaults to false'
        required: false
        #default: false
        #type: boolean
        # set the input as a 'string' as a workaround for boolean inputs, until GitHub figures its life out
        # see https://github.com/actions/runner/issues/1483
        # if this is set to boolean, then the actual value will be 'null'
        # Need to keep this as a string, but then below use 'fromJSON' to cast this as a boolean
        # see https://github.com/actions/runner/issues/1483#issuecomment-1031671517
        # example to cast this as a boolean: ${{ fromJSON(inputs.VERBOSE) }}
        type: string
        default: 'false'

    secrets:   # All of the 'secrets' below are passed from the caller workflow.
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callsecrets
      # new secret for 'reuse-autorelease-06-build-prod'
      ACTIONS_TOKEN:
        description: 'A token used within the builder actions.'
        required: false
      # new secret for 'reuse-autorelease-06-build-prod'
      AWS_ACCESS_KEY:
        description: 'The AWS Access Key ID for the builder.'
        required: true
      # new secret for 'reuse-autorelease-06-build-prod'
      AWS_SECRET_KEY:
        description: 'The AWS Access Key Secret for the builder.'
        required: true
      # new secret for 'reuse-autorelease-06-build-prod'
      GH_APP_BOT_UID:
        description: >-
          'The UID of the GitHub App, not to be confused with GitHub App ID. 
          Can be found using the approach from: https://github.com/orgs/community/discussions/24664#discussioncomment-3880274 '
        required: false
      # new secret for 'reuse-autorelease-06-build-prod'
      GH_APP_ID:
        description: 'The GitHub App ID'
        required: false
      # new secret for 'reuse-autorelease-06-build-prod'
      GH_APP_KEY:
        description: 'The private key of the GitHub App'
        required: false
      # new secret for 'reuse-autorelease-06-build-prod'
      SLACK_WEBHOOK:
        description: 'A token used with the slackapi/slack-github-action.'
        required: false
      # new secret for 'reuse-autorelease-06-build-prod'
      SSH_KEY_FILE:
        description: 'The SSH private key that is used to connect to AWS'
        required: false

jobs:

# this should get called by the 'autorelease-03-build-prod' workflow (in the caller repo)

# Autorelease Process
## Autorelease Reusable Workflows
### Step 3
#### 05. validate-tag  (called by this workflow)
#
#### 06. build-prod (this workflow)
# steps
#   1. validate the reviewed image ID from the JSON_VARS_FILE;       (check-image-id)           (validate-image-id)       (update to call the new reusable workflow..)
#   2. validate the versions match (between autorelease and the file);          (validate-version)        (use the same job from the '02 pr-merged' workflow)    ## NOT DONE
#   3. call the builder using the 'convert-to-prod' build method;               (call-build-prod)
#   4. print the build results        
#   5. gather the AMI info and upload the artifact
#### 07. prepare-final-draft
#   1. update the draft release with the new AMI ID (probably use `sed` or something)
#   2. upload the AMI artifact file to the draft release
#   3. print output that the new image has been built and the release draft is ready for review
#   4. done?

  validate-tag:
    #name: Call the reuse-autorelease-05-validate-tag workflow
    #uses: rwaight/actions/.github/workflows/reuse-autorelease-05-validate-tag.yml@v2 # use the hash instead of the version number
    uses: rwaight/actions/.github/workflows/reuse-autorelease-05-validate-tag.yml@main
    if: (github.repository_owner == 'rwaight')
    with: 
      # not an input#DRY_RUN: ${{ inputs.DRY_RUN }}
      JSON_VARS_FILE: ${{ inputs.JSON_VARS_FILE }}
      JSON_VARS_IMAGE_FIELD: ${{ inputs.JSON_VARS_IMAGE_FIELD }}
      JSON_VARS_TYPE_FIELD: ${{ inputs.JSON_VARS_TYPE_FIELD }}
      JSON_VARS_VERSION_FIELD: ${{ inputs.JSON_VARS_VERSION_FIELD }}
      VERBOSE: ${{ inputs.VERBOSE }}
    secrets:
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_KEY: ${{ secrets.GH_APP_KEY }}


### this 'reuse-next-version' job was in the initial draft, but probably not needed
  # reuse-next-version:
  #   #name: Get next version for ${{ inputs.RELEASE_TYPE }} release
  #   name: get-next-version
  #   runs-on: ubuntu-latest
  #   outputs:
  #     job-status: ${{ job.status }}
  #     # output from the 'repo-version-info' step
  #     latest-release: ${{ steps.repo-version-info.outputs.latest-release }}
  #     latest-tag: ${{ steps.repo-version-info.outputs.latest-tag }}
  #     # output from the 'get-next-semver' step
  #     current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
  #     current-version: ${{ steps.get-next-semver.outputs.current-version }}
  #     next-tag: ${{ steps.get-next-semver.outputs.next-tag }}
  #     next-version: ${{ steps.get-next-semver.outputs.next-version }}
  #     is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}
  #   env:
  #     VERBOSE: ${{ inputs.VERBOSE || 'true' }}
  #   steps:
  #     # https://github.com/actions/create-github-app-token
  #     - name: Create a GitHub App Token
  #       # Verified creator: https://github.com/marketplace/actions/create-github-app-token
  #       # GitHub Action for creating a GitHub App installation access token.
  #       uses: actions/create-github-app-token@a0de6af83968303c8c955486bf9739a57d23c7f1 # v1.10.0
  #       id: app-token
  #       with:
  #         # required
  #         app-id: ${{ secrets.GH_APP_ID }}
  #         private-key: ${{ secrets.GH_APP_KEY }}

  #     - name: Checkout files from commit tree
  #       # Verified creator: https://github.com/marketplace/actions/checkout
  #       # GitHub Action for checking out a repo
  #       uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
  #       with:
  #         fetch-depth: '0'
  #         #ref: ${{ github.head_ref }}
  #         token: ${{ steps.app-token.outputs.token }}

  #     - name: repo-version-info | Run rwaight/actions git/repo-version-info
  #       id: repo-version-info
  #       uses: rwaight/actions/git/repo-version-info@main
  #       with:
  #         #gh-token: ${{ secrets.GITHUB_TOKEN }}
  #         gh-token: ${{ steps.app-token.outputs.token }}

  #     - name: repo-version-info | Print outputs
  #       id: print-repo-info
  #       if: |
  #         ${{ steps.repo-version-info.outputs.latest-tag }} || 
  #         ${{ steps.repo-version-info.outputs.latest-release }}
  #       run: |
  #         ## Print repo version information
  #         echo "Here is the info from the repo-version-info step: "
  #         echo "- latest release: ${{ steps.repo-version-info.outputs.latest-release }}"
  #         echo "- latest tag: ${{ steps.repo-version-info.outputs.latest-tag }}"
  #         ##
  #         echo "### Output from the \`repo-version-info\` step" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
  #         echo "- latest release: ${{ steps.repo-version-info.outputs.latest-release }}" >> $GITHUB_STEP_SUMMARY
  #         echo "- latest tag: ${{ steps.repo-version-info.outputs.latest-tag }}" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line

  #     - name: get-next-semver | Run rwaight/actions test/get-next-semver
  #       id: get-next-semver
  #       #continue-on-error: true
  #       uses: rwaight/actions/test/get-next-semver@main
  #       with:
  #         gh-token: ${{ steps.app-token.outputs.token }}
  #         pre-release-id: ${{ inputs.RELEASE_PRE_ID }}
  #         release-type: ${{ inputs.RELEASE_TYPE }}
  #         verbose: true

  #     - name: get-next-semver | Print outputs
  #       if: ${{ steps.get-next-semver.outputs.next-version }}
  #       run: |
  #         ## Report the output from the get-next-semver step
  #         echo "The output from the 'get-next-semver' step was: "
  #         echo "- current tag       : ${{ env.current-tag }} "
  #         echo "- current version   : ${{ env.current-version }} "
  #         echo "- next tag          : ${{ env.next-tag }} "
  #         echo "- next version      : ${{ env.next-version }} "
  #         echo "- is next prerelease: ${{ env.is-next-prerelease }} "
  #         ##
  #         echo "### Output from the \`get-next-semver\` step" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
  #         echo "- current tag       : ${{ env.current-tag }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- current version   : ${{ env.current-version }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- next tag          : ${{ env.next-tag }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- next version      : ${{ env.next-version }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- is next prerelease: ${{ env.is-next-prerelease }} " >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
  #       env:
  #         current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
  #         current-version: ${{ steps.get-next-semver.outputs.current-version }}
  #         next-tag: ${{ steps.get-next-semver.outputs.next-tag }}
  #         next-version: ${{ steps.get-next-semver.outputs.next-version }}
  #         is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}

  #     - name: Set up git config
  #       id: set-up-git
  #       # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
  #       # user: 'my-bot-name <noreply@github.com>'
  #       run: |
  #         ## Run 'git --version' then 'git config'
  #         git --version
  #         ## Configure git to login as the ${{ inputs.GH_APP_BOT_NAME }}
  #         git config user.name ${{ inputs.GH_APP_BOT_NAME }}
  #         git config user.email ${{ secrets.GH_APP_BOT_UID }}+${{ inputs.GH_APP_BOT_NAME }}@users.noreply.github.com
  #         echo "the 'set-up-git' step has completed. "

  #     - name: Ensure 'actions:autorelease' label exists
  #       run: |
  #         LABEL=$(gh label list --search "actions:autorelease" --limit 1 --json name --jq '.[].name')
  #         echo "  the value of LABEL is '${LABEL}'. "
  #         if [[ -z "$LABEL" ]]; then
  #           echo "Creating 'actions:autorelease' label"
  #           gh api --silent repos/$GITHUB_REPOSITORY/labels -f name="actions:autorelease" -f color="baa938" -f description="This is an automatically-created PR to trigger a release"
  #         else
  #           echo "the 'actions:autorelease' label already exists"
  #         fi
  #       env:
  #         #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

  #     - name: Ensure 'version:${{ inputs.RELEASE_TYPE }}' label exists
  #       run: |
  #         LABEL=$(gh label list --search "version:${{ inputs.RELEASE_TYPE }}" --limit 1 --json name --jq '.[].name')
  #         echo "  the value of LABEL is '${LABEL}'. "
  #         if [[ -z "$LABEL" ]]; then
  #           echo "Creating 'version:${{ inputs.RELEASE_TYPE }}' label"
  #           gh api --silent repos/$GITHUB_REPOSITORY/labels -f name="version:${{ inputs.RELEASE_TYPE }}" -f color="baa938" -f description="Related to a ''${{ inputs.RELEASE_TYPE }}'' version release"
  #         else
  #           echo "the 'version:${{ inputs.RELEASE_TYPE }}' label already exists"
  #         fi
  #       env:
  #         #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

  #     - name: Output summary
  #       run: |
  #         echo "::notice title=Calling the builder::The build workflow has been called to see if the image can be converted.  If the image is converted, then the release process will continue. "

  check-image-id:        #   3. validate the reviewed image ID from the JSON_VARS_FILE #   # essentially, this should not fail... it only checks to see if it is 'not-set'... i think
    # Call the 'reuse-autorelease-verify-image' workflow
    name: check-image-id
    #uses: rwaight/actions/.github/workflows/reuse-autorelease-verify-image.yml@v2 # use the hash instead of the version number
    uses: rwaight/actions/.github/workflows/reuse-autorelease-verify-image.yml@main
    needs: [validate-tag]
    if: (github.repository_owner == 'rwaight')
    with:
      REVIEWED_IMAGE_ID: ${{ needs.validate-tag.outputs.merged-reviewed-id }}
      #WORKFLOW_SUMMARY: ${{ inputs.WORKFLOW_SUMMARY }}
      VERBOSE: ${{ inputs.VERBOSE }}
    secrets:
      #ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      #GH_APP_BOT_UID: ${{ secrets.GH_APP_BOT_UID }}
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_KEY: ${{ secrets.GH_APP_KEY }}

  build-prod:
    # Call the build workflow
    name: call-build
    #uses: rwaight/actions/.github/workflows/reuse-build.yml@v2 # use the hash instead of the version number
    uses: rwaight/actions/.github/workflows/reuse-build.yml@main
    needs: [validate-tag, check-image-id]
    if: (github.repository_owner == 'rwaight' && github.ref_type == 'tag')
    with:
      BUILD_METHOD: 'to-prod'  # the 'autorelease build-prod' workflow will look for 'to-prod' to be set as the build_method
      # not applicable for autorelease#BUILD_SCHEDULE: ''
      # not an input for the builder#build_version: ${{ needs.reuse-next-version.outputs.next-tag }} # the build workflow should come to the same conclusion...
      DRY_RUN: ${{ inputs.DRY_RUN }}
      #GH_APP_BOT_NAME: ${{ inputs.GH_APP_BOT_NAME }}
      IMAGE_CREATE: 'true'     # for the 'autorelease build-prod' workflow, this needs to be 'true'
      JSON_VARS_FILE: ${{ inputs.JSON_VARS_FILE }}
      #NOTIFY_SLACK: ${{ inputs.NOTIFY_SLACK }}
      # for 'autorelease build-prod', use '${{ inputs.PACKER_TEMPLATE_CONVERT }}' when declaring 'PACKER_TEMPLATE_BUILD'
      PACKER_TEMPLATE_BUILD: ${{ inputs.PACKER_TEMPLATE_CONVERT }}
      PACKER_TEMPLATE_CONVERT: ${{ inputs.PACKER_TEMPLATE_CONVERT }}
      # use the 'merged-reviewed-id' from the 'validate-tag' job #REVIEWED_IMAGE_ID: ${{ inputs.REVIEWED_IMAGE_ID }}
      REVIEWED_IMAGE_ID: ${{ needs.validate-tag.outputs.merged-reviewed-id }}
      #WORKFLOW_SUMMARY: ${{ inputs.WORKFLOW_SUMMARY }}
      VERBOSE: ${{ inputs.VERBOSE }}
    secrets:
      ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      GH_APP_BOT_UID: ${{ secrets.GH_APP_BOT_UID }}
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_KEY: ${{ secrets.GH_APP_KEY }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      SSH_KEY_FILE: ${{ secrets.SSH_KEY_FILE }}

  print-build-results:
    name: Print the build results
    runs-on: ubuntu-latest
    needs: [validate-tag, check-image-id, build-prod]
    #needs: [validate-tag, check-image-id]
    #if: (github.repository_owner == 'rwaight' && inputs.VERBOSE=='true')
    if: (github.repository_owner == 'rwaight')
    env:
      # validate-tag # check-tag #
      check-tag-status: ${{ needs.validate-tag.outputs.check-tag-status }}
      full-version-ref: ${{ needs.validate-tag.outputs.full-version-ref }}
      major-ref: ${{ needs.validate-tag.outputs.major-ref }}
      minor-ref: ${{ needs.validate-tag.outputs.minor-ref }}
      patch-ref: ${{ needs.validate-tag.outputs.patch-ref }}
      prerelease: ${{ needs.validate-tag.outputs.prerelease }}
      is-prerelease: ${{ needs.validate-tag.outputs.is-prerelease }}
      # validate-tag # check-json-file #
      check-json-file-status: ${{ needs.validate-tag.outputs.check-json-file-status }}
      merged-version: ${{ needs.validate-tag.outputs.merged-version }}
      merged-type: ${{ needs.validate-tag.outputs.merged-type }}
      merged-reviewed-id: ${{ needs.validate-tag.outputs.merged-reviewed-id }}
      # check-image-id #
      check-image-id-job-status: ${{ needs.check-image-id.outputs.job-status }}
      # build-prod #
      BUILD_METHOD: ${{ needs.build-prod.outputs.BUILD_METHOD }}
      BUILD_TYPE: ${{ needs.build-prod.outputs.BUILD_TYPE }}
      BUILD_VERSION: ${{ needs.build-prod.outputs.BUILD_VERSION }}
      CREATED_IMAGE_ID: ${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}
      CREATED_IMAGE_TYPE: ${{ needs.build-prod.outputs.CREATED_IMAGE_TYPE }}
      CREATED_IMAGE_JSON_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_JSON_ARTIFACT }}
      CREATED_IMAGE_INFO_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_INFO_ARTIFACT }}
      FORCE_FAILED_BUILD: ${{ needs.build-prod.outputs.FORCE_FAILED_BUILD }}
      FORCE_FAILED_VALIDATE: ${{ needs.build-prod.outputs.FORCE_FAILED_VALIDATE }}
      IMAGE_SKIP_CREATE: ${{ needs.build-prod.outputs.IMAGE_SKIP_CREATE }}
      IMAGE_SKIP_NOTE: ${{ needs.build-prod.outputs.IMAGE_SKIP_NOTE }}
      JOB_STATUS_BUILD: ${{ needs.build-prod.outputs.JOB_STATUS_BUILD }}
      JOB_STATUS_VALIDATE: ${{ needs.build-prod.outputs.JOB_STATUS_VALIDATE }}
      PACKER_VALIDATE_OUTCOME: ${{ needs.build-prod.outputs.PACKER_VALIDATE_OUTCOME }}
      PACKER_BUILD_OUTCOME: ${{ needs.build-prod.outputs.PACKER_BUILD_OUTCOME }}
      PR_NUMBER: ${{ needs.build-prod.outputs.PR_NUMBER }}
      PR_BRANCH: ${{ needs.build-prod.outputs.PR_BRANCH }}
      PR_COMMENT_ID: ${{ needs.build-prod.outputs.PR_COMMENT_ID }}
      REVIEWED_IMAGE_ID: ${{ needs.build-prod.outputs.REVIEWED_IMAGE_ID }}
      # input
      VERBOSE: ${{ inputs.VERBOSE || 'true' }}
    steps:

      - name: Print variables from needed jobs
        id: print-vars-from-jobs
        run: |
          ## Print variables from needed jobs
          echo "Starting the 'print-vars-from-jobs' step... "
          echo ""
          echo "  outputs from the 'check-tag' step in the 'validate-tag' job "
          echo "      check-tag-status:  ${{ env.check-tag-status }} "
          echo "      full-version-ref:  ${{ env.full-version-ref }} "
          echo "      major-ref       :  ${{ env.major-ref }} "
          echo "      minor-ref       :  ${{ env.minor-ref }} "
          echo "      patch-ref       :  ${{ env.patch-ref }} "
          echo "      prerelease      :  ${{ env.prerelease }} "
          echo "      is-prerelease   :  ${{ env.is-prerelease }} "
          echo ""
          echo "  outputs from the 'check-json-file' step in the 'validate-tag' job "
          echo "      check-json-file-status:  ${{ env.check-json-file-status }} "
          echo "      merged-version is     :  ${{ env.merged-version }} "
          echo "      merged-type is        :  ${{ env.merged-type }} "
          echo "      merged-reviewed-id is :  ${{ env.merged-reviewed-id }} "
          echo ""
          echo "  outputs from the 'check-image-id' job "
          echo "      job-status           :  ${{ env.check-image-id-job-status }} "
          echo ""
          echo "Completing the 'print-vars-from-jobs' step... "
        env:
          # outputs from 'check-tag' step in the 'validate-tag' job #
          check-tag-status: ${{ needs.validate-tag.outputs.check-tag-status }}
          full-version-ref: ${{ needs.validate-tag.outputs.full-version-ref }}
          major-ref: ${{ needs.validate-tag.outputs.major-ref }}
          minor-ref: ${{ needs.validate-tag.outputs.minor-ref }}
          patch-ref: ${{ needs.validate-tag.outputs.patch-ref }}
          prerelease: ${{ needs.validate-tag.outputs.prerelease }}
          is-prerelease: ${{ needs.validate-tag.outputs.is-prerelease }}
          # outputs from 'check-json-file' step in the 'validate-tag' job #
          check-json-file-status: ${{ needs.validate-tag.outputs.check-json-file-status }}
          merged-version: ${{ needs.validate-tag.outputs.merged-version }}
          merged-type: ${{ needs.validate-tag.outputs.merged-type }}
          merged-reviewed-id: ${{ needs.validate-tag.outputs.merged-reviewed-id }}
          # check-image-id #
          check-image-id-job-status: ${{ needs.check-image-id.outputs.job-status }}

      - name: Print outputs from the 'build-prod' job
        id: print-vars-from-build-job
        run: |
          ## Print outputs from the 'build-prod' job
          echo "Starting the 'print-vars-from-build-job' step... "
          echo ""
          echo "outputs from the 'build-prod' job "
          echo ""
          echo "  job status outputs:  "
          echo "      JOB_STATUS_BUILD    :  ${{ env.JOB_STATUS_BUILD }} "
          echo "      FORCE_FAILED_BUILD  :  ${{ env.FORCE_FAILED_BUILD }} "
          echo "      PACKER_BUILD_OUTCOME:  ${{ env.PACKER_BUILD_OUTCOME }} "
          echo ""
          echo "      JOB_STATUS_VALIDATE    :  ${{ env.JOB_STATUS_VALIDATE }} "
          echo "      FORCE_FAILED_VALIDATE  :  ${{ env.FORCE_FAILED_VALIDATE }} "
          echo "      PACKER_VALIDATE_OUTCOME:  ${{ env.PACKER_VALIDATE_OUTCOME }} "
          echo ""
          echo "  build variable outputs:  "
          echo "      BUILD_METHOD     :  ${{ env.BUILD_METHOD }} "
          echo "      BUILD_TYPE       :  ${{ env.BUILD_TYPE }} "
          echo "      BUILD_VERSION    :  ${{ env.BUILD_VERSION }} "
          echo ""
          echo "      REVIEWED_IMAGE_ID:  ${{ env.REVIEWED_IMAGE_ID }} "
          echo ""
          echo "      IMAGE_SKIP_CREATE:  ${{ env.IMAGE_SKIP_CREATE }} "
          echo "      IMAGE_SKIP_NOTE  :  ${{ env.IMAGE_SKIP_NOTE }} "
          echo ""
          echo "  created image outputs:  "
          echo "      CREATED_IMAGE_ID:  ${{ env.CREATED_IMAGE_ID }} "
          echo "      CREATED_IMAGE_TYPE:  ${{ env.CREATED_IMAGE_TYPE }} "
          echo ""
          echo "      CREATED_IMAGE_JSON_ARTIFACT:  ${{ env.CREATED_IMAGE_JSON_ARTIFACT }} "
          echo "      CREATED_IMAGE_INFO_ARTIFACT:  ${{ env.CREATED_IMAGE_INFO_ARTIFACT }} "
          echo ""
          echo "  pull request info outputs:  "
          echo "      PR_NUMBER    :  ${{ env.PR_NUMBER }} "
          echo "      PR_BRANCH    :  ${{ env.PR_BRANCH }} "
          echo "      PR_COMMENT_ID:  ${{ env.PR_COMMENT_ID }} "
          echo ""
          echo "  reviewed image output (duplicate):  "
          echo "      REVIEWED_IMAGE_ID:  ${{ env.REVIEWED_IMAGE_ID }} "
          echo ""
        env:
          # outputs from 'build-prod' #
          BUILD_METHOD: ${{ needs.build-prod.outputs.BUILD_METHOD }}
          BUILD_TYPE: ${{ needs.build-prod.outputs.BUILD_TYPE }}
          BUILD_VERSION: ${{ needs.build-prod.outputs.BUILD_VERSION }}
          CREATED_IMAGE_ID: ${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}
          CREATED_IMAGE_TYPE: ${{ needs.build-prod.outputs.CREATED_IMAGE_TYPE }}
          CREATED_IMAGE_JSON_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_JSON_ARTIFACT }}
          CREATED_IMAGE_INFO_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_INFO_ARTIFACT }}
          FORCE_FAILED_BUILD: ${{ needs.build-prod.outputs.FORCE_FAILED_BUILD }}
          FORCE_FAILED_VALIDATE: ${{ needs.build-prod.outputs.FORCE_FAILED_VALIDATE }}
          IMAGE_SKIP_CREATE: ${{ needs.build-prod.outputs.IMAGE_SKIP_CREATE }}
          IMAGE_SKIP_NOTE: ${{ needs.build-prod.outputs.IMAGE_SKIP_NOTE }}
          JOB_STATUS_BUILD: ${{ needs.build-prod.outputs.JOB_STATUS_BUILD }}
          JOB_STATUS_VALIDATE: ${{ needs.build-prod.outputs.JOB_STATUS_VALIDATE }}
          PACKER_VALIDATE_OUTCOME: ${{ needs.build-prod.outputs.PACKER_VALIDATE_OUTCOME }}
          PACKER_BUILD_OUTCOME: ${{ needs.build-prod.outputs.PACKER_BUILD_OUTCOME }}
          PR_NUMBER: ${{ needs.build-prod.outputs.PR_NUMBER }}
          PR_BRANCH: ${{ needs.build-prod.outputs.PR_BRANCH }}
          PR_COMMENT_ID: ${{ needs.build-prod.outputs.PR_COMMENT_ID }}
          REVIEWED_IMAGE_ID: ${{ needs.build-prod.outputs.REVIEWED_IMAGE_ID }}

  print-created-image-info:
    name: print-image-info
    runs-on: ubuntu-latest
    needs: [build-prod]
    if: (github.repository_owner == 'rwaight')
    env:
      # build-prod #
      BUILD_METHOD: ${{ needs.build-prod.outputs.BUILD_METHOD }}
      BUILD_TYPE: ${{ needs.build-prod.outputs.BUILD_TYPE }}
      BUILD_VERSION: ${{ needs.build-prod.outputs.BUILD_VERSION }}
      CREATED_IMAGE_ID: ${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}
      CREATED_IMAGE_TYPE: ${{ needs.build-prod.outputs.CREATED_IMAGE_TYPE }}
      CREATED_IMAGE_JSON_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_JSON_ARTIFACT }}
      CREATED_IMAGE_INFO_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_INFO_ARTIFACT }}
      REVIEWED_IMAGE_ID: ${{ needs.build-prod.outputs.REVIEWED_IMAGE_ID }}
      # input
      VERBOSE: ${{ inputs.VERBOSE || 'true' }}
    steps:

      - name: Print created image info from the 'build-prod' job
        id: print-created-image-info-from-build-job
        run: |
          ## Print outputs from the 'build-prod' job
          echo "Starting the 'print-created-image-info-from-build-job' step... "
          echo ""
          echo "outputs from the 'build-prod' job "
          echo ""
          echo "  created image outputs:  "
          echo "      CREATED_IMAGE_ID:  ${{ env.CREATED_IMAGE_ID }} "
          echo "      CREATED_IMAGE_TYPE:  ${{ env.CREATED_IMAGE_TYPE }} "
          echo ""
          echo "      CREATED_IMAGE_JSON_ARTIFACT:  ${{ env.CREATED_IMAGE_JSON_ARTIFACT }} "
          echo "      CREATED_IMAGE_INFO_ARTIFACT:  ${{ env.CREATED_IMAGE_INFO_ARTIFACT }} "
          echo ""
          echo "  build variable outputs:  "
          echo "      BUILD_METHOD     :  ${{ env.BUILD_METHOD }} "
          echo "      BUILD_TYPE       :  ${{ env.BUILD_TYPE }} "
          echo "      BUILD_VERSION    :  ${{ env.BUILD_VERSION }} "
          echo ""
          echo "  reviewed image output:  "
          echo "      REVIEWED_IMAGE_ID:  ${{ env.REVIEWED_IMAGE_ID }} "
          echo ""
        env:
          # outputs from 'build-prod' #
          BUILD_METHOD: ${{ needs.build-prod.outputs.BUILD_METHOD }}
          BUILD_TYPE: ${{ needs.build-prod.outputs.BUILD_TYPE }}
          BUILD_VERSION: ${{ needs.build-prod.outputs.BUILD_VERSION }}
          CREATED_IMAGE_ID: ${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}
          CREATED_IMAGE_TYPE: ${{ needs.build-prod.outputs.CREATED_IMAGE_TYPE }}
          CREATED_IMAGE_JSON_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_JSON_ARTIFACT }}
          CREATED_IMAGE_INFO_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_INFO_ARTIFACT }}
          REVIEWED_IMAGE_ID: ${{ needs.build-prod.outputs.REVIEWED_IMAGE_ID }}

  reuse-post-post-build-update-release-template:   #### should move to  07. prepare-final-draft       # new job for 'reuse-build' - should output??
    name: update-release-template
    needs: [validate-tag,build-prod]
    runs-on: ubuntu-latest  # the current latest is Ubuntu 22.04
    # install software list available at:
    # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md#installed-software
    if: github.ref_type == 'tag'
    outputs:
      job-status: ${{ job.status }}
      # output from the 'release-drafter' step
      release-id: ${{ steps.release-drafter.outputs.id }}
      release-name: ${{ steps.release-drafter.outputs.name }}
      release-tag-name: ${{ steps.release-drafter.outputs.tag_name }}
      release-html-url: ${{ steps.release-drafter.outputs.html_url }}
      release-upload-url: ${{ steps.release-drafter.outputs.upload_url }}
      release-major-version: ${{ steps.release-drafter.outputs.major_version }}
      release-minor-version: ${{ steps.release-drafter.outputs.minor_version }}
      release-patch-version: ${{ steps.release-drafter.outputs.patch_version }}
      release-resolved-version: ${{ steps.release-drafter.outputs.resolved_version }}
    env:
      # validate-tag # check-tag #
      check-tag-status: ${{ needs.validate-tag.outputs.check-tag-status }}
      full-version-ref: ${{ needs.validate-tag.outputs.full-version-ref }}
      major-ref: ${{ needs.validate-tag.outputs.major-ref }}
      minor-ref: ${{ needs.validate-tag.outputs.minor-ref }}
      patch-ref: ${{ needs.validate-tag.outputs.patch-ref }}
      prerelease: ${{ needs.validate-tag.outputs.prerelease }}
      is-prerelease: ${{ needs.validate-tag.outputs.is-prerelease }}
      # validate-tag # check-json-file #
      check-json-file-status: ${{ needs.validate-tag.outputs.check-json-file-status }}
      merged-version: ${{ needs.validate-tag.outputs.merged-version }}
      merged-type: ${{ needs.validate-tag.outputs.merged-type }}
      merged-reviewed-id: ${{ needs.validate-tag.outputs.merged-reviewed-id }}
      # build-prod #
      BUILD_METHOD: ${{ needs.build-prod.outputs.BUILD_METHOD }}
      BUILD_TYPE: ${{ needs.build-prod.outputs.BUILD_TYPE }}
      BUILD_VERSION: ${{ needs.build-prod.outputs.BUILD_VERSION }}
      CREATED_IMAGE_ID: ${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}
      CREATED_IMAGE_TYPE: ${{ needs.build-prod.outputs.CREATED_IMAGE_TYPE }}
      CREATED_IMAGE_JSON_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_JSON_ARTIFACT }}
      CREATED_IMAGE_INFO_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_INFO_ARTIFACT }}
      REVIEWED_IMAGE_ID: ${{ needs.build-prod.outputs.REVIEWED_IMAGE_ID }}
      # input
      RELEASE_TEMPLATE_FILE: ${{ inputs.RELEASE_TEMPLATE_FILE }}
      VERBOSE: ${{ inputs.VERBOSE || 'true' }}
    steps:

      - name: Exit workflow in forked repo
        id: check-repo-owner
        if: (github.repository_owner != 'rwaight')
        run: |
          echo "This workflow was run in a forked repo. Unless this file is updated, none of the jobs will run. "
          echo "This workflow will now fail and exit. "
          echo "::error title=⛔ error in the '${{ github.workflow }}' workflow hint::This workflow was run in a forked repo"
          exit 1
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message

      - name: Print artifact info from the 'build-prod' job
        id: print-artifact-info-from-build-job
        run: |
          ## Print outputs from the 'build-prod' job
          echo "Starting the 'print-artifact-info-from-build-job' step... "
          echo ""
          echo "outputs from the 'build-prod' job "
          echo ""
          echo "  created image outputs:  "
          echo "      CREATED_IMAGE_ID:  ${{ env.CREATED_IMAGE_ID }} "
          echo "      CREATED_IMAGE_TYPE:  ${{ env.CREATED_IMAGE_TYPE }} "
          echo ""
          echo "      CREATED_IMAGE_JSON_ARTIFACT:  ${{ env.CREATED_IMAGE_JSON_ARTIFACT }} "
          echo "      CREATED_IMAGE_INFO_ARTIFACT:  ${{ env.CREATED_IMAGE_INFO_ARTIFACT }} "
          echo ""
          echo "  build variable outputs:  "
          echo "      BUILD_METHOD     :  ${{ env.BUILD_METHOD }} "
          echo "      BUILD_TYPE       :  ${{ env.BUILD_TYPE }} "
          echo "      BUILD_VERSION    :  ${{ env.BUILD_VERSION }} "
          echo ""
          echo "  reviewed image output:  "
          echo "      REVIEWED_IMAGE_ID:  ${{ env.REVIEWED_IMAGE_ID }} "
          echo ""
        env:
          # outputs from 'build-prod' #
          BUILD_METHOD: ${{ needs.build-prod.outputs.BUILD_METHOD }}
          BUILD_TYPE: ${{ needs.build-prod.outputs.BUILD_TYPE }}
          BUILD_VERSION: ${{ needs.build-prod.outputs.BUILD_VERSION }}
          CREATED_IMAGE_ID: ${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}
          CREATED_IMAGE_TYPE: ${{ needs.build-prod.outputs.CREATED_IMAGE_TYPE }}
          CREATED_IMAGE_JSON_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_JSON_ARTIFACT }}
          CREATED_IMAGE_INFO_ARTIFACT: ${{ needs.build-prod.outputs.CREATED_IMAGE_INFO_ARTIFACT }}
          REVIEWED_IMAGE_ID: ${{ needs.build-prod.outputs.REVIEWED_IMAGE_ID }}

      - name: Create a GitHub App Token
        # Verified creator: https://github.com/marketplace/actions/create-github-app-token
        # GitHub Action for creating a GitHub App installation access token.
        uses: actions/create-github-app-token@a0de6af83968303c8c955486bf9739a57d23c7f1 # v1.10.0
        # https://github.com/actions/create-github-app-token
        id: app-token
        with:
          # required
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_KEY }}

      - name: Checkout files from commit tree
        # Verified creator: https://github.com/marketplace/actions/checkout
        # GitHub Action for checking out a repo
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
        with:
          fetch-depth: '0'
          #fetch-tags: true
          #ref: ${{ github.head_ref }}
          token: ${{ steps.app-token.outputs.token }}
          sparse-checkout: |
            .github

      - name: Display structure of files in working directory
        #if: env.MY_WORKFLOW_DEBUG=='true'
        run: ls -Rla

      - name: Set up git config
        id: set-up-git
        # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
        # user: 'my-bot-name <noreply@github.com>'
        run: |
          ## Run 'git --version' then 'git config'
          git --version
          ## Configure git to login as the ${{ inputs.GH_APP_BOT_NAME }}
          git config user.name ${{ inputs.GH_APP_BOT_NAME }}
          git config user.email ${{ secrets.GH_APP_BOT_UID }}+${{ inputs.GH_APP_BOT_NAME }}@users.noreply.github.com
          echo "the 'set-up-git' step has completed. "

      - name: update the release template
        id: update-release-template-file
        run: |
          ## update the release template
          echo "starting the 'update-release-template-file' step: "
          echo ""
          echo "the current working directory is... "
          pwd
          ls -la
          echo "navigating to the '.github' directory, then will update the file... "
          cd .github/
          echo ""
          pwd
          echo "checking the contents fo the directory, then will update the file..."
          ls -la
          ##
          sed -i.bak 's/ami-put_ami_id_here/${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}/g' ${{ inputs.RELEASE_TEMPLATE_FILE }}
          echo ""
          echo "the 'sed' command was just issued... going to cat the file and grep for the image ID... "
          cat ${{ inputs.RELEASE_TEMPLATE_FILE }} | grep '${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}'
          echo "checkout the output above... "
        env:
          CREATED_IMAGE_ID: ${{ needs.build-prod.outputs.CREATED_IMAGE_ID }}
          RELEASE_TEMPLATE_FILE: ${{ inputs.RELEASE_TEMPLATE_FILE }}
          BUILD_VERSION: ${{ needs.build-prod.outputs.BUILD_VERSION }}

#### i think we need to issue 'git add' and 'git commit' here... maybe use the 'add-and-commit' action???


      - name: Download the created image JSON artifact
        id: download-image-json-artifact
        # Verified creator: https://github.com/marketplace/actions/download-a-build-artifact
        # Download [Actions Artifacts](https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts) from your Workflow Runs.
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          # https://github.com/actions/download-artifact/blob/main/action.yml
          name: '${{ needs.build-prod.outputs.CREATED_IMAGE_JSON_ARTIFACT }}' # Artifact name
          path: './' # Destination path
          # example # name: 'json_artifact'
          # example # path: './exported_files/new_image/' # Destination path

      - name: Download the created image info artifact
        id: download-image-info-artifact
        # Verified creator: https://github.com/marketplace/actions/download-a-build-artifact
        # Download [Actions Artifacts](https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts) from your Workflow Runs.
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          # https://github.com/actions/download-artifact/blob/main/action.yml
          name: '${{ needs.build-prod.outputs.CREATED_IMAGE_INFO_ARTIFACT }}' # Artifact name
          path: './' # Destination path
          # example # name: 'json_artifact'
          # example # path: './exported_files/new_image/' # Destination path

      - name: Print the contents of the artifact path in the instance
        id: check-artifacts-in-instance
        run: |
          ls -l --block-size=M ./
          ls -sh ./

      - name: release-drafter | Print inputs
        id: print-release-drafter-inputs
        run: |
         echo "The release drafter inputs will be: "
         echo ""
         echo "  config-name: ${{ inputs.RELEASE_TEMPLATE_FILE }} "
         echo "  version: ${{ needs.validate-tag.outputs.merged-version }} "
         echo "  tag: ${{ needs.validate-tag.outputs.full-version-ref }} "
         echo ""
         echo "  prerelease: ${{ needs.validate-tag.outputs.is-prerelease }} "
         echo "    note that the 'prerelease' being passed is the 'is-prerelease' value from 'validate-tag' "
         echo ""
         echo "The 'print-release-drafter-inputs' step is now complete. "

      - name: release-drafter | Run rwaight/actions release-drafter
        #uses: rwaight/actions/releases/release-drafter@v2
        uses: rwaight/actions/releases/release-drafter@main
        id: release-drafter
        with:
          # the 'config-name' should be the config file located in .github/ in default branch
          config-name: ${{ inputs.RELEASE_TEMPLATE_FILE }}
          version: ${{ needs.validate-tag.outputs.merged-version }}
          tag: ${{ needs.validate-tag.outputs.full-version-ref }}
          #prerelease-identifier: ${{ inputs.RELEASE_PRE_ID }}
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease }}
          # https://github.com/release-drafter/release-drafter/pull/1302
          ####need to update###include-pre-releases: ${{ steps.get-next-semver.outputs.is-next-prerelease }}
          #include-pre-releases: true
          #publish: false
        env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: release-drafter | Print outputs
        # Run this step if the 'id' output was set in the 'release-drafter' step
        if: ${{ steps.release-drafter.outputs.id }}
        id: print-release-drafter-outputs
        run: |
         echo "The release drafter step outputs are: "
         echo "id: ${{ steps.release-drafter.outputs.id }}" 
         echo "name: ${{ steps.release-drafter.outputs.name }}" 
         echo "tag_name: ${{ steps.release-drafter.outputs.tag_name }}" 
         echo ""
         echo "URLs: "
         echo "html_url: ${{ steps.release-drafter.outputs.html_url }}" 
         echo "upload_url: ${{ steps.release-drafter.outputs.upload_url }}" 
         echo ""
         echo "Release drafter resolved version info: "
         echo "major_version: ${{ steps.release-drafter.outputs.major_version }}" 
         echo "minor_version: ${{ steps.release-drafter.outputs.minor_version }}" 
         echo "patch_version: ${{ steps.release-drafter.outputs.patch_version }}" 
         echo "resolved_version: ${{ steps.release-drafter.outputs.resolved_version }}" 
         echo ""
         echo "body: "
         echo "${{ steps.release-drafter.outputs.body }}"
         echo " === end of body === "
         echo ""
         echo "The 'print-release-drafter-outputs' step is now complete. "

      - name: print a note about uploading the release draft
        id: print-release-draft-note
        run: |
          ## print a note
          echo "according to githubs docs... we will need to use "
          echo "the https://github.com/softprops/action-gh-release action in order to "
          echo "upload the artifacts to our release.... "
          echo ""
          echo "specifically check out https://github.com/softprops/action-gh-release?tab=readme-ov-file#%EF%B8%8F-uploading-release-assets "
          echo "::notice title=artifacts not uploaded::The artifacts were not uploaded to the release draft. "
          echo ""
          echo "::notice title=Manual steps required::The release draft has been updated. upload the artifacts then review the release... almost done "

      - name: Output release draft URL
        if: ${{ steps.release-drafter.outputs.html_url }}
        run: |
          echo "::notice title=Draft release prepared::A release draft has been created, please review it as part of the release process: ${{ steps.release-drafter.outputs.html_url }}"
