name: Reuse - Autorelease 05 Validate Tag
# this is workflow 05 in the autorelease process:
#   - For repos without builds, this should be the `autorelease-03-prep-release` workflow file
#   - For repos **with** builds, this workflow will be called by `reuse-autorelease-06-build-prod`, which should be the `autorelease-03-build-prod` workflow file
# the 'on' event criteria should be: on: push: tags: ['v*.*.*']
# ```
# on:
#   push:
#     tags:
#       - 'v*.*.*'
# ```
# autorelease notes:  https://github.com/rwaight/actions/blob/main/docs/autorelease-process-notes.md
#run-name: validate-tag
run-name: check-tag
# This workflow was created so that other GitHub repos can call this reusable workflow and improve our build consistency
# NOTE: Because of how re-usable workflows handle inputs, all of the booleans must be treated as strings

on:
  # 'workflow_call' will allow other GitHub workflows to call this workflow
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows#creating-a-reusable-workflow
  # if we need to define inputs, then we need to review the docs in the link below
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-of-onworkflow_callinputs
  workflow_call:
    # Inputs and secrets: # https://docs.github.com/en/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow
    inputs:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callinputs
      # All of the 'inputs' below are passed from the caller workflow.
      # # new variable for 'reuse-autorelease-05-validate-tag'
      # DRY_RUN:
      #   description: 'Perform a "dry run" or not.'
      #   required: false
      #   #default: false
      #   #type: boolean
      #   # set the input as a 'string' as a workaround for boolean inputs, until GitHub figures its life out
      #   # see https://github.com/actions/runner/issues/1483
      #   # if this is set to boolean, then the actual value will be 'null'
      #   # Need to keep this as a string, but then below use 'fromJSON' to cast this as a boolean
      #   # see https://github.com/actions/runner/issues/1483#issuecomment-1031671517
      #   # example to cast this as a boolean: ${{ fromJSON(inputs.WORKFLOW_SUMMARY) }}
      #   type: string
      #   default: 'false'
      # save the 'GH_APP_BOT_NAME' input in case it is needed in the future
      # # new variable for 'reuse-autorelease-05-validate-tag'
      # GH_APP_BOT_NAME:
      #   description: 'The name of the GitHub App. '
      #   default: 'github-actions[bot]'
      #   required: false
      #   type: string
      # new variable for 'reuse-autorelease-05-validate-tag'
      JSON_VARS_FILE:
        description: >-
          The name and path of the variables file, this should be in json format.
          Example: `./my-custom-variables.json`
        default: 'not-set'
        required: true
        type: string
      # new variable for 'reuse-autorelease-05-validate-tag'
      JSON_VARS_IMAGE_FIELD:
        description: 'The image ID field that should be checked within the JSON variables file. '
        default: 'reviewed_image_id'
        required: false
        type: string
      # new variable for 'reuse-autorelease-05-validate-tag'
      JSON_VARS_TYPE_FIELD:
        description: 'The type field that should be checked within the JSON variables file. '
        default: 'release_type'
        required: false
        type: string
      # new variable for 'reuse-autorelease-05-validate-tag'
      JSON_VARS_VERSION_FIELD:
        description: 'The version field that should be checked within the JSON variables file. '
        default: 'my_custom_version'
        required: false
        type: string
      # new variable for 'reuse-autorelease-05-validate-tag'
      VERBOSE:
        description: 'Determine if the workflow should run debug tasks, a boolean that defaults to false'
        required: false
        #default: false
        #type: boolean
        # set the input as a 'string' as a workaround for boolean inputs, until GitHub figures its life out
        # see https://github.com/actions/runner/issues/1483
        # if this is set to boolean, then the actual value will be 'null'
        # Need to keep this as a string, but then below use 'fromJSON' to cast this as a boolean
        # see https://github.com/actions/runner/issues/1483#issuecomment-1031671517
        # example to cast this as a boolean: ${{ fromJSON(inputs.VERBOSE) }}
        type: string
        default: 'false'

    secrets:
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_callsecrets
      # All of the 'secrets' below are passed from the caller workflow.
      # save the 'ACTIONS_TOKEN' secret in case it is needed in the future
      # # new secret for 'reuse-autorelease-05-validate-tag'
      # ACTIONS_TOKEN:
      #   description: 'A token used within the autorelease workflows.'
      #   required: false
      # save the 'GH_APP_BOT_UID' secret in case it is needed in the future
      # # new secret for 'reuse-autorelease-05-validate-tag'
      # GH_APP_BOT_UID:   # new secret, do not rename
      #   description: >-
      #     'The UID of the GitHub App, not to be confused with GitHub App ID. 
      #     Can be found using the approach from: https://github.com/orgs/community/discussions/24664#discussioncomment-3880274 '
      #   required: false
      # new secret for 'reuse-autorelease-05-validate-tag'
      GH_APP_ID:
        description: 'The GitHub App ID'
        required: false
      # new secret for 'reuse-autorelease-05-validate-tag'
      GH_APP_KEY:
        description: 'The private key of the GitHub App'
        required: false

    outputs:
      # Map the workflow outputs to job outputs
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_calloutputs
      #
      # check-tag #
      check-tag-status:  # output from the 'check-tag' job
        description: 'The status of the check-tag job.'
        value: ${{ jobs.check-tag.outputs.job-status }}
      # check-tag # outputs from the 'get-tag-version' step
      full-version-ref:
        description: "The full version ref. "
        value: ${{ jobs.check-tag.outputs.full-version-ref }}
      major-ref:
        description: "The major version ref. "
        value: ${{ jobs.check-tag.outputs.major-ref }}
      minor-ref:
        description: "The minor version ref. "
        value: ${{ jobs.check-tag.outputs.minor-ref }}
      patch-ref:
        description: "The patch version ref. "
        value: ${{ jobs.check-tag.outputs.patch-ref }}
      prerelease:
        description: "The prerelease identifier, if applicable. "
        value: ${{ jobs.check-tag.outputs.prerelease }}
      is-prerelease:
        description: "If the version is a prerelease or not. "
        value: ${{ jobs.check-tag.outputs.is-prerelease }}
      # check-json-file #
      check-json-file-status:  # output from the 'check-json-file' job
        description: 'The status of the check-json-file job.'
        value: ${{ jobs.check-json-file.outputs.job-status }}
      merged-version:  # output from the 'version-from-file' step
        description: 'the value of the version field from the JSON file'
        value: ${{ jobs.check-json-file.outputs.merged-version }}
      merged-type:  # output from the 'type-from-file' step
        description: 'the value of the type field from the JSON file'
        value: ${{ jobs.check-json-file.outputs.merged-type }}
      merged-reviewed-id:  # output from the 'reviewed-id-from-file' step
        description: 'the value of the reviewed image ID field from the JSON file'
        value: ${{ jobs.check-json-file.outputs.merged-reviewed-id }}

jobs:

# this is workflow 05 in the autorelease process, it should be called by a workflow named 'Autorelease Step 3 - Build Prod' (from the caller repo)
# the 'on' event criteria should be: on: push: tags: ['v*.*.*']

# Autorelease Process
## Autorelease Reusable Workflows
### Step 3
#### 05. validate-tag (this workflow)
#   1. get the version from the tag;                                            (check-tag)             ## done
#   2. get the version, type, and reviewed image id from the JSON_VARS_FILE;    (check-json-file)       ## done

  check-tag:                                #   1. get the version from the tag;
    name: check-tag
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    outputs:
      job-status: ${{ job.status }}
      full-version-ref: ${{ steps.get-tag-version.outputs.full-version-ref }}
      major-ref: ${{ steps.get-tag-version.outputs.major-ref }}
      minor-ref: ${{ steps.get-tag-version.outputs.minor-ref }}
      patch-ref: ${{ steps.get-tag-version.outputs.patch-ref }}
      prerelease: ${{ steps.get-tag-version.outputs.prerelease }}
      is-prerelease: ${{ steps.get-tag-version.outputs.is-prerelease }}
    env:
      VERBOSE: ${{ inputs.VERBOSE || 'true' }}
    steps:

      - name: Exit workflow in forked repo
        id: check-repo-owner
        if: (github.repository_owner != 'rwaight')
        run: |
          echo "This workflow was run in a forked repo. Unless this file is updated, none of the jobs will run. "
          echo "This workflow will now exit. "
          exit 1

      - name: Create a GitHub App Token
        # Verified creator: https://github.com/marketplace/actions/create-github-app-token
        # GitHub Action for creating a GitHub App installation access token.
        uses: actions/create-github-app-token@a0de6af83968303c8c955486bf9739a57d23c7f1 # v1.10.0
        # https://github.com/actions/create-github-app-token
        id: app-token
        with:
          # required
          app-id: ${{ secrets.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_KEY }}

      - name: Checkout files from commit tree
        # Verified creator: https://github.com/marketplace/actions/checkout
        # GitHub Action for checking out a repo
        uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
        with:
          #fetch-depth: '0'
          #ref: ${{ github.head_ref }}
          token: ${{ steps.app-token.outputs.token }}

      - name: get-tag-version
        id: get-tag-version
        #uses: rwaight/actions/test/get-tag-version@130cf7b531a919de678759798a1aee9474dbeb47 # v0.1.34
        uses: rwaight/actions/test/get-tag-version@main
        if: (github.ref_type == 'tag')
        with:
          verbose: true

      - name: get-tag-version | Print outputs
        id: check-get-tag-version
        #if: (github.ref_type == 'tag')
        if: ${{ steps.get-tag-version.outputs.full-version-ref }}
        shell: bash
        run: |
          echo "starting step 'check-get-tag-version' "
          echo "## get-tag-version outputs"
          echo "Full version : ${{ env.FULL_VERSION_REF }} "
          echo "Major ref    : ${{ env.MAJOR_REF }} "
          echo "Minor ref    : ${{ env.MINOR_REF }} "
          echo "Patch ref    : ${{ env.PATCH_REF }} "
          echo "Prerelease   : ${{ env.PRERELEASE }} "
          echo "Is prerelease: ${{ env.IS_PRERELEASE }} "
          echo ""
          echo "Major num    : ${{ env.MAJOR_NUM }} "
          echo "Minor num    : ${{ env.MINOR_NUM }} "
          echo "Patch num    : ${{ env.PATCH_NUM }} "
          echo ""
          echo "completing the 'check-get-tag-version' step. "
        env:
          #FULL_VERSION_TAG: ${{ steps.get-tag-version.outputs.full-version-tag }}
          FULL_VERSION_REF: ${{ steps.get-tag-version.outputs.full-version-ref }}
          MAJOR_REF: ${{ steps.get-tag-version.outputs.major-ref }}
          MINOR_REF: ${{ steps.get-tag-version.outputs.minor-ref }}
          PATCH_REF: ${{ steps.get-tag-version.outputs.patch-ref }}
          MAJOR_NUM: ${{ steps.get-tag-version.outputs.major-num }}
          MINOR_NUM: ${{ steps.get-tag-version.outputs.minor-num }}
          PATCH_NUM: ${{ steps.get-tag-version.outputs.patch-num }}
          PRERELEASE: ${{ steps.get-tag-version.outputs.prerelease }}
          IS_PRERELEASE: ${{ steps.get-tag-version.outputs.is-prerelease }}

      - name: Fail if the 'get-tag-version' step did not provide output
        if: ${{ ! steps.get-tag-version.outputs.full-version-ref }}
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message
        run: |
          echo "::error title=⛔ error in the 'get-tag-version' step hint::No output provided"
          exit 1

  check-json-file:                          #   2. get the version, type, and reviewed image id from the JSON_VARS_FILE;
    # get the version, type, and reviewed image id from the JSON_VARS_FILE
    name: check-json-file
    uses: rwaight/actions/.github/workflows/reuse-convert_to_action-check-json.yml@main
    if: github.ref_type == 'tag'
    with:
      # not an input #DRY_RUN:
      JSON_VARS_FILE: ${{ inputs.JSON_VARS_FILE }}
      JSON_VARS_IMAGE_FIELD: ${{ inputs.JSON_VARS_IMAGE_FIELD }}
      JSON_VARS_TYPE_FIELD: ${{ inputs.JSON_VARS_TYPE_FIELD }}
      JSON_VARS_VERSION_FIELD: ${{ inputs.JSON_VARS_VERSION_FIELD }}
      WORKFLOW_SUMMARY: ${{ inputs.WORKFLOW_SUMMARY }}
      VERBOSE: ${{ inputs.VERBOSE }}
    secrets:
      GH_APP_ID: ${{ secrets.GH_APP_ID }}
      GH_APP_KEY: ${{ secrets.GH_APP_KEY }}


### this 'reuse-next-version' job was in the initial draft, but probably not needed
  # reuse-next-version:
  #   #name: Get next version for ${{ inputs.RELEASE_TYPE }} release
  #   name: get-next-version
  #   runs-on: ubuntu-latest
  #   outputs:
  #     job-status: ${{ job.status }}
  #     # output from the 'repo-version-info' step
  #     latest-release: ${{ steps.repo-version-info.outputs.latest-release }}
  #     latest-tag: ${{ steps.repo-version-info.outputs.latest-tag }}
  #     # output from the 'get-next-semver' step
  #     current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
  #     current-version: ${{ steps.get-next-semver.outputs.current-version }}
  #     next-tag: ${{ steps.get-next-semver.outputs.next-tag }}
  #     next-version: ${{ steps.get-next-semver.outputs.next-version }}
  #     is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}
  #   env:
  #     VERBOSE: ${{ inputs.VERBOSE || 'true' }}
  #   steps:
  #     # https://github.com/actions/create-github-app-token
  #     - name: Create a GitHub App Token
  #       # Verified creator: https://github.com/marketplace/actions/create-github-app-token
  #       # GitHub Action for creating a GitHub App installation access token.
  #       uses: actions/create-github-app-token@a0de6af83968303c8c955486bf9739a57d23c7f1 # v1.10.0
  #       id: app-token
  #       with:
  #         # required
  #         app-id: ${{ secrets.GH_APP_ID }}
  #         private-key: ${{ secrets.GH_APP_KEY }}

  #     - name: Checkout files from commit tree
  #       # Verified creator: https://github.com/marketplace/actions/checkout
  #       # GitHub Action for checking out a repo
  #       uses: actions/checkout@1d96c772d19495a3b5c517cd2bc0cb401ea0529f # v4.1.3
  #       with:
  #         fetch-depth: '0'
  #         #ref: ${{ github.head_ref }}
  #         token: ${{ steps.app-token.outputs.token }}

  #     - name: repo-version-info | Run rwaight/actions git/repo-version-info
  #       id: repo-version-info
  #       uses: rwaight/actions/git/repo-version-info@main
  #       with:
  #         #gh-token: ${{ secrets.GITHUB_TOKEN }}
  #         gh-token: ${{ steps.app-token.outputs.token }}

  #     - name: repo-version-info | Print outputs
  #       id: print-repo-info
  #       if: |
  #         ${{ steps.repo-version-info.outputs.latest-tag }} || 
  #         ${{ steps.repo-version-info.outputs.latest-release }}
  #       run: |
  #         ## Print repo version information
  #         echo "Here is the info from the repo-version-info step: "
  #         echo "- latest release: ${{ steps.repo-version-info.outputs.latest-release }}"
  #         echo "- latest tag: ${{ steps.repo-version-info.outputs.latest-tag }}"
  #         ##
  #         echo "### Output from the \`repo-version-info\` step" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
  #         echo "- latest release: ${{ steps.repo-version-info.outputs.latest-release }}" >> $GITHUB_STEP_SUMMARY
  #         echo "- latest tag: ${{ steps.repo-version-info.outputs.latest-tag }}" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line

  #     - name: get-next-semver | Run rwaight/actions test/get-next-semver
  #       id: get-next-semver
  #       #continue-on-error: true
  #       uses: rwaight/actions/test/get-next-semver@main
  #       with:
  #         gh-token: ${{ steps.app-token.outputs.token }}
  #         pre-release-id: ${{ inputs.RELEASE_PRE_ID }}
  #         release-type: ${{ inputs.RELEASE_TYPE }}
  #         verbose: true

  #     - name: get-next-semver | Print outputs
  #       if: ${{ steps.get-next-semver.outputs.next-version }}
  #       run: |
  #         ## Report the output from the get-next-semver step
  #         echo "The output from the 'get-next-semver' step was: "
  #         echo "- current tag       : ${{ env.current-tag }} "
  #         echo "- current version   : ${{ env.current-version }} "
  #         echo "- next tag          : ${{ env.next-tag }} "
  #         echo "- next version      : ${{ env.next-version }} "
  #         echo "- is next prerelease: ${{ env.is-next-prerelease }} "
  #         ##
  #         echo "### Output from the \`get-next-semver\` step" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
  #         echo "- current tag       : ${{ env.current-tag }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- current version   : ${{ env.current-version }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- next tag          : ${{ env.next-tag }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- next version      : ${{ env.next-version }} " >> $GITHUB_STEP_SUMMARY
  #         echo "- is next prerelease: ${{ env.is-next-prerelease }} " >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
  #       env:
  #         current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
  #         current-version: ${{ steps.get-next-semver.outputs.current-version }}
  #         next-tag: ${{ steps.get-next-semver.outputs.next-tag }}
  #         next-version: ${{ steps.get-next-semver.outputs.next-version }}
  #         is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}

  #     - name: Set up git config
  #       id: set-up-git
  #       # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
  #       # user: 'my-bot-name <noreply@github.com>'
  #       run: |
  #         ## Run 'git --version' then 'git config'
  #         git --version
  #         ## Configure git to login as the ${{ inputs.GH_APP_BOT_NAME }}
  #         git config user.name ${{ inputs.GH_APP_BOT_NAME }}
  #         git config user.email ${{ secrets.GH_APP_BOT_UID }}+${{ inputs.GH_APP_BOT_NAME }}@users.noreply.github.com
  #         echo "the 'set-up-git' step has completed. "

  #     - name: Ensure 'actions:autorelease' label exists
  #       run: |
  #         LABEL=$(gh label list --search "actions:autorelease" --limit 1 --json name --jq '.[].name')
  #         echo "  the value of LABEL is '${LABEL}'. "
  #         if [[ -z "$LABEL" ]]; then
  #           echo "Creating 'actions:autorelease' label"
  #           gh api --silent repos/$GITHUB_REPOSITORY/labels -f name="actions:autorelease" -f color="baa938" -f description="This is an automatically-created PR to trigger a release"
  #         else
  #           echo "the 'actions:autorelease' label already exists"
  #         fi
  #       env:
  #         #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

  #     - name: Ensure 'version:${{ inputs.RELEASE_TYPE }}' label exists
  #       run: |
  #         LABEL=$(gh label list --search "version:${{ inputs.RELEASE_TYPE }}" --limit 1 --json name --jq '.[].name')
  #         echo "  the value of LABEL is '${LABEL}'. "
  #         if [[ -z "$LABEL" ]]; then
  #           echo "Creating 'version:${{ inputs.RELEASE_TYPE }}' label"
  #           gh api --silent repos/$GITHUB_REPOSITORY/labels -f name="version:${{ inputs.RELEASE_TYPE }}" -f color="baa938" -f description="Related to a ''${{ inputs.RELEASE_TYPE }}'' version release"
  #         else
  #           echo "the 'version:${{ inputs.RELEASE_TYPE }}' label already exists"
  #         fi
  #       env:
  #         #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

  #     - name: Output summary
  #       run: |
  #         echo "::notice title=Calling the builder::The build workflow has been called to see if the image can be converted.  If the image is converted, then the release process will continue. "
