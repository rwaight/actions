# from https://docs.github.com/en/actions/publishing-packages/publishing-docker-images#publishing-images-to-github-packages
name: Build and publish container images

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    tags:
      - 'v[0-9][0-9]?.[0-9][0-9]?.[0-9][0-9]?'
      # the major.minor and major tags are evaluated below
      #- 'v[0-9][0-9]?.[0-9][0-9]?'
      #- 'v[0-9][0-9]?'
      #
      # the 'v[0-9].[0-9].[0-9]' filter pattern will need to be updated to allow double digits, using either: 
      #    specify 2 digits with a second range followed by `?`:
      #        'v[0-9][0-9]?.[0-9][0-9]?.[0-9][0-9]?'     
      #    or keep the single digit, but match one or more with `+`:
      #        'v[0-9]+.[0-9]+.[0-9]+'
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
  # release:
  #   types: [published]
  # do not keep 'workflow_dispatch' here long term
  workflow_dispatch:

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-container-image:
    name: Build and push ${{ matrix.name }} image
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      # https://github.com/actions/deploy-pages/issues/28#issuecomment-1087299632
      id-token: write
      # 
    strategy:
      fail-fast: false
      matrix:
        action: [render-template, pr-label-checker]
        # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs#example-expanding-configurations
        # use 'include' to specify additional variables
        include:
          - action: render-template
            name: render-template
            description: "Renders file based on template and passed variables"
            dir: utilities/render-template
            go-version: 1.17.x
            #test: "-e DOCKER_TEST_ONLY=true"
          - action: pr-label-checker
            name: label-checker
            description: "Checks pull requests for given labels"
            dir: github/label-checker
            go-version: 1.21.x
            #test: "-e DOCKER_TEST_ONLY=true"
    # Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
    env:
      REGISTRY: ghcr.io
      #IMAGE_NAME: ${{ github.repository }}
      IMAGE_NAME: ${{ github.repository }}/${{ matrix.name }}
      #IMAGE_NAME: ${{ matrix.name }}
      IS_REF_TAG: ${{ github.ref_type == 'tag' && 'true' || 'false' }}
    defaults:
      run:
        # set the the runners 'working-directory' to '${{ matrix.dir }}'
        # https://docs.github.com/en/actions/using-jobs/setting-default-values-for-jobs#setting-default-shell-and-working-directory
        working-directory: ./${{ matrix.dir }}
    steps:

      - name: Checkout repository
        # Verified creator: https://github.com/marketplace/actions/checkout
        # GitHub Action for checking out a repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true
          #token: ${{ secrets.GITHUB_TOKEN }}
          sparse-checkout: |
            .github
            ${{ matrix.dir }}
        id: checkout

      - name: Display structure of files in working directory
        #if: env.MY_WORKFLOW_DEBUG=='true'
        run: ls -R

      - name: Get the build version
        id: get-version
        uses: rwaight/actions/vars/build-version@main
        with:
          checkout: false
          strategy: 'simple'
          verbose: ${{ runner.debug == '1' && 'true' || 'false' }}

      - name: Setup Go environment
        if: ${{ matrix.go-version }}
        # Verified creator: https://github.com/marketplace/actions/setup-go-environment
        # Set up your GitHub Actions workflow with a specific version of Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: ${{ matrix.go-version }}
        id: setup-go

      - name: Install QEMU static binaries
        # Verified creator: https://github.com/marketplace/actions/docker-setup-qemu
        # GitHub Action to install QEMU static binaries
        uses: docker/setup-qemu-action@v3.6.0
        id: setup-qemu

      - name: Setup Docker Buildx
        # Verified creator: https://github.com/marketplace/actions/docker-setup-buildx
        # GitHub Action to set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        id: setup-buildx

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the ${{ env.REGISTRY }} container registry
        # Verified creator: https://github.com/marketplace/actions/docker-login
        # GitHub Action to login against a Docker registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        #uses: docker/login-action@v3.0.0
        with:
          #registry: ghcr.io
          registry: ${{ env.REGISTRY }}
          #username: ${{ github.actor }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        id: docker-login

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        # Verified creator: https://github.com/marketplace/actions/docker-metadata-action
        # GitHub Action to extract metadata (tags, labels) from Git reference and GitHub events for Docker 
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # https://github.com/docker/metadata-action#latest-tag
          # https://github.com/docker/metadata-action#typesha
          # https://github.com/docker/metadata-action#typeref
          # https://github.com/docker/metadata-action#typesemver
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,priority=100,prefix=sha-,format=short
            type=ref,priority=600,event=branch
            type=ref,priority=600,event=tag
            type=ref,priority=600,event=pr
            type=semver,priority=900,enable=${{ env.IS_REF_TAG }},pattern={{version}}
            type=semver,priority=900,enable=${{ env.IS_REF_TAG }},pattern=v{{major}}.{{minor}}
            type=semver,priority=900,enable=${{ env.IS_REF_TAG }},pattern=v{{major}}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/${{ matrix.dir }}/README.md
            org.opencontainers.image.url=https://github.com/${{ github.repository }}/tree/main/${{ matrix.dir }}
          annotations: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.description }}
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/${{ matrix.dir }}/README.md
            org.opencontainers.image.url=https://github.com/${{ github.repository }}/tree/main/${{ matrix.dir }}
        id: metadata

      - name: Print the output from the metadata step
        id: print-metadata-info
        if: steps.metadata.outcome == 'success'
        run: |
          echo "The tags metadata is: "
          echo "${{ steps.metadata.outputs.tags }}"
          echo ""
          echo "using a bash array"
          tags=(${{ steps.metadata.outputs.tags }})
          echo "tag 0:  ${tags[0]}"
          echo "tag 1:  ${tags[1]}"
          echo ""
          echo "tag0=${tags[0]}" >> "$GITHUB_OUTPUT"
          echo "tag0=${tags[0]}" >> $GITHUB_ENV
          echo "tag1=${tags[1]}" >> "$GITHUB_OUTPUT"
          echo "tag1=${tags[1]}" >> $GITHUB_ENV
          echo "the 'print-metadata-info' step has now completed"
        shell: bash

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Load the container image
        # Verified creator: https://github.com/marketplace/actions/build-and-push-docker-images
        # GitHub Action to build and push Docker images with Buildx
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        # Skip running on forks or Dependabot since neither has access to secrets
        if: |
          (github.repository == 'rwaight/actions') &&
          (github.actor!= 'dependabot[bot]') &&
          (contains(github.head_ref, 'dependabot-') == false)
        with:
          #context: .
          context: "{{defaultContext}}:${{ matrix.dir }}"
          tags: ${{ steps.metadata.outputs.tags }}
          annotations: ${{ steps.metadata.outputs.annotations }}
          # maybe switch to this # annotations: ${{ steps.metadata.outputs.labels }}
          labels: ${{ steps.metadata.outputs.labels }}
          load: true
          #platforms: linux/amd64,linux/arm64
          platforms: linux/amd64
        id: load-image

      - name: Test the ${{ matrix.name }} Docker image
        id: test-image
        if: ${{ matrix.test && steps.load-image.outcome == 'success' }}
        run: |
          echo "going to test the image with '${{ matrix.test }}'"
          echo "testing tag '${{ steps.print-metadata-info.outputs.tag0 }}' "
          docker run --rm ${{ matrix.test }} ${{ steps.print-metadata-info.outputs.tag0 }}
          echo "testing tag '${{ steps.print-metadata-info.outputs.tag1 }}' "
          docker run --rm ${{ matrix.test }} ${{ steps.print-metadata-info.outputs.tag1 }}
          echo "the 'test-image' step has now completed"
        shell: bash

      - name: Build and push the ${{ matrix.name }} container image
        # Verified creator: https://github.com/marketplace/actions/build-and-push-docker-images
        # GitHub Action to build and push Docker images with Buildx
        uses: docker/build-push-action@14487ce63c7a62a4a324b0bfb37086795e31c6c1 # v6.16.0
        # Skip running on forks or Dependabot since neither has access to secrets
        if: |
          (github.repository == 'rwaight/actions') &&
          (github.actor!= 'dependabot[bot]') &&
          (contains(github.head_ref, 'dependabot-') == false)
        with:
          #context: .
          context: "{{defaultContext}}:${{ matrix.dir }}"
          tags: ${{ steps.metadata.outputs.tags }}
          annotations: ${{ steps.metadata.outputs.annotations }}
          # maybe switch to this # annotations: ${{ steps.metadata.outputs.labels }}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          #platforms: linux/amd64,linux/arm64
          # do not specify platforms, otherwise multiple images will be created without tags
          # https://github.com/docker/build-push-action/issues/894
          platforms: linux/amd64
          # secrets: |
          #   GIT_AUTH_TOKEN=${{ secrets.MY_PACKAGE_MGR_TOKEN }}
          provenance: false
        id: build-image

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      - name: Generate artifact attestation
        # Verified creator: https://github.com/marketplace/actions/attest-build-provenance
        # Action for generating build provenance attestations for workflow artifacts
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        #uses: actions/attest-build-provenance@v1.0.0
        # Skip running on forks or Dependabot since neither has access to secrets
        if: |
          (github.repository == 'rwaight/actions') &&
          (github.actor!= 'dependabot[bot]') &&
          (contains(github.head_ref, 'dependabot-') == false)
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-image.outputs.digest }}
          push-to-registry: true
        id: artifact-attestation

      - name: Print the output from the build-image step
        id: print-image-info
        if: steps.build-image.outcome == 'success'
        run: |
          echo "The image id is: ${{ steps.build-image.outputs.imageid }}"
          echo "The image digest is ${{ steps.build-image.outputs.digest }}"
          echo "The image metadata is: "
          echo "${{ fromJSON(steps.build-image.outputs.metadata) }}"
          echo ""
        shell: bash
