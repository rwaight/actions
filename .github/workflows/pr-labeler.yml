# This workflow currently runs the 'pr-labeler' action
name: PR Labeler
run-name: Label PR ${{ github.event.number }} on ${{ github.head_ref || github.ref_name }}
on:
  pull_request:
    # 'on pull_request' is used by: 'pr-labeler'
    branches: [main]
    types:
      - opened
      - reopened
      - labeled
      - unlabeled
      - ready_for_review
      - review_requested
  # workflow_dispatch:
  #   inputs:
  #     debug_output:
  #       description: 'Debug output'
  #       required: true
  #       default: false
  #       type: boolean

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  # https://docs.github.com/en/actions/using-jobs/using-concurrency#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
  group: ${{ github.workflow }}-${{ github.ref }}
  #cancel-in-progress: true
  cancel-in-progress: ${{ github.actor != 'rw-actions-bot[bot]' }}
  #https://docs.github.com/en/actions/using-jobs/using-concurrency#example-only-cancel-in-progress-jobs-on-specific-branches
  #cancel-in-progress: ${{ !contains(github.ref, 'release/')}}

jobs:
  pr-labeler:
    name: Label pull request ${{ github.event.number }}
    runs-on: ubuntu-latest
    # the 'if' statement below is not needed at this time, but would be if the 'on' section above changes
    if: github.event_name == 'pull_request'
    permissions:
      # the `actions: write` permission might need to be added if
      #   the `gh run cancel` does not work
      # OR might need to include `gh run watch ${{ github.run_id }}` 
      #   if issuing `gh run cancel` does not exit the workflow
      actions: write
      contents: read
      issues: write
      pull-requests: write
    # # https://docs.github.com/en/actions/using-jobs/using-concurrency
    # # can also configure concurrency within the job
    # concurrency:
    #   # https://docs.github.com/en/actions/using-jobs/using-concurrency#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
    #   group: ${{ github.workflow }}-${{ github.ref }}
    #   cancel-in-progress: true
    steps:
      # Issuing 'exit 0' does not force the workflow to exit early
      #   need to issue 'gh run cancel ${{ github.run_id }}'
      #   and might need to change 'exit 0' to 'exit 1' or a non-zero numerical value
      # https://github.com/orgs/community/discussions/82744#discussioncomment-8718646
      - name: Checkout using built-in token
        if: (github.repository_owner != 'rwaight') || ${{ github.actor == 'rw-actions-bot[bot]' }}
        uses: actions/checkout@v4

      - name: Exit workflow in forked repo
        id: check-repo-owner
        if: (github.repository_owner != 'rwaight')
        run: |
          echo "This workflow was run in a forked repo. Unless this file is updated, none of the jobs will run. "
          echo "  if the workflow actually runs, then the 'exit 0' below will need to be changed to a non-zero. "
          gh run cancel ${{ github.run_id }}
          echo "The 'check-repo-owner' step is finishing and this workflow will now exit. "
          exit 0
        # might need to include `gh run watch ${{ github.run_id }}` if 'gh run cancel' does not exit the workflow
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Exit workflow if called by 'rw-actions-bot[bot]'
        id: check-actions-bot
        if: ${{ github.actor == 'rw-actions-bot[bot]' }}
        run: |
          echo "This workflow was called by the 'rw-actions-bot[bot]' but should not run. "
          echo "  if the workflow actually runs, then the 'exit 0' below will need to be changed to a non-zero. "
          gh run cancel ${{ github.run_id }}
          echo "The 'check-actions-bot' step is finishing and this workflow will now exit. "
          exit 0
        # might need to include `gh run watch ${{ github.run_id }}` if 'gh run cancel' does not exit the workflow
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Check to see if any labels have been set
        id: check-for-any-labels
        #if: github.event.issue.labels.length == 0
        if: github.event.pull_request.labels.length == 0
        run: |
          echo "At the time this step has started, no labels have been set in the PR. "
          echo "Might consider reducing how often this workflow is called... "
          echo "The 'check-for-any-labels' step has completed. "

      - name: Autorelease | Set the label scope to 'semver'
        #name: Autorelease | Check 'autorelease' branch
        id: set-label-scope-semver
        #if: contains('refs/heads/autorelease', github.ref)
        if: ${{ contains('refs/heads/autorelease', github.ref) }}
        # if: | 
        #   contains('
        #     refs/heads/autorelease
        #     refs/heads/production
        #   ', github.ref)
        run: |
          ## the double number signs below are for line spacing and readability only
          ##
          echo "Setting GHA_LABEL_SCOPE to 'semver' ... "
          echo "GHA_LABEL_SCOPE=semver" >> $GITHUB_ENV
          ##
          ## The head branch should be named autorelease/<version>
          if ! [[ "${{ github.event.pull_request.head.ref }}" =~ ^autorelease\/[A-Za-z0-9.+-]+$ ]]; then
            echo "::error::Invalid autorelease branch '${{ github.event.pull_request.head.ref }}'"
            exit 1
          fi
          VERSION=$(echo "${{ github.event.pull_request.head.ref }}" | awk -F/ '{print $2}')
          echo "VERSION=$VERSION"
          ## Ensure the version number in the branch name is in a valid format
          RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
          if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
          else
            echo "::error::Version '$VERSION' is not in a valid format" && exit 1
          fi
          echo "The 'set-label-scope-semver' step has completed. "

      - name: Set the label scope to 'type'
        id: set-label-scope-type
        if: ${{ ! contains('refs/heads/autorelease', github.ref) }}
        run: |
          ## the double number signs below are for line spacing and readability only
          ##
          echo "Setting GHA_LABEL_SCOPE to 'type' ... "
          echo "GHA_LABEL_SCOPE=type" >> $GITHUB_ENV
          ##
          echo "This branch is not an 'autorelease' branch, skipping the autorelease steps. "
          echo "The 'set-label-scope-type' step has completed. "

      - name: Ensure the label scope has been determined
        id: check-label-scope
        run: |
          ## the double number signs below are for line spacing and readability only
          ##
          if [ '${{ env.GHA_LABEL_SCOPE }}' == 'semver' ]; then
              echo "The label scope is 'semver'. "
          ##
          elif [ '${{ env.GHA_LABEL_SCOPE }}' == 'type' ]; then
              echo "The label scope is 'type'. "
          else
              echo "::error::The label scope was not determined for PR ${{ github.event.number }}, exiting. "
              exit 1
          fi
          echo "The 'check-label-scope' step has completed. "

      - name: Check to see if any '${{ env.GHA_LABEL_SCOPE }}:' labels have been set
        id: check-for-scope-labels
        #if: ${{ !contains(github.event.issue.labels.*.name, '${{ env.GHA_LABEL_SCOPE }}:') }}
        if: ${{ !contains(github.event.pull_request.labels.*.name, '${{ env.GHA_LABEL_SCOPE }}:') }}
        run: |
          echo "At the time this step has started, no '${{ env.GHA_LABEL_SCOPE }}' labels have been added to the PR"
          echo "The 'check-for-scope-labels' step has completed. "

      # Create a GitHub App Token from actions/create-github-app-token
      # https://github.com/actions/create-github-app-token
      - name: Create an App Token
        #uses: actions/create-github-app-token@v1
        uses: actions/create-github-app-token@f2acddfb5195534d487896a656232b016a682f3c
        id: app-token
        with:
          # required
          app-id: ${{ secrets.RW_ACTIONS_APP_ID }}
          private-key: ${{ secrets.RW_ACTIONS_APP_KEY }}
          # create a token for all repositories in the current owner's installation
          owner: ${{ github.repository_owner }}

      - name: Checkout files from commit tree
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Apply non-versioning labels
        id: label-pull-request
        uses: actions/labeler@v5
        with:
          repo-token: ${{ steps.app-token.outputs.token }}

      - name: Autorelease | Check for semantic version labels
        uses: rwaight/actions/test/check-semver-labels@main
        id: check-semver-labels
        #if: contains(github.event.pull_request.labels.*.name, 'actions:autorelease')
        if: contains('refs/heads/autorelease', github.ref)
        with:
          gh-token: ${{ steps.app-token.outputs.token }}
          allow-failure: true
          #allow-failure: false
          semver-fallback: 'triage:version-needed'
          semver-prefix: 'version:'
          my_action_debug: true

      - name: Check for type labels
        uses: rwaight/actions/github/label-checker@main # can use version specific or main
        #uses: rwaight/actions/github/label-checker@v1 # can use version specific or main
        id: check-type-labels
        if: ${{ ! contains('refs/heads/autorelease', github.ref) }}
        with:
          allow_failure: true
          prefix_mode: true
          #any_of: 'group:'
          none_of: 'version:'
          one_of: 'type:'
          repo_token: ${{ steps.app-token.outputs.token }}

      - name: Write the check-${{ env.GHA_LABEL_SCOPE }}-labels results to the environment
        # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
        id: write-results
        run: |
          ## the double number signs below are for line spacing and readability only
          ##
          echo "Running the 'write-results' step. "
          ##
          test_name=check-${{ env.GHA_LABEL_SCOPE }}-labels
          echo "test_name=check-${{ env.GHA_LABEL_SCOPE }}-labels" >> $GITHUB_ENV
          echo "test_name=check-${{ env.GHA_LABEL_SCOPE }}-labels" >> "$GITHUB_OUTPUT"
          ##
          if [ '${{ env.GHA_LABEL_SCOPE }}' == 'semver' ]; then
              echo "The label scope is 'semver'. "
              label_check=${{ steps.check-semver-labels.outputs.label_check }}
              echo "label_check=${{ steps.check-semver-labels.outputs.label_check }}" >> $GITHUB_ENV
              echo "label_check=${{ steps.check-semver-labels.outputs.label_check }}" >> "$GITHUB_OUTPUT"
              step_outcome=${{ steps.check-semver-labels.outcome }}
              echo "step_outcome=${{ steps.check-semver-labels.outcome }}" >> $GITHUB_ENV
              echo "step_outcome=${{ steps.check-semver-labels.outcome }}" >> "$GITHUB_OUTPUT"
          ##
          elif [ '${{ env.GHA_LABEL_SCOPE }}' == 'type' ]; then
              echo "The label scope is 'type'. "
              label_check=${{ steps.check-type-labels.outputs.label_check }}
              echo "label_check=${{ steps.check-type-labels.outputs.label_check }}" >> $GITHUB_ENV
              echo "label_check=${{ steps.check-type-labels.outputs.label_check }}" >> "$GITHUB_OUTPUT"
              step_outcome=${{ steps.check-type-labels.outcome }}
              echo "step_outcome=${{ steps.check-type-labels.outcome }}" >> $GITHUB_ENV
              echo "step_outcome=${{ steps.check-type-labels.outcome }}" >> "$GITHUB_OUTPUT"
          else
              echo "::error::Unable to set 'label_check' and 'step_outcome' variables, exiting. "
              exit 1
          fi
          ##
          if [ '${{ env.MY_WORKFLOW_DEBUG }}' == 'true' ]; then
              echo "debug and verbose info... "
              echo ""
              echo "the '${{ env.test_name }}' step info... "
              echo "  label_check:  ${{ env.label_check }} "
              echo "  step_outcome: ${{ env.step_outcome }} "
              echo ""
              echo "going to evaluate the outcome of the check labels steps..."
              echo "learn more at: "
              echo "https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context"
              echo ""
          fi
          ##
          echo "checking the contains autorelease ..."
          echo "${{ contains('refs/heads/autorelease', github.ref) }} "
          echo "look above, what is that?"
          echo ""
          echo "checking the NOT contains autorelease ..."
          echo "${{ ! contains('refs/heads/autorelease', github.ref) }} "
          echo "look above, what is that?"
          echo ""
          ##
          echo "The 'write-results' step has finished. "

      # look for a comment 
      - name: Find Comment
        uses: rwaight/actions/github/find-comment@main
        id: find-comment
        #continue-on-error: true
        with:
          #issue-number: ${{ github.event.number }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'rw-actions-bot[bot]'
          body-includes: The PR labeler checks

      - name: Generate comment template
        # need to use the 'label_check' outputs ('success' or 'failure' maybe?) to determine which file to use
        id: comment-template
        uses: rwaight/actions/utilities/render-template@main
        if: steps.write-results.outcome != 'skipped'
        with:
          #idea #template: assets/pr-labeler/comment-checks-${{ steps.check-type-labels.outputs.label_check }}.md
          #template: assets/pr-labeler/comment-checks-failure.md
          template: assets/pr-labeler/comment-checks-${{ steps.write-results.outputs.label_check }}.md
          vars: |
            foo: this
            bar: that
            event_number: ${{ github.event.number }}
            label_check: ${{ steps.write-results.outputs.label_check }}
            label_scope: ${{ env.GHA_LABEL_SCOPE }}
            step_outcome: ${{ steps.write-results.outputs.step_outcome }}
            test_name: ${{ env.test_name }}

      - name: Create or update comment
        id: comment-on-pr
        uses: rwaight/actions/github/create-or-update-comment@main
        if: steps.write-results.outcome != 'skipped'
        with:
          body: ${{ steps.comment-template.outputs.result }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          issue-number: ${{ github.event.number }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Output comment ID
        run: |
          echo "Comment ID - ${{ steps.comment-on-pr.outputs.comment-id }}"

      - name: Fail workflow if proper '${{ env.GHA_LABEL_SCOPE }}' label was not set
        # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
        if: |
          steps.write-results.outputs.step_outcome != 'skipped' && 
          steps.write-results.outputs.label_check != 'success'
        run: |
          echo "::error::Missing the proper '${{ env.GHA_LABEL_SCOPE }}' label in PR ${{ github.event.number }}"
          exit 1
