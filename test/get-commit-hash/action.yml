name: 'Get commit hash'
description: 'Get the current commit hash suffix'
author: 'rwaight'
branding:
  icon: 'info'
  color: 'blue'
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings

inputs:
  gh-token:
    description: 'The `GITHUB_TOKEN` or a `repo` scoped Personal Access Token (PAT), may be needed to run the `gh release` command depending on permissions granted to the default GitHub token.'
    required: true
    default: ${{ github.token }}
  verbose:
    description: 'Determine if the action should run verbose tasks, defaults to false. '
    required: false
    #default: 'false'
    # https://github.com/actions/github-script/issues/264#issuecomment-1496635479
    default: ${{ (env.RUNNER_DEBUG == '1' && 'true') || 'false' }}

outputs:
  current-version-tag:
    description: "The full version tag from the repo."
    value: ${{ steps.get-tag-version.outputs.full-version-ref }}
  current-hash-suffix:
    description: "The hash suffix is '-g' + an unambiguous abbreviation for the tip commit of parent."
    value: ${{ steps.set-hash-output.outputs.CURRENT_BUILD_HASH }}

runs:
  using: "composite"
  # Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  steps:
    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error file=get-next-semver,title=â›” error::This action supports Linux only"
        exit 1

    - name: Greet the triggering_actor
      if: inputs.verbose=='true'
      shell: bash
      run: echo Hello ${{ github.triggering_actor }}, the verbose variable is set to true.

    - name: Verbose | Print the inputs
      if: inputs.verbose=='true'
      id: verbose-print-inputs
      shell: bash
      run: | 
        ## Print the inputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "verbose is set to ${{ inputs.verbose }} "
        ##

    - name: Checkout files from commit tree
      uses: actions/checkout@v4
      id: checkout-without-token
      continue-on-error: true
      with:
        fetch-depth: 0
      #env:
      #  GH_TOKEN: ${{ inputs.gh-token }}

    - name: Checkout files from commit tree with the provided GitHub token
      uses: actions/checkout@v4
      id: checkout-with-token
      # if the 'checkout-without-token' step outcome is 'skipped' or 'failure'
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
      if: |
        steps.checkout-without-token.outcome == 'skipped' || 
        steps.checkout-without-token.outcome == 'failure'
      with:
        fetch-depth: 0
        token: ${{ inputs.gh-token }}

    - name: Fetch the tags from the repo
      #name: Run 'git fetch --force --prune --tags' before 'git describe'
      id: git-fetch
      # error: 'fatal: --unshallow on a complete repository does not make sense'
      #run: "git fetch --force --prune --unshallow --tags"
      # end error for the command above
      shell: bash
      run: |
        echo "starting the 'git-fetch' step... "
        git fetch --force --prune --tags
        echo "finishing the 'git-fetch' step... "

    - name: Set environmental variables used by the action
      id: set-action-env-vars
      # Ensure that the needed environmental variables are set
      #   - 'EVAL_HASH_SET' is set to 'false'
      #   - 'GH_DEFAULT_BRANCH' is set to '${{ github.event.repository.default_branch }}'
      if: ${{ always() }}
      shell: bash
      run: |
        echo "Setting EVAL_HASH_SET to false..."
        echo "EVAL_HASH_SET=false" >> $GITHUB_ENV
        echo "Setting GH_DEFAULT_BRANCH to '${{ github.event.repository.default_branch }}'..."
        echo "GH_DEFAULT_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV
        echo ""
      # https://github.blog/changelog/2020-07-22-github-actions-better-support-for-alternative-default-branch-names/

    # # hopefully do not need to configure git as the github-actions[bot]
    # - name: Configure git for the github-actions bot
    #   id: configure-git
    #   shell: bash
    #   run: |
    #     ##
    #     ## Configure git to login as the GitHub Actions Bot.
    #     git config user.name github-actions[bot]
    #     git config user.email 41898282+github-actions[bot]@users.noreply.github.com


    - name: Look for simple semver with git describe
      # name: 02b | Run 'git describe --tags --match "v[0-9].[0-9].[0-9]*"'
      id: simple-semver
      shell: bash
      run: |
        echo "starting the 'simple-semver' step... "
        git describe --tags --match "v[0-9].[0-9].[0-9]*"
        semver_simple=$(git describe --tags --match "v[0-9].[0-9].[0-9]*")
        echo "setting the value of 'simple-semver' to '${semver_simple}' and sending it to GitHub output"
        echo "simple-semver=${semver_simple}" >> $GITHUB_ENV
        echo "simple-semver=${semver_simple}" >> $GITHUB_OUTPUT
        echo "finishing the 'simple-semver' step... "

    - name: Check output from simple-semver
      id: check-simple-semver
      if: ${{ steps.simple-semver.outputs.simple-semver }}
      env:
        semver_simple: ${{ steps.simple-semver.outputs.simple-semver }}
      shell: bash
      run: |
        echo "## simple-semver outputs"
        echo "simple-semver: ${{ env.semver_simple }} "
        echo ""

    - name: Look for wildcard semver with git describe
      # name: 06a | Run 'git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*"'
      id: wildcard-semver
      shell: bash
      run: |
        echo "starting the 'wildcard-semver' step... "
        git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*"
        semver_wildcard=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*")
        echo "setting the value of 'wildcard-semver' to '${semver_wildcard}' and sending it to GitHub output"
        echo "wildcard-semver=${semver_wildcard}" >> $GITHUB_ENV
        echo "wildcard-semver=${semver_wildcard}" >> $GITHUB_OUTPUT
        echo "finishing the 'wildcard-semver' step... "

    - name: Check output from wildcard-semver
      id: check-wildcard-semver
      if: ${{ steps.wildcard-semver.outputs.wildcard-semver }}
      env:
        semver_wildcard: ${{ steps.wildcard-semver.outputs.wildcard-semver }}
      shell: bash
      run: |
        echo "## wildcard-semver outputs"
        echo "wildcard-semver: ${{ env.semver_wildcard }} "
        echo ""

    - name: Get tag version
      id: get-tag-version
      if: (github.ref_type == 'tag')
      shell: bash
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
          MAJOR="${BASH_REMATCH[1]}"
          MINOR="${BASH_REMATCH[2]}"
          PATCH="${BASH_REMATCH[3]}"
          PRERELEASE="${BASH_REMATCH[4]}"
          if [ '${{ inputs.verbose }}' == 'true' ]; then
              echo "VERSION is: $VERSION "
              echo "RE is     : $RE "
              echo "MAJOR is  : $MAJOR "
              echo "MINOR is  : $MINOR "
              echo "PATCH is  : $PATCH "
              echo "PRERELEASE: $PRERELEASE"
          fi
        else
          echo "::error::Version '$VERSION' is not in a valid format" && exit 1
        fi
        ##
        if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
        if [[ -f $GITHUB_OUTPUT ]]; then
          echo "full-version-ref=v$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
          echo "major-ref=v$MAJOR" >> $GITHUB_OUTPUT
          echo "minor-ref=v$MINOR" >> $GITHUB_OUTPUT
          echo "patch-ref=v$PATCH" >> $GITHUB_OUTPUT
          echo "is-prerelease=$pre" >> $GITHUB_OUTPUT
        else
          echo "::set-output name=major-ref::v$MAJOR"
          echo "::set-output name=minor-ref::v$MINOR"
          echo "::set-output name=is-prerelease::$pre"
        fi

    - name: Check output from get-tag-version
      id: check-get-tag-version
      if: (github.ref_type == 'tag')
      env:
        FULL_VERSION: ${{ steps.get-tag-version.outputs.full-version-ref }}
        MAJOR_REF: ${{ steps.get-tag-version.outputs.major-ref }}
        MINOR_REF: ${{ steps.get-tag-version.outputs.minor-ref }}
        PATCH_REF: ${{ steps.get-tag-version.outputs.patch-ref }}
        IS_PRERELEASE: ${{ steps.get-tag-version.outputs.is-prerelease }}
      shell: bash
      run: |
        echo "## get-tag-version outputs"
        echo "Full version: ${{ env.FULL_VERSION }} "
        echo "Major ref   : ${{ env.MAJOR_REF }} "
        echo "Minor ref   : ${{ env.MINOR_REF }} "
        echo "Patch ref   : ${{ env.PATCH_REF }} "
        echo "Prerelease  : ${{ env.IS_PRERELEASE }}"
        echo ""

    - name: CURRENT_BUILD_HASH | Check for tags, set the build hash suffix to the tag version
      # This step is run when the branch is a 'v*.*.*' tag
      if: ${{ contains('refs/tags/v*.*.*', github.ref) && (github.ref_type == 'tag') && (env.GH_EVENT_NAME=='push') }}
      #if: {{ github.ref == 'ref/head/v*' }}
      env:
        FULL_VERSION: ${{ steps.get-tag-version.outputs.full-version-ref }}
      shell: bash
      run: |
        echo "Setting CURRENT_BUILD_HASH to '${{ env.FULL_VERSION }}'..."
        echo "CURRENT_BUILD_HASH=${{ env.FULL_VERSION }}" >> $GITHUB_ENV
        ##echo "Setting EVAL_HASH_SET to true..."
        ##echo "EVAL_HASH_SET=true" >> $GITHUB_ENV
        echo ""

    - name: CURRENT_BUILD_HASH | Fallback value - Set the build hash suffix to the output from 'git describe --tags'
      # This step is run when the build is not production
      if: env.EVAL_HASH_SET=='false'
      id: set-fallback-version
      env:
        semver_simple: ${{ steps.simple-semver.outputs.simple-semver }}
        semver_wildcard: ${{ steps.wildcard-semver.outputs.wildcard-semver }}
      shell: bash
      run: |
        ## Compare the simple and wildcard semver versions
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'set-fallback-version' step. "
            echo "semver_simple is  :  ${{ env.semver_simple }} "
            echo "semver_wildcard is:  ${{ env.semver_wildcard }} "
        fi
        ##
        if [ '${{ env.semver_simple }}' == '${{ env.semver_wildcard }}' ]; then
            echo "the variable 'semver_simple' is set to '${{ env.semver_simple }}' and matches "
            echo "  the variable 'semver_wildcard', which is set to '${{ env.semver_wildcard }}'. "
            simple_and_wildcard_match=true
        else
            echo "the variable 'semver_simple' is set to '${{ env.semver_simple }}' and DOES NOT MATCH "
            echo "  the variable 'semver_wildcard', which is set to '${{ env.semver_wildcard }}'. "
            simple_and_wildcard_match=false
        fi
        echo "do_the_semver_values_match=${simple_and_wildcard_match}" >> "$GITHUB_OUTPUT"
        echo "do_the_semver_values_match=${simple_and_wildcard_match}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The do_the_semver_values_match variable has been set to \`$simple_and_wildcard_match\`"
        fi
        echo "going to set the build hash suffix to the value of 'semver_simple' ... "
        echo "Setting CURRENT_BUILD_HASH to '${{ env.semver_simple }}'..."
        echo "CURRENT_BUILD_HASH=${{ env.semver_simple }}" >> $GITHUB_ENV
        echo "Setting EVAL_HASH_SET to true..."
        echo "EVAL_HASH_SET=true" >> $GITHUB_ENV
        echo ""

    # Output the build hash suffix
    - name: Output the build hash suffix
      id: set-hash-output
      shell: bash
      run: |
        echo "CURRENT_BUILD_HASH=$CURRENT_BUILD_HASH" >> "$GITHUB_OUTPUT"
