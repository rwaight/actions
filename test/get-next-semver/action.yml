name: 'Get Next Semver'
description: 'Get the next semantic version'
author: 'rwaight'
branding:
  icon: 'info'
  color: 'blue'
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings

inputs:

  # gh-token:
  #   description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT), may be needed for the GitHub CLI. '
  #   required: true
  #   default: ${{ github.token }}
  # gh-setup:
  #   description: 'Determine if the action should setup git with `git config`, defaults to false. '
  #   required: false
  #   default: 'false'
  # gh-user-name:
  #   description: 'The GitHub user name for committing changes to the JSON vars file. '
  #   required: false
  #   #   keep 'github-actions[bot]' as default
  #   default: 'github-actions[bot]'
  # gh-user-email:
  #   description: 'The GitHub user email for committing changes to the JSON vars file. '
  #   required: false
  #   #   keep '<41898282+github-actions[bot]@users.noreply.github.com>' as default
  #   default: '<41898282+github-actions[bot]@users.noreply.github.com>'
  pre-release-id:
    description: 'Pre-release identifier (only for pre-release builds). The only supported pre-release syntax is "rc" at this time. '
    required: false
    default: 'rc'
    # should consider adding 'premajor', 'preminor', and 'prepatch' in the future
  release-type:
    description: 'The release type, should be one of: major, minor, patch, or prerelease. The only supported pre-release syntax is "rc" at this time. '
    required: true
    default: 'not-set'
    # should consider adding 'premajor', 'preminor', and 'prepatch' in the future
  my_action_debug:
    description: 'Determine if the workflow should run debug tasks, defaults to false. '
    required: false
    default: 'false'

outputs:
  current-release-version:
    description: "The current release version in the repo. "
    value: ${{ steps.get-current-release.outputs.current-release-version }}
  next-release-version:
    description: "The next release version in the repo. "
    value: ${{ steps.set-next-release.outputs.next-release-version }}


runs:
  using: "composite"
  # Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  steps:
    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error title=⛔ error hint::This action supports Linux only"
        exit 1

    - name: Greet the triggering_actor
      if: inputs.my_action_debug=='true'
      shell: bash
      run: echo Hello ${{ github.triggering_actor }}, the my_action_debug variable is set to true.

    - name: Validate the release-type input
      id: validate-input-release-type
      if: | 
        ${{ inputs.release-type != 'major' }} || 
        ${{ inputs.release-type != 'minor' }} || 
        ${{ inputs.release-type != 'patch' }} || 
        ${{ inputs.release-type != 'prerelease' }} ||
        ${{ inputs.release-type != 'premajor' }} || 
        ${{ inputs.release-type != 'preminor' }} ||
        ${{ inputs.release-type != 'prepatch' }}
      shell: bash
      run: |
        echo "::error title=⛔ error hint::Invalid 'release-type', must be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease"
        exit 1

    - name: Debug | Print the inputs
      if: inputs.my_action_debug=='true'
      id: debug-print-inputs
      shell: bash
      run: | 
        ## Print the inputs if inputs.my_action_debug=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'debug-print-inputs' step. "
        echo ""
        echo "pre-release-id is :  ${{ inputs.pre-release-id }} "
        echo "release-type is   :  ${{ inputs.release-type }} "
        echo "my_action_debug is:  ${{ inputs.my_action_debug }} "
        ##
        echo "completing the 'debug-print-inputs' step. "

    - name: Get the current release version
      id: get-current-release
      shell: bash
      run: |
        ## Get the current release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'get-current-release' step. "
            echo ""
            echo "Using the GitHub CLI to print release information"
            echo "See https://cli.github.com/manual/gh_release_list for information about the command. "
            echo ""
            echo "Debug enabled, running additional 'gh release' commands"
            echo ""
            echo "::group::running 'gh release list' ... "
            gh release list
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts' ... "
            gh release list --exclude-drafts
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases' ... "
            gh release list --exclude-drafts --exclude-pre-releases
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r \".[].tagName\"' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName"
            echo "::endgroup::"
            echo ""
            echo "To learn more about using the GitHub CLI with workflows... "
            echo "See https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows "
            echo ""
        fi
        ##
        if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
            echo "capturing the latest pre-release from the GitHub CLI, as the 'release-type' is 'prerelease'. "
            current_release_version=$(gh release list --exclude-drafts --limit 1 --json tagName | jq -r ".[].tagName")
        elif [[ "${{ inputs.release-type }}" == "pre"* ]]; then
            echo "capturing the latest premajor/preminor/prepatch from the GitHub CLI, as the 'release-type' is one of 'premajor/preminor/prepatch'. "
            current_release_version=$(gh release list --exclude-drafts --limit 1 --json tagName | jq -r ".[].tagName")
            # https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash
        else
            echo "capturing the latest (current) release from the GitHub CLI "
            current_release_version=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName")
        fi
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "current_release_version: $current_release_version"
            echo "writing the 'current_release_version' to the environment and GitHub output"
        fi
        echo "current_release_version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current_release_version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "The current release version of this repo is \`$current_release_version\`"
            echo "writing $current_release_version to the 'current-release-version' GitHub output"
        fi
        echo "current-release-version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current-release-version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'get-current-release' step. "; fi

    - name: Set the next release version
      id: set-next-release
      shell: bash
      run: |
        ## Set the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'set-next-release' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
            echo "pre-release-id is         :  ${{ inputs.pre-release-id }} "
            echo "release-type is           :  ${{ inputs.release-type }} "
            echo ""
            echo "::group::printing the syntax to bump '${{ inputs.release-type }}' ... "
            if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
                ## echo "$version" | awk 'BEGIN{FS=OFS="-${{ inputs.release-type }}"} {$2+=1} 1'
                echo "the syntax to bump 'prerelease' is: "
                ###echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\"-rc\"} {\$2+=1} 1'"
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\"-${{ inputs.pre-release-id }}\"} {\$2+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'patch' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
                echo "the syntax to bump 'patch' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$3+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'minor' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
                echo "the syntax to bump 'minor' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$2+=1;\$3=0} 1'"
            elif [ '${{ inputs.release-type }}' == 'major' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'
                echo "the syntax to bump 'major' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$1+=1;\$2=0;\$3=0} 1'"
            else
                echo "something is wrong with a conditional. "
                echo "this is the DEBUG 'else' statement in the 'set-next-release' step. "
            fi
            echo "::endgroup::"
        fi
        ##
        if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
            echo "updating the next rc-version for a prerelease. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-${{ inputs.pre-release-id }}"} {$2+=1} 1')
            ##next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'patch' ]; then
            echo "updating the next-version for a patch release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'minor' ]; then
            echo "updating the next-version for a minor release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'major' ]; then
            echo "updating the next-version for a major release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1')
            ##
        else
            echo "something is wrong with a conditional, incrementing the version as a PATCH release.. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
        fi
        echo "next_release_version=${next_release_version}" >> "$GITHUB_OUTPUT"
        echo "next_release_version=${next_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "The next release version has been set to \`$next_release_version\`"
            echo "writing $next_release_version to the 'next-release-version' GitHub output"
        fi
        echo "next-release-version=${next_release_version}" >> "$GITHUB_OUTPUT"
        echo "next-release-version=${next_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'set-next-release' step. "; fi
      env:
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}
        ## Increment a PRERELEASE '-rc' version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
        ## Increment a PATCH version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
        ## Increment a MINOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
        ## Increment a MAJOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'

    - name: Validate the next release version
      id: validate-next-release
      shell: bash
      run: |
        ## Validate the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        VERSION="${{ env.next_release_version }}"
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE"
            fi
        else
            ## Fail the workflow if the 'next-release-version' is not valid
            echo "::error::Next release version '$VERSION' is not in a valid format"
            exit 1
        fi
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'validate-next-release' step. "; fi
      env:
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Compare the current release version to the next release version
      id: compare-current-to-next-release
      shell: bash
      run: |
        ## Compare the current release version to the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'compare-current-to-next-release' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
            echo "next_release_version is   :  ${{ env.next_release_version }} "
        fi
        ##
        if [ '${{ env.current_release_version }}' == '${{ env.next_release_version }}' ]; then
            echo "the 'current_release_version' is set to '${{ env.current_release_version }}' and matches "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            current_and_next_match=true
        else
            echo "the 'current_release_version' is set to '${{ env.current_release_version }}' and DOES NOT MATCH "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            current_and_next_match=false
        fi
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "setting the value of 'does_current_match_next' to '${current_and_next_match}' and sending it to GitHub output"
        fi
        echo "does_current_match_next=${current_and_next_match}" >> "$GITHUB_OUTPUT"
        echo "does_current_match_next=${current_and_next_match}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'compare-current-to-next-release' step. "; fi
      env:
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Error if the current version matches the next version
      id: error-matched-versions
      if: ( '${{ steps.compare-current-to-next-release.outputs.does_current_match_next }}' == 'true' )
      shell: bash
      run: |
        ## Error if the current version matches the next version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'error-matched-versions' step. "
        fi
        echo "The current version matches the next version. "
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'error-matched-versions' step. "; fi
      env: 
        current_and_next_match: ${{ steps.compare-current-to-next-release.outputs.does_current_match_next }}

    # Require the proper checkout action to be run before this action is called
    # https://github.com/actions/checkout/?tab=readme-ov-file#push-a-commit-using-the-built-in-token
    # - name: Set up git config
    #   id: set-up-git
    #   if: |
    #     inputs.gh-setup == 'true' && 
    #     ( '${{ steps.compare-current-to-next-release.outputs.does_current_match_next }}' != 'true' )
    #   shell: bash
    #   run: |
    #     if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
    #         echo "starting the 'set-up-git' step. "
    #         echo "git_user_name is :  ${{ env.git_user_name }} "
    #         echo "git_user_email is:  ${{ env.git_user_email }} "
    #     fi
    #     git --version
    #     git config user.name "${{ env.git_user_name }}"
    #     git config user.email "${{ env.git_user_email }}"
    #     git status
    #     if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'set-up-git' step. "; fi
    #   env:
    #     git_user_name: ${{ inputs.gh-user-name }}
    #     git_user_email: ${{ inputs.gh-user-email }}

    - name: Bump the current json version
      id: bump-current-json-version
      if: ( '${{ steps.compare-current-to-next-release.outputs.does_current_match_next }}' != 'true' )
      shell: bash
      run: |
        ## Bump the current json version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'bump-current-json-version' step. "
            echo "json_vars_file is      :  ${{ env.json_vars_file }} "
            echo "json_vars_field is     :  ${{ env.json_vars_field }} "
            echo "next_release_version is:  ${{ env.next_release_version }} "
            echo ""
            echo "::group::printing the syntax to set the '${{ env.json_vars_field }}' field to ${{ env.next_release_version }} ... "
            ## tmp=$(mktemp)
            ## jq '.my_custom_version = "my-new-value"' my-custom-variables.json > "$tmp" && mv "$tmp" my-custom-variables.json
            echo "tmp=\$(mktemp)"
            echo "jq '.my_custom_version = \"my-new-value\"' my-custom-variables.json > \"\$tmp\" && mv \"\$tmp\" my-custom-variables.json\" "
            echo ""
            echo "special thanks to whoever posted the commands on stackoverflow... "
            echo " https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place "
            echo ""
            echo "::endgroup::"
        fi
        tmp=$(mktemp)
        jq '.${{ env.json_vars_field }} = "${{ env.next_release_version }}"' ${{ env.json_vars_file }} > "$tmp" && mv "$tmp" ${{ env.json_vars_file }}
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "going to check the version in the JSON file "
        fi
        ##
        check_json_version=$(jq --raw-output .${{ env.json_vars_field }} ${{ env.json_vars_file }})
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "check_json_version: $check_json_version"
        fi
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'bump-current-json-version' step. "; fi
      env:
        json_vars_file: ${{ inputs.json-vars-file }}
        json_vars_field: ${{ inputs.json-vars-field }}
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Get the updated value of the ${{ inputs.json-vars-field }} version field
      id: get-updated-version
      shell: bash
      run: |
        ## Get the updated value of the ${{ inputs.json-vars-field }} version field
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'get-updated-version' step. "
            echo "json_vars_file is :  ${{ env.json_vars_file }} "
            echo "json_vars_field is:  ${{ env.json_vars_field }} "
            echo ""
            echo "the syntax is 'MY_CUSTOM_VERSION=$(jq --raw-output .my_custom_field my-custom-variables.json)' "
        fi
        updated_json_version=$(jq --raw-output .${{ env.json_vars_field }} ${{ env.json_vars_file }})
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "updated_json_version: $updated_json_version"
            echo "writing the 'updated_json_version' to the environment and GitHub output"
        fi
        ##
        echo "updated_json_version=$updated_json_version" >> $GITHUB_ENV
        echo "updated_json_version=$updated_json_version" >> "$GITHUB_OUTPUT"
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "writing $updated_json_version to the 'new-json-version' GitHub output"
        fi
        echo "new-json-version=$updated_json_version" >> $GITHUB_ENV
        echo "new-json-version=$updated_json_version" >> "$GITHUB_OUTPUT"
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "checking to see if the updated_json_version matches the next_release_version "
        fi
        if [ '$updated_json_version' == '${{ env.next_release_version }}' ]; then
            echo "the 'updated_json_version' is set to '$updated_json_version' and matches "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            next_and_updated_match=true
        else
            echo "the 'updated_json_version' is set to '$updated_json_version' and DOES NOT MATCH "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            next_and_updated_match=false
        fi
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "setting the value of 'does_next_match_updated' to '${next_and_updated_match}' and sending it to GitHub output"
        fi
        echo "does_next_match_updated=${next_and_updated_match}" >> "$GITHUB_OUTPUT"
        echo "does_next_match_updated=${next_and_updated_match}" >> $GITHUB_ENV
        #
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'get-updated-version' step. "; fi
      env:
        json_vars_file: ${{ inputs.json-vars-file }}
        json_vars_field: ${{ inputs.json-vars-field }}
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Commit the changes to the '${{ inputs.json-vars-file }}' file
      id: commit-json-version-changes
      # probably want to only try to commit changes if 'does_next_match_updated' is 'true'
      #if: ( '${{ steps.get-updated-version.outputs.does_next_match_updated }}' == 'true' )
      #uses: stefanzweifel/git-auto-commit-action@v4
      #uses: EndBug/add-and-commit@v9
      uses: rwaight/actions/git/add-and-commit@main
      with:
        add: ${{ inputs.json-vars-file }}
        author_name: ${{ inputs.author_name }}
        author_email: ${{ inputs.author_email }}
        commit: --signoff
        committer_name: ${{ inputs.committer_name }}
        committer_email: ${{ inputs.committer_email }}
        default_author: ${{ inputs.default_author }}
        message: '[bump-json-version] Bump ${{ inputs.json-vars-field }} to ${{ steps.set-next-release.outputs.next-release-version }}'
        # options below are for 'stefanzweifel/git-auto-commit-action'
        #commit_message: Bump ${{ inputs.json-vars-field }} to ${{ steps.set-next-release.outputs.next-release-version }}
        #commit_options: '--signoff'
        #file_pattern: ${{ inputs.json-vars-file }}
        #branch: '${{ github.ref_name }}'
        #create_branch: false
        #commit_user_name: ${{ inputs.gh-user-name }}
        #commit_user_email: ${{ inputs.gh-user-email }}

    - name: Debug | Print the outputs
      if: inputs.my_action_debug=='true'
      id: debug-print-outputs
      shell: bash
      run: | 
        ## Print the outputs if inputs.my_action_debug=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'debug-print-outputs' step. "
        echo ""
        echo "Current release and old JSON version information: "
        echo "old-json-version is       :  ${{ env.old-json-version }} "
        echo "current-release-version is:  ${{ env.current-release-version }} "
        echo ""
        echo "Next release and new JSON version information: "
        echo "next-release-version is   :  ${{ env.next-release-version }} "
        echo "new-json-version is       :  ${{ env.new-json-version }} "
        echo ""
        echo "Version match results: "
        echo "do_current_versions_match is:  ${{ env.do_current_versions_match }} "
        echo "does_current_match_next is  :  ${{ env.does_current_match_next }} "
        echo "does_next_match_updated is  :  ${{ env.does_next_match_updated }} "
        echo ""
        ##
        echo "completing the 'debug-print-outputs' step. "
      env:
        current-release-version: ${{ steps.get-current-release.outputs.current-release-version }}
        next-release-version: ${{ steps.set-next-release.outputs.next-release-version }}
        old-json-version: ${{ steps.get-current-version.outputs.old-json-version }}
        new-json-version: ${{ steps.get-updated-version.outputs.new-json-version }}
        do_current_versions_match: ${{ steps.compare-current-versions.outputs.do_current_versions_match }}
        does_current_match_next: ${{ steps.compare-current-to-next-release.outputs.does_current_match_next }}
        does_next_match_updated: ${{ steps.get-updated-version.outputs.does_next_match_updated }}

    # - name: Modify a JSON key value in place
    #   id: update-json-in-place
    #   shell: bash
    #   run: |
    #     echo "special thanks to this person on stack overflow ... "
    #     echo "https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place "
    #     tmp=$(mktemp)
    #     jq '.my_custom_version = "ami-02d8sdfsdf"' my-custom-variables.json > "$tmp" && mv "$tmp" my-custom-variables.json
