name: 'Get Next Semver'
description: 'Get the next semantic version'
author: 'rwaight'
branding:
  icon: 'info'
  color: 'blue'
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings

inputs:
  gh-token:
    description: >-
      The `GITHUB_TOKEN` or a `repo` scoped Personal Access Token (PAT) that is used to run
      the `gh release` command depending on permissions granted to the default GitHub token.
    required: true
    default: ${{ github.token }}
  include-drafts:
    description: 'Include draft releases in the search, defaults to false. Only used with the `gh-release` strategy.'
    required: false
    default: 'false'
  include-pre-releases:
    description: 'Include pre-releases in the search, defaults to false unless the release-type is `pre*`.'
    required: false
    default: 'false'
  pre-release-id:
    description: >-
      Pre-release identifier (only for pre-release builds).
      The only tested pre-release identifier is `rc` at this time.
    required: false
    default: 'rc'
  release-type:
    description: >-
      The release type, should be one of: major, minor, patch, prerelease, premajor, preminor, prepatch, or pretoprod. 
      For production releases, select the appropriate major, minor, or patch. 
      To convert a prerelease to production, select pretoprod (example: change 0.2.1-rc1 to 0.2.1). 
      For prereleases, select prerelease to increment an existing prerelease (example: increment 0.2.1-rc1 to 0.2.1-rc2); 
      select premajor to create a new premajor prerelease (example: increment 0.2.1 to 1.0.0-rc1);
      select preminor to create a new preminor prerelease (example: increment 0.2.1 to 0.3.0-rc1); or 
      select prepatch to create a new prepatch prerelease (example: increment 0.2.1 to 0.2.2-rc1). 
      Note that the only tested pre-release identifier is `rc` at this time.
    required: true
    default: 'not-set'
  strategy:
    description: >-
      The strategy to use for getting the version information, options:
      - 'branch-tag': Use the latest tag from the branch
      - 'repo-tag': Use the latest tag from the all branches in the repo
      - 'gh-release': Use the latest release from the repo
    required: false
    default: 'branch-tag'
  verbose:
    description: 'Determine if the action should run verbose tasks, defaults to false. '
    required: false
    default: 'false'

outputs:
  current-tag:
    description: "The current tag from the repo."
    value: ${{ steps.get-current-tag.outputs.current-tag-version }}
  current-version:
    description: "The current GitHub release version in the repo."
    value: ${{ steps.get-current-release.outputs.current-release-version }}
  next-tag:
    description: "The calculated next-release tag in the repo, based on the provided inputs."
    value: ${{ steps.set-next-tag.outputs.next-tag-version }}
  next-version:
    description: "The calculated next version, without the 'v' prefix, based on the 'next-tag'."
    value:  ${{ steps.set-next-version.outputs.next-version-number }}
  is-next-prerelease:
    description: "If the calculated next-release version is a prerelease (true) or not (false), based on the provided inputs."
    value: ${{ steps.set-next-tag.outputs.is-next-prerelease }}

runs:
  using: "composite"
  # Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  steps:
    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error file=get-next-semver,title=⛔ error::This action supports Linux only"
        exit 1

    - name: Greet the triggering_actor
      if: inputs.verbose=='true'
      shell: bash
      run: echo Hello ${{ github.triggering_actor }}, the verbose variable is set to true.

    - name: Verbose | Print the release-type
      if: inputs.verbose=='true'
      id: verbose-print-release-type
      shell: bash
      run: | 
        ## Print the inputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'verbose-print-release-type' step. "
        echo ""
        echo "release-type is:  ${{ inputs.release-type }} "
        ##
        echo "completing the 'verbose-print-release-type' step. "

    - name: Validate the release-type input
      # https://github.com/orgs/community/discussions/25252#discussioncomment-3247116
      id: validate-input-release-type
      if: |
        contains('major', inputs.release-type) ||
        contains('minor', inputs.release-type) ||
        contains('patch', inputs.release-type) ||
        contains('prerelease', inputs.release-type) ||
        contains('premajor', inputs.release-type) ||
        contains('preminor', inputs.release-type) ||
        contains('prepatch', inputs.release-type) ||
        contains('pretoprod', inputs.release-type)
      shell: bash
      run: |
        ## Validate the release-type input
        ## the double number signs below are for line spacing and readability only
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'validate-input-release-type' step. "
            echo "release-type is:  ${{ inputs.release-type }} "
            echo "::notice file=get-next-semver,title=validate-input-release-type::The 'release-type' is valid."
        fi
        ##

    - name: Error if the release-type input is incorrect
      id: error-incorrect-release-type
      if: ${{ !contains(fromJSON('["major", "minor", "patch", "prerelease", "premajor", "preminor", "prepatch", "pretoprod"]'), inputs.release-type) }}
      shell: bash
      run: |
        ## Error if the release-type input is incorrect
        ## the double number signs below are for line spacing and readability only
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'error-incorrect-release-type. "
            echo "release-type is:  ${{ inputs.release-type }} "
        echo "::error file=get-next-semver,title=⛔ error-incorrect-release-type,hint::Invalid 'release-type', must be one of: major, minor, patch, prerelease, premajor, preminor, prepatch, or pretoprod"
        echo "completing the 'error-incorrect-release-type' step. "
        exit 1

    # - name: Validate the release-type input
    #   # https://github.com/orgs/community/discussions/25252#discussioncomment-3247116
    #   id: validate-input-release-type-2
    #   if: ${{ !contains(fromJSON('["major", "minor", "patch", "pre"]'), inputs.release-type) }}
    #   # the below if statement does not work
    #   # if: | 
    #   #   ${{ !contains(inputs.release-type, 'major') }} || 
    #   #   ${{ !contains(inputs.release-type, 'minor') }} || 
    #   #   ${{ !contains(inputs.release-type, 'patch') }} || 
    #   #   ${{ !contains(inputs.release-type, 'pre') }}
    #   shell: bash
    #   run: |
    #     echo "::error file=get-next-semver,title=⛔ validate-input-release-type-2::Invalid 'release-type', must be one of: major, minor, patch, premajor, preminor, prepatch, or prerelease"
    #     #exit 1

    - name: Verbose | Print the inputs
      if: inputs.verbose=='true'
      id: verbose-print-inputs
      shell: bash
      run: | 
        ## Print the inputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'verbose-print-inputs' step. "
        echo ""
        echo "include-drafts is      :  ${{ inputs.include-drafts }} "
        echo "include-pre-releases is:  ${{ inputs.include-pre-releases }} "
        echo "pre-release-id is      :  ${{ inputs.pre-release-id }} "
        echo "release-type is        :  ${{ inputs.release-type }} "
        echo "strategy is            :  ${{ inputs.strategy }} "
        echo "verbose is             :  ${{ inputs.verbose }} "
        ##
        echo "completing the 'verbose-print-inputs' step. "

    - name: Notice | The pre-release-id value is blank
      if: inputs.pre-release-id==''
      id: blank-pre-release-id
      shell: bash
      run: | 
        ## Ensure the pre-release-id is not blank
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'blank-pre-release-id' step. "
        echo ""
        echo "::notice file=get-next-semver,title=blank-pre-release-id::The pre-release-id value is blank, it is not using the default value."
        echo "completing the 'blank-pre-release-id' step. "

    - name: Add inputs to the environment
      id: add-inputs-to-env
      shell: bash
      run: | 
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo " Setting input 'include-drafts' to env var 'INCLUDE_DRAFTS'. "; fi
        echo "INCLUDE_DRAFTS=${{ inputs.include-drafts }}" >> $GITHUB_ENV
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo " Setting input 'include-pre-releases' to env var 'INCLUDE_PRE_RELEASES'. "; fi
        echo "INCLUDE_PRE_RELEASES=${{ inputs.include-pre-releases }}" >> $GITHUB_ENV
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo " Setting input 'pre-release-id' to env var 'PRE_RELEASE_ID'. "; fi
        echo "PRE_RELEASE_ID=${{ inputs.pre-release-id }}" >> $GITHUB_ENV
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo " Setting input 'release-type' to env var 'RELEASE_TYPE'. "; fi
        echo "RELEASE_TYPE=${{ inputs.release-type }}" >> $GITHUB_ENV
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo " Setting input 'strategy' to env var 'STRATEGY'. "; fi
        echo "STRATEGY=${{ inputs.strategy }}" >> $GITHUB_ENV
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo " Setting input 'verbose' to env var 'VERBOSE'. "; fi
        echo "VERBOSE=${{ inputs.verbose }}" >> $GITHUB_ENV
        ##
        echo "The 'add-inputs-to-env' step has finished."

    - name: Determine if pre-releases are included
      id: determine-prereleases
      shell: bash
      run: | 
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ env.RELEASE_TYPE }}' == 'prerelease' ]; then
            echo "the 'release-type' is 'prerelease', setting 'prerelease_eval' to true. "
            prerelease_eval=true
        elif [[ "${{ env.RELEASE_TYPE }}" == "pre"* ]]; then
            echo "the 'release-type' is one of 'premajor/preminor/prepatch/pretoprod', setting 'prerelease_eval' to true. "
            prerelease_eval=true
            # echo "capturing the latest tag from the CLI, as the 'release-type' is one of 'premajor/preminor/prepatch'. "
            # https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash
        elif [ '${{ env.INCLUDE_PRE_RELEASES }}' == 'true' ]; then
            echo "the input 'include-pre-releases' is true, setting 'prerelease_eval' to true. "
            prerelease_eval=true
        else
            echo "not including pre-releases, setting 'prerelease_eval' to false. "
            prerelease_eval=false
        fi
        ##
        echo "setting the value of 'prerelease_eval' to '${prerelease_eval}' and sending it to GitHub output"
        echo "prerelease_eval=${prerelease_eval}" >> $GITHUB_ENV
        echo "prerelease_eval=${prerelease_eval}" >> $GITHUB_OUTPUT
        ##
        echo "The 'determine-prereleases' step has finished."

    - name: Get the current release version
      id: get-current-release
      shell: bash
      run: |
        ## Get the current release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'get-current-release' step. "
            echo ""
            echo "Using the GitHub CLI to print release information"
            echo "See https://cli.github.com/manual/gh_release_list for information about the command. "
            echo ""
            echo "Verbose mode enabled, running additional 'gh release' commands"
            echo ""
            echo "::group::running 'gh release list' ... "
            gh release list
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts' ... "
            gh release list --exclude-drafts
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases' ... "
            gh release list --exclude-drafts --exclude-pre-releases
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r \".[].tagName\"' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName"
            echo "::endgroup::"
            echo ""
            echo "To learn more about using the GitHub CLI with workflows... "
            echo "See https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows "
            echo ""
        fi
        ##
        if [ '${{ inputs.strategy }}' == 'branch-tag' ]; then
            ##
            echo "Capturing branch tag information using 'git describe --tags --first-parent' with the '--match' option "
            if [ '${{ env.prerelease_eval }}' == 'false' ]; then
                echo "    and excluding pre-releases ... "
                echo ""
                echo "    using the command:    git describe --tags --match 'v*.*.*' --first-parent --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --first-parent --abbrev=0)
            elif [ '${{ env.prerelease_eval }}' == 'true' ]; then
                echo "    and including pre-releases using the '${{ inputs.pre-release-id }}' identifier ... "
                echo ""
                echo "    using the command:    git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --first-parent --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --first-parent --abbrev=0)
            else
                # this should never happen
                echo "the ELSE statement is running, defaulting to excluding pre-releases "
                echo "    using the command:    git describe --tags --match 'v*.*.*' --first-parent --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --first-parent --abbrev=0)
            fi
            ##
        elif [ '${{ inputs.strategy }}' == 'gh-release' ]; then
            ##
            echo "capturing the latest-release from the GitHub CLI "
            if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
                echo "capturing the latest pre-release from the GitHub CLI, as the 'release-type' is 'prerelease'. "
                current_release_version=$(gh release list --exclude-drafts --limit 1 --json tagName | jq -r ".[].tagName")
            elif [[ "${{ inputs.release-type }}" == "pre"* ]]; then
                echo "capturing the latest premajor/preminor/prepatch/pretoprod from the GitHub CLI, as the 'release-type' is one of 'premajor/preminor/prepatch/pretoprod'. "
                current_release_version=$(gh release list --exclude-drafts --limit 1 --json tagName | jq -r ".[].tagName")
                # https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash
            else
                echo "capturing the latest (current) release from the GitHub CLI "
                current_release_version=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName")
            fi
            ##
        elif [ '${{ inputs.strategy }}' == 'repo-tag' ]; then
            ##
            echo "Capturing repo tag information using 'git describe --tags' with the '--match' option "
            if [ '${{ env.prerelease_eval }}' == 'false' ]; then
                echo "    and excluding pre-releases ... "
                echo ""
                echo "    using the command:    git describe --tags --match 'v*.*.*' --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --abbrev=0)
            elif [ '${{ env.prerelease_eval }}' == 'true' ]; then
                echo "    and including pre-releases using the '${{ inputs.pre-release-id }}' identifier ... "
                echo ""
                echo "    using the command:    git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --abbrev=0)
            else
                # this should never happen
                echo "the ELSE statement is running, defaulting to excluding pre-releases "
                echo "    using the command:    git describe --tags --match 'v*.*.*' --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --abbrev=0)
            fi
            ##
        else
            ##
            echo "the ELSE statement is running, defaulting to the 'branch tag' strategy "
            echo "Capturing branch tag information using 'git describe --tags' with the '--match' option "
            if [ '${{ env.prerelease_eval }}' == 'false' ]; then
                echo "    and excluding pre-releases ... "
                echo ""
                echo "    using the command:    git describe --tags --match 'v*.*.*' --first-parent --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --first-parent --abbrev=0)
            elif [ '${{ env.prerelease_eval }}' == 'true' ]; then
                echo "    and including pre-releases using the '${{ inputs.pre-release-id }}' identifier ... "
                echo ""
                echo "    using the command:    git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --first-parent --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --first-parent --abbrev=0)
            else
                # this should never happen
                echo "the ELSE statement is running, defaulting to excluding pre-releases "
                echo "    using the command:    git describe --tags --match 'v*.*.*' --first-parent --abbrev=0 "
                current_release_version=$(git describe --tags --match 'v*.*.*' --first-parent --abbrev=0)
            fi
            ##
        fi
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "current_release_version: $current_release_version"
            echo "writing the 'current_release_version' to the environment and GitHub output"
        fi
        echo "current_release_version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current_release_version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The current release version of this repo is \`$current_release_version\`"
            echo "writing $current_release_version to the 'current-release-version' GitHub output"
        fi
        echo "current-release-version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current-release-version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'get-current-release' step. "; fi
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Get the current tag
      id: get-current-tag
      shell: bash
      run: |
        ## Get the current tag
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'get-current-tag' step. "
            echo ""
            echo "Using the CLI to get tag information"
            echo ""
            echo "Verbose mode enabled, running additional 'git describe' commands"
            echo ""
            echo "::group::running 'git describe --abbrev=0 --tags' ... "
            echo "this command will get the tag from the current branch"
            git describe --abbrev=0 --tags
            echo "::endgroup::"
            echo ""
            echo "::group::running 'git describe --tags `git rev-list --tags --max-count=1`' ... "
            echo "this command will get tags across all branches, not just the current branch"
            git describe --tags `git rev-list --tags --max-count=1`
            echo "::endgroup::"
            echo ""
            echo "::group::running 'git describe --tags' ... "
            git describe --tags
            echo "::endgroup::"
            echo ""
            echo "Verbose mode enabled, running additional 'git tag' commands"
            echo ""
            echo "::group::running 'git tag --sort=-taggerdate | tail -1' ... "
            echo "this command will sort the tags by '-taggerdate' "
            git tag --sort=-taggerdate | tail -1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'git tag --sort=committerdate | grep -o 'v.*' | sort -r | head -1' ... "
            echo "this command will sort the tags by committerdate "
            git tag --sort=committerdate | grep -o 'v.*' | sort -r | head -1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'git tag -l | tail -1' ... "
            echo "this command will list the tags and grab the last entry "
            git tag -l | tail -1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'git tag -l --sort=-version:refname \"v*\" | head -1' ... "
            echo "this command will list and sort the tags starting with 'v*' and grab the first entry "
            git tag -l --sort=-version:refname "v*" | head -1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'git tag -l --sort=-version:refname \"v*.*.*\" | head -1' ... "
            echo "this command will list and sort the tags starting with 'v*.*.*' and grab the first entry "
            git tag -l --sort=-version:refname "v*.*.*" | head -1
            echo "::endgroup::"
            echo ""
            echo "To learn more about using the 'git tag' and 'git describe' commands with workflows... "
            echo "See: "
            echo "     - https://git-scm.com/book/en/v2/Git-Basics-Tagging "
            echo "     - https://git-scm.com/docs/git-tag "
            echo "     - https://git-scm.com/docs/git-describe "
            echo ""
        fi
        ##
        if [ '${{ inputs.strategy }}' == 'branch-tag' ]; then
            ##
            echo "Capturing branch tag information using 'git describe --tags --first-parent' with the '--match' option "
            if [ '${{ env.prerelease_eval }}' == 'false' ]; then
                echo "    and excluding pre-releases ... "
                current_tag_version=$(git describe --tags --match 'v*.*.*' --abbrev=0 --first-parent `git rev-list --tags --max-count=1 --branches`)
            elif [ '${{ env.prerelease_eval }}' == 'true' ]; then
                echo "    and including pre-releases using the '${{ inputs.pre-release-id }}' identifier ... "
                current_tag_version=$(git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --abbrev=0 --first-parent `git rev-list --tags --max-count=1 --branches`)
            else
                # this should never happen
                echo "the ELSE statement is running, defaulting to excluding pre-releases "
                current_tag_version=$(git describe --tags --match 'v*.*.*' --abbrev=0 --first-parent `git rev-list --tags --max-count=1 --branches`)
            fi
            ##
        elif [ '${{ inputs.strategy }}' == 'repo-tag' ]; then
            ##
            echo "Capturing repo tag information using 'git describe --tags' with the '--match' option "
            echo ""
            echo "This step uses 'git describe' with 'git rev-list' to get tags across all branches, not just the current branch"
            if [ '${{ env.prerelease_eval }}' == 'false' ]; then
                echo "    and excluding pre-releases ... "
                current_tag_version=$(git describe --tags --match 'v*.*.*' `git rev-list --tags --max-count=1`)
            elif [ '${{ env.prerelease_eval }}' == 'true' ]; then
                echo "    and including pre-releases using the '${{ inputs.pre-release-id }}' identifier ... "
                current_tag_version=$(git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' `git rev-list --tags --max-count=1`)
            else
                # this should never happen
                echo "the ELSE statement is running, defaulting to excluding pre-releases "
                current_tag_version=$(git describe --tags --match 'v*.*.*' `git rev-list --tags --max-count=1`)
            fi
            ##
        else
            echo "the ELSE statement is running, which will get the tag for the gh-release strategies "
            echo "capturing the latest (current) tag from the CLI "
            ## current_tag_version=$(git describe --tags `git rev-list --tags --max-count=1`)
            echo ""
            echo "This step uses 'git describe' with 'git rev-list' to get tags across all branches, not just the current branch"
            if [ '${{ env.prerelease_eval }}' == 'false' ]; then
                echo "    and excluding pre-releases ... "
                current_tag_version=$(git describe --tags --match 'v*.*.*' --abbrev=0 --first-parent `git rev-list --tags --max-count=1`)
            elif [ '${{ env.prerelease_eval }}' == 'true' ]; then
                echo "    and including pre-releases using the '${{ inputs.pre-release-id }}' identifier ... "
                current_tag_version=$(git describe --tags --match 'v*.*.*' --match 'v*.*.*-${{ inputs.pre-release-id }}*' --abbrev=0 --first-parent `git rev-list --tags --max-count=1`)
                ## current_tag_version=$(git describe --tags `git rev-list --tags --max-count=1`)
                ## https://stackoverflow.com/questions/229551/how-to-check-if-a-string-contains-a-substring-in-bash
            else
                # this should never happen
                echo "the ELSE statement is running, defaulting to excluding pre-releases "
                current_tag_version=$(git describe --tags --match 'v*.*.*' --abbrev=0 --first-parent `git rev-list --tags --max-count=1`)
            fi
            ##
        fi
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "current_tag_version: $current_tag_version"
            echo "writing the 'current_tag_version' to the environment and GitHub output"
        fi
        echo "current_tag_version=${current_tag_version}" >> "$GITHUB_OUTPUT"
        echo "current_tag_version=${current_tag_version}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The current tag of this repo is \`$current_tag_version\`"
            echo "writing $current_tag_version to the 'get-current-tag' GitHub output"
        fi
        echo "current-tag-version=${current_tag_version}" >> "$GITHUB_OUTPUT"
        echo "current-tag-version=${current_tag_version}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'get-current-tag' step. "; fi
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Compare the current tag to the current release version
      id: compare-tag-to-current-release
      shell: bash
      run: |
        ## Compare the current release version to the current tag version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'compare-tag-to-current-release' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
            echo "current_tag_version is    :  ${{ env.current_tag_version }} "
        fi
        ##
        if [ '${{ env.current_release_version }}' == '${{ env.current_tag_version }}' ]; then
            echo "the 'current_release_version' is set to '${{ env.current_release_version }}' and matches "
            echo "  the 'current_tag_version' which is set to '${{ env.current_tag_version }}'. "
            current_tag_and_release_match=true
        else
            echo "the 'current_release_version' is set to '${{ env.current_release_version }}' and DOES NOT MATCH "
            echo "  the 'current_tag_version' which is set to '${{ env.current_tag_version }}'. "
            current_tag_and_release_match=false
        fi
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "setting the value of 'does_current_tag_match_current_release' to '${current_tag_and_release_match}' and sending it to GitHub output"
        fi
        echo "does_current_tag_match_current_release=${current_tag_and_release_match}" >> "$GITHUB_OUTPUT"
        echo "does_current_tag_match_current_release=${current_tag_and_release_match}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The does_current_tag_match_current_release variable has been set to \`$current_tag_and_release_match\`"
            echo "writing $current_tag_and_release_match to the 'does-tag-match-release' GitHub output"
        fi
        echo "does-tag-match-release=${current_tag_and_release_match}" >> "$GITHUB_OUTPUT"
        echo "does-tag-match-release=${current_tag_and_release_match}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'compare-tag-to-current-release' step. "; fi
      env:
        current_tag_version: ${{ steps.get-current-tag.outputs.current-tag-version }}
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}

    - name: Set the next tag version
      id: set-next-tag
      shell: bash
      run: |
        ## Set the next tag version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'set-next-tag' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
            echo "pre-release-id is         :  ${{ inputs.pre-release-id }} "
            echo "release-type is           :  ${{ inputs.release-type }} "
            echo ""
            echo "::group::printing the syntax to bump '${{ inputs.release-type }}' ... "
            if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
                ## echo "$version" | awk 'BEGIN{FS=OFS="-${{ inputs.release-type }}"} {$2+=1} 1'
                echo "the syntax to bump 'prerelease' is: "
                ###echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\"-rc\"} {\$2+=1} 1'"
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\"-${{ inputs.pre-release-id }}\"} {\$2+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'patch' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
                echo "the syntax to bump 'patch' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$3+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'minor' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
                echo "the syntax to bump 'minor' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$2+=1;\$3=0} 1'"
            elif [ '${{ inputs.release-type }}' == 'major' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'
                echo "the syntax to bump 'major' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$1+=1;\$2=0;\$3=0} 1'"
            elif [ '${{ inputs.release-type }}' == 'prepatch' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1' | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
                echo "the syntax to bump 'prepatch' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$3+=1} 1' | awk 'BEGIN{FS=OFS=\"-${{ inputs.pre-release-id }}\"} {\$2+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'preminor' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1' | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
                echo "the syntax to bump 'preminor' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$2+=1;\$3=0} 1' | awk 'BEGIN{FS=OFS=\"-${{ inputs.pre-release-id }}\"} {\$2+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'premajor' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1' | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
                echo "the syntax to bump 'premajor' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$1+=1;\$2=0;\$3=0} 1' | awk 'BEGIN{FS=OFS=\"-${{ inputs.pre-release-id }}\"} {\$2+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'pretoprod' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} { print $1 }'
                echo "the syntax to remove the prerelease ID for 'pretoprod' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\"-${{ inputs.pre-release-id }}\"} { print \$1 }'"
            else
                echo "something is wrong with a conditional. "
                echo "::warning file=get-next-semver,title=set-next-tag::something is wrong with a conditional in the VERBOSE 'else' statement in the 'set-next-tag' step."
                echo "this is the VERBOSE 'else' statement in the 'set-next-tag' step. "
            fi
            echo "::endgroup::"
        fi
        ##
        if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
            ##echo "updating the next rc-version for a prerelease. "
            echo "updating the next ${{ inputs.pre-release-id }}-version for a prerelease. "
            echo "The 'prerelease' option will increment the prerelease number (example: 0.2.1-rc1 becomes 0.2.1-rc2)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-${{ inputs.pre-release-id }}"} {$2+=1} 1')
            ##next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1')
            is_next_prerelease=true
            ##
        elif [ '${{ inputs.release-type }}' == 'patch' ]; then
            echo "updating the next-tag-version for a patch release. "
            echo "The 'patch' option will increment the version by a single patch version (example: 0.2.1 becomes 0.2.2)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            is_next_prerelease=false
            ##
        elif [ '${{ inputs.release-type }}' == 'minor' ]; then
            echo "updating the next-tag-version for a minor release. "
            echo "The 'minor' option will increment the version by a single minor version (example: 0.2.1 becomes 0.3.0)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1')
            is_next_prerelease=false
            ##
        elif [ '${{ inputs.release-type }}' == 'major' ]; then
            echo "updating the next-tag-version for a major release. "
            echo "The 'major' option will increment the version by a single major version (example: 0.2.1 becomes 1.0.0)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1')
            is_next_prerelease=false
            ##
        elif [ '${{ inputs.release-type }}' == 'prepatch' ]; then
            echo "updating the next-tag-version for a prepatch release. "
            echo "The 'prepatch' option will create a new prepatch version (example: 0.2.1 becomes 0.2.2-rc1)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1' | awk 'BEGIN{FS=OFS="-${{ inputs.pre-release-id }}"} {$2+=1} 1')
            is_next_prerelease=true
            ##
        elif [ '${{ inputs.release-type }}' == 'preminor' ]; then
            echo "updating the next-tag-version for a preminor release. "
            echo "The 'preminor' option will create a new preminor version (example: 0.2.1 becomes 0.3.0-rc1)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1' | awk 'BEGIN{FS=OFS="-${{ inputs.pre-release-id }}"} {$2+=1} 1')
            is_next_prerelease=true
            ##
        elif [ '${{ inputs.release-type }}' == 'premajor' ]; then
            echo "updating the next-tag-version for a premajor release. "
            echo "The 'premajor' option will create a new premajor version (example: 0.2.1 becomes 1.0.0-rc1)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1' | awk 'BEGIN{FS=OFS="-${{ inputs.pre-release-id }}"} {$2+=1} 1')
            is_next_prerelease=true
            ##
        elif [ '${{ inputs.release-type }}' == 'pretoprod' ]; then
            echo "removing the prerelease ID to prepare for the next production version. "
            echo "The 'pretoprod' option will remove the prerelease ID (example: 0.2.2-rc1 becomes 0.2.2)"
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-${{ inputs.pre-release-id }}"} { print $1 }')
            ##next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-rc"} { print $1 }')
            is_next_prerelease=false
            ##
        else
            echo "::warning file=get-next-semver,title=set-next-tag::something is wrong with a conditional, incrementing the version as a PATCH release during 'set-next-tag'."
            echo "something is wrong with a conditional, incrementing the version as a PATCH release.. "
            next_tag_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            echo "something is wrong with a conditional, setting 'is_next_prerelease' to 'false' .. "
            is_next_prerelease=false
        fi
        ## check for a valid version here...
        ##
        VERSION="${next_tag_version}"
        ##  
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.verbose }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE"
            fi
        else
            ## Fail the workflow if the '${next_tag_version}' is not valid
            echo "::error file=get-next-semver,title=⛔ set-next-tag,hint::Unable to set the tag version to '$VERSION', it is not in a valid format"
            exit 1
        fi
        if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
        ##
        echo "next_tag_version=${next_tag_version}" >> "$GITHUB_OUTPUT"
        echo "next_tag_version=${next_tag_version}" >> $GITHUB_ENV
        #
        ## eventually, should check to make sure '${is_next_prerelease}' equals '${pre}'
        echo "is_next_prerelease=${is_next_prerelease}" >> "$GITHUB_OUTPUT"
        echo "is_next_prerelease=${is_next_prerelease}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The next tag version has been set to \`$next_tag_version\`"
            echo "writing $next_tag_version to the 'next-tag-version' GitHub output"
            ##
            echo "The 'is next prerelease' variable has been set to \`$is_next_prerelease\`"
            echo "writing $is_next_prerelease to the 'is-next-prerelease' GitHub output"
        fi
        echo "next-tag-version=${next_tag_version}" >> "$GITHUB_OUTPUT"
        echo "next-tag-version=${next_tag_version}" >> $GITHUB_ENV
        #
        echo "is-next-prerelease=${is_next_prerelease}" >> "$GITHUB_OUTPUT"
        echo "is-next-prerelease=${is_next_prerelease}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'set-next-tag' step. "; fi
      env:
        #current_tag_version: ${{ steps.get-current-tag.outputs.current-tag-version }}
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}
        ## Increment a PRERELEASE '-rc' version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
        ## Increment a PATCH version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
        ## Increment a MINOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
        ## Increment a MAJOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'
        ## Create a PREPATCH version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1' | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
        ## Create a PREMINOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1' | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
        ## Create a PREMAJOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1' | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
        ## Remove the prerelease ID:
        ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} { print $1 }'

    - name: Set the next release version number
      # remove 'v' from the 'next_tag_version'
      # syntax is: `echo "${VERSION//v}"`
      # command: `next_ver_number=$(echo "${VERSION//v}")`
      id: set-next-version
      shell: bash
      run: |
        ## Set the next release version
        ## the double number signs below are for line spacing and readability only
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "starting the 'set-next-version' step. "; fi
        ##
        VERSION="${{ env.next_tag_version }}"
        ##
        if [[ $VERSION == v* ]]; then
            echo "Setting the next version number by removing the 'v' from the next tag version. "
            next_ver_number=$(echo "${VERSION//v}")
            echo "The next version number has been set to '${next_ver_number}' ... "
        else
            echo "this must mean that the 'next_tag_version' does not start with a 'v' "
            next_ver_number=${VERSION}
            echo "The next version number has been set to '${next_ver_number}' ... "
            echo "::warning file=get-next-semver,title=set-next-version::something strange is happening, the 'next_tag_version' does not start with a 'v'."
        fi
        ##
        echo "going to ensure that the next version number does not start with a 'v'. 'next_ver_number' is set to '$next_ver_number' "
        ##
        RE_NO_V='^([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $next_ver_number =~ $RE_NO_V ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            ##
            if [ '${{ inputs.verbose }}' == 'true' ]; then
                echo "next version tag info: "
                echo "   VERSION is: $VERSION "
                echo ""
                echo "next version number info: "
                echo "   next_ver_number is: $next_ver_number "
                echo "   RE_NO_V is        : $RE_NO_V "
                echo "           MAJOR is  : $MAJOR "
                echo "           MINOR is  : $MINOR "
                echo "           PATCH is  : $PATCH "
                echo "           PRERELEASE: $PRERELEASE "
            fi
        else
            ## Fail the workflow if the '${next_ver_number}' is not valid
            echo "::error file=get-next-semver,title=⛔ set-next-version,hint::Unable to set the next version number to a valid format."
            exit 1
        fi
        if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
        ##
        ## extra test
        if [[ $next_ver_number == v* ]]; then
            ## Fail the workflow if the '${next_ver_number}' is not valid
            echo "::error file=get-next-semver,title=⛔ set-next-version,hint::The next version number is not set to a valid format, it starts with a 'v'."
            exit 1    
        fi
        ##
        echo "is_next_number_pre=${pre}" >> "$GITHUB_OUTPUT"
        echo "is_next_number_pre=${pre}" >> $GITHUB_ENV
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The next_ver_number variable is valid and has been set to \`$next_ver_number\`"
            echo "writing $next_ver_number to the 'next-version-number' GitHub output"
            ##
            echo "The 'is next number prerelease' variable has been set to \`$is_next_number_pre\`"
            echo "writing $is_next_number_pre to the 'is-next-number-prerelease' GitHub output"
        fi
        echo "next-version-number=${next_ver_number}" >> "$GITHUB_OUTPUT"
        echo "next-version-number=${next_ver_number}" >> $GITHUB_ENV
        #
        echo "is-next-number-prerelease=${is_next_number_pre}" >> "$GITHUB_OUTPUT"
        echo "is-next-number-prerelease=${is_next_number_pre}" >> $GITHUB_ENV
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'set-next-version' step. "; fi
      # this did not work all the time
      # ## remove 'v' from the 'next_tag_version'
      # next_ver_number=$(echo "$VERSION" | awk 'BEGIN{FS=OFS="v"} { print $2 }')
      env:
        next_tag_version: ${{ steps.set-next-tag.outputs.next-tag-version }}

    - name: Validate the next tag version
      id: validate-next-release
      shell: bash
      run: |
        ## Validate the next tag version
        ## the double number signs below are for line spacing and readability only
        ##
        VERSION="${{ env.next_tag_version }}"
        ##  
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.verbose }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE"
            fi
        else
            ## Fail the workflow if the 'next-tag-version' is not valid
            echo "::error file=get-next-semver,title=⛔ validate-next-release,hint::Next tag version '$VERSION' is not in a valid format"
            exit 1
        fi
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'validate-next-release' step. "; fi
      env:
        next_tag_version: ${{ steps.set-next-tag.outputs.next-tag-version }}
        is_next_prerelease: ${{ steps.set-next-tag.outputs.is-next-prerelease }}

    - name: Validate the next version number
      id: validate-next-version-number
      shell: bash
      run: |
        ## Validate the next version number
        ## the double number signs below are for line spacing and readability only
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "starting the 'validate-next-version-number' step. "; fi
        ##
        NEXT_VER_NUMBER="${{ env.next_version_number }}"
        ##  
        RE_NO_V='^([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $NEXT_VER_NUMBER =~ $RE_NO_V ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.verbose }}' == 'true' ]; then
                echo "next version number info: "
                echo "   next_ver_number is: $next_ver_number "
                echo "   RE_NO_V is        : $RE_NO_V "
                echo "           MAJOR is  : $MAJOR "
                echo "           MINOR is  : $MINOR "
                echo "           PATCH is  : $PATCH "
                echo "           PRERELEASE: $PRERELEASE "
            fi
        else
            ## Fail the workflow if the 'next-version-number' is not valid
            echo "::error file=get-next-semver,title=⛔ validate-next-version-number,hint::Next version number '$NEXT_VER_NUMBER' is not in a valid format"
            exit 1
        fi
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'validate-next-version-number' step. "; fi
      env:
        next_version_number: ${{ steps.set-next-version.outputs.next-version-number }}
        is_next_number_prerelease: ${{ steps.set-next-version.outputs.is-next-number-prerelease }}

    - name: Compare the current release version to the next tag version
      id: compare-current-to-next-release
      shell: bash
      run: |
        ## Compare the current release version to the next tag version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'compare-current-to-next-release' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
            echo "next_tag_version is       :  ${{ env.next_tag_version }} "
        fi
        ##
        if [ '${{ env.current_release_version }}' == '${{ env.next_tag_version }}' ]; then
            echo "the 'current_release_version' is set to '${{ env.current_release_version }}' and matches "
            echo "  the 'next_tag_version' which is set to '${{ env.next_tag_version }}'. "
            current_and_next_match=true
        else
            echo "the 'current_release_version' is set to '${{ env.current_release_version }}' and DOES NOT MATCH "
            echo "  the 'next_tag_version' which is set to '${{ env.next_tag_version }}'. "
            current_and_next_match=false
        fi
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "setting the value of 'does_current_match_next' to '${current_and_next_match}' and sending it to GitHub output"
        fi
        echo "does_current_match_next=${current_and_next_match}" >> "$GITHUB_OUTPUT"
        echo "does_current_match_next=${current_and_next_match}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The does_current_match_next variable has been set to \`$current_and_next_match\`"
            echo "writing $current_and_next_match to the 'does-current-match-next' GitHub output"
        fi
        echo "does-current-match-next=${current_and_next_match}" >> "$GITHUB_OUTPUT"
        echo "does-current-match-next=${current_and_next_match}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'compare-current-to-next-release' step. "; fi
      env:
        #current_tag_version: ${{ steps.get-current-tag.outputs.current-tag-version }}
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}
        next_tag_version: ${{ steps.set-next-tag.outputs.next-tag-version }}

    - name: Compare the the next version match the next tag version
      id: compare-next-version-to-next-tag
      shell: bash
      run: |
        ## Compare the the next version match the next tag version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'compare-next-version-to-next-tag' step. "
            echo "next-tag-version is       :  ${{ env.next-tag-version }} "
            echo "next-version-number is    :  ${{ env.next-version-number }} "
            echo "is-next-prerelease is     :  ${{ env.is-next-prerelease }} "
            echo "is-next-number-prerelease :  ${{ env.is-next-number-prerelease }} "
        fi
        ##
        if [ 'v${{ env.next-version-number }}' == '${{ env.next-tag-version }}' ]; then
            echo "the 'next-version-number' is set to '${{ env.next-version-number }}' and, when prepending with 'v', does match "
            echo "  the 'next-tag-version' which is set to '${{ env.next-tag-version }}'. "
            next_version_and_tag_match=true
        else
            echo "the 'next-version-number' is set to '${{ env.next-version-number }}' and, when prepending with 'v', DOES NOT MATCH "
            echo "  the 'next-tag-version' which is set to '${{ env.next-tag-version }}'. "
            next_version_and_tag_match=false
        fi
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "setting the value of 'does_next_version_match_next_tag' to '${next_version_and_tag_match}' and sending it to GitHub output"
        fi
        echo "does_next_version_match_next_tag=${next_version_and_tag_match}" >> "$GITHUB_OUTPUT"
        echo "does_next_version_match_next_tag=${next_version_and_tag_match}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "The does_next_version_match_next_tag variable has been set to \`$next_version_and_tag_match\`"
            echo "writing ${next_version_and_tag_match} to the 'does-next-version-match-next-tag' GitHub output"
        fi
        echo "does-next-version-match-next-tag=${next_version_and_tag_match}" >> "$GITHUB_OUTPUT"
        echo "does-next-version-match-next-tag=${next_version_and_tag_match}" >> $GITHUB_ENV
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'compare-next-version-to-next-tag' step. "; fi
      env:
        is-next-prerelease: ${{ steps.set-next-tag.outputs.is-next-prerelease }}
        next-tag-version: ${{ steps.set-next-tag.outputs.next-tag-version }}
        is-next-number-prerelease: ${{ steps.set-next-version.outputs.is-next-number-prerelease }}
        next-version-number: ${{ steps.set-next-version.outputs.next-version-number }}

    # - name: Error if the current version matches the next version
    #   id: error-matched-versions
    #   if: ( ${{ steps.compare-current-to-next-release.outputs.does-current-match-next }} == 'true' )
    #   #not working properly#if: ${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}
    #   #not working properly#if: ( '${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}' == 'true' )
    #   shell: bash
    #   run: |
    #     ## Error if the current version matches the next version
    #     ## the double number signs below are for line spacing and readability only
    #     ##
    #     if [ '${{ inputs.verbose }}' == 'true' ]; then
    #         echo "starting the 'error-matched-versions' step. "
    #         echo "does-current-match-next is:  ${{ env.does-current-match-next }} "
    #         echo "current-release-version is:  ${{ env.current-release-version }} "
    #         echo "next-tag-version is   :  ${{ env.next-tag-version }} "
    #     fi
    #     echo "::error file=get-next-semver,title=⛔ matched versions error::The current version matches the next version"
    #     exit 1
    #     if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'error-matched-versions' step. "; fi
    #   env: 
    #     current-release-version: ${{ steps.get-current-release.outputs.current-release-version }}
    #     next-tag-version: ${{ steps.set-next-tag.outputs.next-tag-version }}
    #     does-current-match-next: ${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}

    - name: Validate that the next version match the next tag version
      id: validate-next-versions-are-matched
      shell: bash
      run: |
        ## Validate that the next version match the next tag version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'validate-next-versions-are-matched' step. "
            echo "next-tag-version is             :  ${{ env.next-tag-version }} "
            echo "next-version-number is          :  ${{ env.next-version-number }} "
            echo "is-next-prerelease is           :  ${{ env.is-next-prerelease }} "
            echo "does-next-version-match-next-tag:  ${{ steps.compare-next-version-to-next-tag.outputs.does-next-version-match-next-tag }} "
        fi
        ##
        if [ '${{ steps.compare-next-version-to-next-tag.outputs.does-next-version-match-next-tag }}' == 'true' ]; then
            echo "Excellent, the next version number does match the next tag version. "
            if [ '${{ inputs.verbose }}' == 'true' ]; then
                echo "::notice file=get-next-semver,title=validate-next-versions-are-matched::Excellent, the next version number does match the next tag version."
            fi
        elif [ '${{ steps.compare-next-version-to-next-tag.outputs.does-next-version-match-next-tag }}' == 'false' ]; then
            echo "Uh oh! The next version number does not match the next tag version! "
            echo "::error file=get-next-semver,title=⛔ next version match error::The next version number does not the next tag version"
            exit 1
        else
            echo "::warning file=get-next-semver,title=validate-next-versions-are-matched::something strange is happening, this is the else statement of validate-next-versions-are-matched."
        fi
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'validate-next-versions-are-matched' step. "; fi
      env: 
        next-tag-version: ${{ steps.set-next-tag.outputs.next-tag-version }}
        is-next-prerelease: ${{ steps.set-next-tag.outputs.is-next-prerelease }}
        next-version-number: ${{ steps.set-next-version.outputs.next-version-number }}
        is-next-number-prerelease: ${{ steps.set-next-version.outputs.is-next-number-prerelease }}
        does-next-version-match-next-tag: ${{ steps.compare-next-version-to-next-tag.outputs.does-next-version-match-next-tag }}

    - name: Validate that the current version does not match the next version
      id: validate-version-not-matched
      #if: ( ${{ steps.compare-current-to-next-release.outputs.does-current-match-next }} != 'true' )
      #not working properly#if: ${{ steps.compare-current-to-next-release.outputs.does-current-match-next }} != 'true'
      #not working properly#if: ( '${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}' != 'true' )
      shell: bash
      run: |
        ## Validate that the current version does not match the next version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then
            echo "starting the 'validate-version-not-matched' step. "
            echo "does-tag-match-release is :  ${{ env.does-tag-match-release }} "
            echo "current-release-version is:  ${{ env.current-release-version }} "
            echo "current-tag-version is    :  ${{ env.current-tag-version }} "
            echo "does-current-match-next is:  ${{ env.does-current-match-next }} "
            echo "next-tag-version is       :  ${{ env.next-tag-version }} "
            echo "next-version-number is    :  ${{ env.next-version-number }} "
            echo "is-next-prerelease is     :  ${{ env.is-next-prerelease }} "
        fi
        ##
        if [ '${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}' == 'false' ]; then
            echo "Excellent, the current version does not match the next version. "
            if [ '${{ inputs.verbose }}' == 'true' ]; then
                echo "::notice file=get-next-semver,title=validate-version-not-matched::Excellent, the current version does not match the next version."
            fi
        elif [ '${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}' == 'true' ]; then
            echo "Uh oh! The current version matches the next version! "
            echo "::error file=get-next-semver,title=⛔ matched versions error::The current version matches the next version"
            exit 1
        else
            echo "::warning file=get-next-semver,title=validate-version-not-matched::something strange is happening, this is the else statement of validate-version-not-matched."
        fi
        ##
        if [ '${{ inputs.verbose }}' == 'true' ]; then echo "completing the 'validate-version-not-matched' step. "; fi
      env: 
        current-tag-version: ${{ steps.get-current-tag.outputs.current-tag-version }}
        current-release-version: ${{ steps.get-current-release.outputs.current-release-version }}
        next-tag-version: ${{ steps.set-next-tag.outputs.next-tag-version }}
        next-version-number: ${{ steps.set-next-version.outputs.next-version-number }}
        is-next-prerelease: ${{ steps.set-next-tag.outputs.is-next-prerelease }}
        does-current-match-next: ${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}
        does-tag-match-release: ${{ steps.compare-tag-to-current-release.outputs.does-tag-match-release }}

    - name: Verbose | Print the outputs
      if: inputs.verbose=='true'
      id: verbose-print-outputs
      shell: bash
      run: | 
        ## Print the outputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'verbose-print-outputs' step. "
        echo ""
        echo "Current release version information: "
        echo "current-release-version is:  ${{ env.current-release-version }} "
        echo "current-tag-version is    :  ${{ env.current-tag-version }} "
        echo ""
        echo "Next release version information: "
        echo "next-tag-version is      :  ${{ env.next-tag-version }} "
        echo "is-next-prerelease is    :  ${{ env.is-next-prerelease }} "
        echo "next-version-number is   :  ${{ env.next-version-number }} "
        echo "is-next-number-prerelease:  ${{ env.is-next-number-prerelease }} "
        echo ""
        echo "Current and next match results: "
        echo "does-current-match-next is:  ${{ env.does-current-match-next }} "
        echo ""
        echo "Current release and current tag match results: "
        echo "does-tag-match-release is:  ${{ env.does-tag-match-release }} "
        echo ""
        echo "Next version number and next tag match results: "
        echo "does-next-version-match-next-tag is:  ${{ env.does-next-version-match-next-tag }} "
        echo ""
        ##
        echo "completing the 'verbose-print-outputs' step. "
      env:
        current-tag-version: ${{ steps.get-current-tag.outputs.current-tag-version }}
        current-release-version: ${{ steps.get-current-release.outputs.current-release-version }}
        next-tag-version: ${{ steps.set-next-tag.outputs.next-tag-version }}
        is-next-prerelease: ${{ steps.set-next-tag.outputs.is-next-prerelease }}
        next-version-number: ${{ steps.set-next-version.outputs.next-version-number }}
        is-next-number-prerelease: ${{ steps.set-next-version.outputs.is-next-number-prerelease }}
        does-current-match-next: ${{ steps.compare-current-to-next-release.outputs.does-current-match-next }}
        does-tag-match-release: ${{ steps.compare-tag-to-current-release.outputs.does-tag-match-release }}
        does-next-version-match-next-tag: ${{ steps.compare-next-version-to-next-tag.outputs.does-next-version-match-next-tag }}
