name: 'Bump JSON version'
description: 'Bump a custom version field in a JSON file'
author: 'rwaight'
branding:
  icon: 'info'
  color: 'blue'
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings

inputs:
  gh-token:
    description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT), may be needed for the GitHub CLI. '
    required: true
    default: ${{ github.token }}
  gh-setup:
    description: 'Determine if the action should setup git with `git config`, defaults to false. '
    required: false
    default: 'false'
  gh-user-name:
    description: 'The GitHub user name for committing changes to the JSON vars file. '
    required: false
    #   keep 'github-actions[bot]' as default
    default: 'github-actions[bot]'
  gh-user-email:
    description: 'The GitHub user email for committing changes to the JSON vars file. '
    required: false
    #   keep '<41898282+github-actions[bot]@users.noreply.github.com>' as default
    default: '<41898282+github-actions[bot]@users.noreply.github.com>'
  json-vars-file:
    description: 'The JSON vars file, including the relative path in the repo. '
    required: true
    default: 'not-set'
  json-vars-field:
    description: 'The version field within the JSON vars file. '
    required: true
    default: 'not-set'
  release-type:
    description: 'The release type, should be one of: major, minor, patch, or prerelease. The only supported pre-release syntax is prepending "-rc" at this time. '
    required: true
    default: 'not-set'
    # should consider adding 'premajor', 'preminor', and 'prepatch' in the future
  my_action_debug:
    description: 'Determine if the workflow should run debug tasks, defaults to false. '
    required: false
    default: 'false'

outputs:
  current-release-version:
    description: "The current release version in the repo. "
    value: ${{ steps.get-current-release.outputs.current-release-version }}
  next-release-version:
    description: "The next release version in the repo. "
    value: ${{ steps.set-next-release.outputs.next-release-version }}
  old-json-version:
    description: "The old version in the JSON file. "
    value: ${{ steps.get-current-version.outputs.old-json-version }}
  new-json-version:
    description: "The new version in the JSON file. "
    value: ${{ steps.template-example-output.outputs.my_action_output }}

runs:
  using: "composite"
  # Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  steps:
    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error title=⛔ error hint::This action supports Linux only"
        exit 1

    - name: Greet the triggering_actor
      if: inputs.my_action_debug=='true'
      shell: bash
      run: echo Hello ${{ github.triggering_actor }}, the my_action_debug variable is set to true.

    - name: Validate the release-type input
      id: validate-input-release-type
      if: | 
        ${{ inputs.release-type != 'major' }} || ${{ inputs.release-type != 'minor' }} || 
        ${{ inputs.release-type != 'patch' }} || ${{ inputs.release-type != 'prerelease' }}
      shell: bash
      run: |
        echo "::error title=⛔ error hint::Invalid 'release-type', must be one of: major, minor, patch, or prerelease"
        exit 1

    - name: Debug | Print the inputs
      if: inputs.my_action_debug=='true'
      id: debug-print-inputs
      shell: bash
      run: | 
        ## Print the inputs if inputs.my_action_debug=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "gh-token SHOULD BE MASKED, but is set to ${{ inputs.gh-token }} "
        echo "json-vars-file is :  ${{ inputs.json-vars-file }} "
        echo "json-vars-field is:  ${{ inputs.json-vars-field }} "
        echo "release-type is   :  ${{ inputs.release-type }} "
        echo "my_action_debug is:  ${{ inputs.my_action_debug }} "
        ##

# migrate files from 'rw-updates-202403-v2' to this action

    - name: Checkout '${{ inputs.json-vars-file }}' from the commit tree
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        token: ${{ inputs.gh-token }}
        sparse-checkout: |
          .github
          ${{ inputs.json-vars-file }}
        #sparse-checkout-cone-mode: true
        sparse-checkout-cone-mode: false

    - name: Get the current value of the ${{ inputs.json-vars-field }} version field
      id: get-current-version
      shell: bash
      run: |
        ## Get the current value of ${{ inputs.json-vars-field }}
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'get-current-version' step. "
            echo "the syntax is 'MY_CUSTOM_VERSION=$(jq --raw-output .my_custom_version my-custom-variables.json)' "
        fi
        current_json_version=$(jq --raw-output .${{ inputs.json-vars-field }} ${{ inputs.json-vars-file }})
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "current_json_version: $current_json_version"
            echo "writing the 'current_json_version' to the environment and GitHub output"
        fi
        echo "current_json_version=$current_json_version" >> $GITHUB_ENV
        echo "current_json_version=$current_json_version" >> "$GITHUB_OUTPUT"
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "writing $current_json_version to the 'old-json-version' GitHub output"
        fi
        echo "old-json-version=$current_json_version" >> $GITHUB_ENV
        echo "old-json-version=$current_json_version" >> "$GITHUB_OUTPUT"
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'get-current-version' step. "; fi

    - name: Validate the current json version
      id: validate-current-version
      shell: bash
      run: |
        ## Validate the current json version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'set-next-release' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
        fi
        VERSION="${{ env.current_json_version }}"
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE"
            fi
        else
            ## Fail the workflow if the 'old-json-version' is not valid
            echo "::error::Current JSON version '$VERSION' is not in a valid format"
            exit 1
        fi
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'validate-current-version' step. "; fi
      env:
        current_json_version: ${{ steps.get-current-version.outputs.old-json-version }}

    - name: Get the current release version
      id: get-current-release
      shell: bash
      run: |
        ## Get the current release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'get-current-release' step. "
            echo ""
            echo "Using the GitHub CLI to print release information"
            echo "See https://cli.github.com/manual/gh_release_list for information about the command. "
            echo ""
            echo "Debug enabled, running additional 'gh release' commands"
            echo ""
            echo "::group::running 'gh release list' ... "
            gh release list
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts' ... "
            gh release list --exclude-drafts
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases' ... "
            gh release list --exclude-drafts --exclude-pre-releases
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r \".[].tagName\"' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName"
            echo "::endgroup::"
            echo ""
            echo "To learn more about using the GitHub CLI with workflows... "
            echo "See https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows "
            echo ""
        fi
        ##
        if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
            echo "capturing the latest pre-release from the GitHub CLI, as the 'release-type' is 'prerelease'. "
            current_release_version=$(gh release list --exclude-drafts --limit 1 --json tagName | jq -r ".[].tagName")
        else
            echo "capturing the latest (current) release from the GitHub CLI "
            current_release_version=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName")
        fi
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "current_release_version: $current_release_version"
            echo "writing the 'current_release_version' to the environment and GitHub output"
        fi
        echo "current_release_version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current_release_version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "The current release version of this repo is \`$current_release_version\`"
            echo "writing $current_release_version to the 'current-release-version' GitHub output"
        fi
        echo "current-release-version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current-release-version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'get-current-release' step. "; fi
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Compare the current json version to the current release version
      id: compare-current-versions
      shell: bash
      run: |
        ## Compare the current json version to the current release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'compare-current-versions' step. "
            echo "current_json_version is   :  ${{ env.current_json_version }} "
            echo "current_release_version is:  ${{ env.current_release_version }} "
        fi
        ##
        if [ '${{ env.current_json_version }}' == '${{ env.current_release_version }}' ]; then
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and matches "
            echo "  the 'current_release_version' which is set to '${{ env.current_release_version }}'. "
            current_version_match=true
        else
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and DOES NOT MATCH "
            echo "  the 'current_release_version' which is set to '${{ env.current_release_version }}'. "
            current_version_match=false
        fi
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "setting the value of 'do_current_versions_match' to '${current_version_match}' and sending it to GitHub output"
        fi
        echo "do_current_versions_match=${current_version_match}" >> "$GITHUB_OUTPUT"
        echo "do_current_versions_match=${current_version_match}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'compare-current-versions' step. "; fi
      env:
        current_json_version: ${{ steps.get-current-version.outputs.old-json-version }}
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}

    - name: Set the next release version
      id: set-next-release
      shell: bash
      run: |
        ## Set the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'set-next-release' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
            echo "release-type is           :  ${{ inputs.release-type }} "
            echo ""
            echo "::group::printing the syntax to bump '${{ inputs.release-type }}' ... "
            if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
                echo "the syntax to bump 'prerelease' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\"-rc\"} {\$2+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'patch' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
                echo "the syntax to bump 'patch' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$3+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'minor' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
                echo "the syntax to bump 'minor' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$2+=1;\$3=0} 1'"
            elif [ '${{ inputs.release-type }}' == 'major' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'
                echo "the syntax to bump 'major' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$1+=1;\$2=0;\$3=0} 1'"
            else
                echo "something is wrong with a conditional. "
                echo "this is the DEBUG 'else' statement in the 'set-next-release' step. "
            fi
            echo "::endgroup::"
        fi
        ##
        if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
            echo "updating the next rc-version for a prerelease. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'patch' ]; then
            echo "updating the next-version for a patch release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'minor' ]; then
            echo "updating the next-version for a minor release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'major' ]; then
            echo "updating the next-version for a major release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1')
            ##
        else
            echo "something is wrong with a conditional, incrementing the version as a PATCH release.. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
        fi
        echo "next_release_version=${next_release_version}" >> "$GITHUB_OUTPUT"
        echo "next_release_version=${next_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "The next release version has been set to \`$next_release_version\`"
            echo "writing $next_release_version to the 'next-release-version' GitHub output"
        fi
        echo "next-release-version=${next_release_version}" >> "$GITHUB_OUTPUT"
        echo "next-release-version=${next_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'set-next-release' step. "; fi
      env:
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}
        ## Increment a PRERELEASE '-rc' version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
        ## Increment a PATCH version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
        ## Increment a MINOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
        ## Increment a MAJOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'

    - name: Validate the next release version
      id: validate-next-release
      shell: bash
      run: |
        ## Validate the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        VERSION="${{ env.next_release_version }}"
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE"
            fi
        else
            ## Fail the workflow if the 'next-release-version' is not valid
            echo "::error::Next release version '$VERSION' is not in a valid format"
            exit 1
        fi
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'validate-next-release' step. "; fi
      env:
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Compare the current json version to the next release version
      id: compare-current-json-to-next-release
      shell: bash
      run: |
        ## Compare the current json version to the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'compare-current-json-to-next-release' step. "
            echo "current_json_version is:  ${{ env.current_json_version }} "
            echo "next_release_version is:  ${{ env.next_release_version }} "
        fi
        ##
        if [ '${{ env.current_json_version }}' == '${{ env.next_release_version }}' ]; then
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and matches "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            current_and_next_match=true
        else
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and DOES NOT MATCH "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            current_and_next_match=false
        fi
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "setting the value of 'does_current_match_next' to '${current_and_next_match}' and sending it to GitHub output"
        fi
        echo "does_current_match_next=${current_and_next_match}" >> "$GITHUB_OUTPUT"
        echo "does_current_match_next=${current_and_next_match}" >> $GITHUB_ENV
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'compare-current-json-to-next-release' step. "; fi
      env:
        current_json_version: ${{ steps.get-current-version.outputs.old-json-version }}
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Set up git config
      id: set-up-git
      if: |
        inputs.gh-setup == 'true' && 
        ( '${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}' != 'true' )
      shell: bash
      run: |
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then
            echo "starting the 'set-up-git' step. "
            echo "git_user_name is :  ${{ env.git_user_name }} "
            echo "git_user_email is:  ${{ env.git_user_email }} "
        fi
        git --version
        git config user.name "${{ env.git_user_name }}"
        git config user.email "${{ env.git_user_email }}"
        git status
        if [ '${{ inputs.my_action_debug }}' == 'true' ]; then echo "completing the 'set-up-git' step. "; fi
      env:
        git_user_name: ${{ inputs.gh-user-name }}
        git_user_email: ${{ inputs.gh-user-email }}

    - name: Bump the current json version
      id: bump-current-json-version
      if: ( '${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}' != 'true' )
      shell: bash
      run: |
        echo "Here is where we should see if my_custom_version matches the latest tag ... "
        echo ""
        echo "we can update my_custom_version, if it matches the latest tag"
        echo "https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place "
        latest_release=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName")
        echo "the latest release version is $latest_release"
        echo "the value of my_custom_version set in my-custom-variables.json is $MY_CUSTOM_VERSION"
        tmp=$(mktemp)
        jq '.my_custom_version = "ami-02d8sdfsdf"' my-custom-variables.json > "$tmp" && mv "$tmp" my-custom-variables.json

    - name: Skip bumping the current json version
      id: skip-bumping-current-json-version
      if: ( '${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}' == 'true' )
      shell: bash
      run: |
        echo "Here is where we should see if my_custom_version matches the latest tag ... "
        echo ""

    - name: Bump my_custom_version if it matches the latest tag 
      id: bump-versions-maybe-this-is-duplicate
      shell: bash
      run: |
        echo "Here are commands to bump the version with bash ... "
        echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'

    - name: sadf
      id: update-json-version
      shell: bash
      run: |
        echo "special thanks to this person on stack overflow ... "
        echo "https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place "
        tmp=$(mktemp)
        jq '.my_custom_version = "ami-02d8sdfsdf"' my-custom-variables.json > "$tmp" && mv "$tmp" my-custom-variables.json
