name: 'Bump JSON version'
description: 'Bump a custom version field in a JSON file'
author: 'rwaight'
branding:
  icon: 'info'
  color: 'blue'
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings

inputs:
  author-name:
    description: 'The name of the user that will be displayed as the author of the commit. This is sent to the `add-and-commit` action. '
    required: false
  author-email:
    description: 'The email of the user that will be displayed as the author of the commit. This is sent to the `add-and-commit` action. '
    required: false
  committer-name:
    description: 'The name of the custom committer you want to use. This is sent to the `add-and-commit` action. '
    required: false
  committer-email:
    description: 'The email of the custom committer you want to use. This is sent to the `add-and-commit` action. '
    required: false
  # cwd:
  #   description: 'The directory where your repository is located. You should use actions/checkout first to set it up'
  #   required: false
  #   default: '.'
  default-author:
    description: >-
      'Determines the way the `add-and-commit` action fills missing author name and email. Three options are available:
        - github_actor   ->  UserName <UserName@users.noreply.github.com>
        - user_info      ->  Your Display Name <your-actual@email.com>
        - github_actions ->  github-actions <email associated with the github logo>
      This is sent to the `add-and-commit` action. '
    required: false
    default: 'github_actor'
  gh-token:
    description: 'The `GITHUB_TOKEN` or a `repo` scoped Personal Access Token (PAT), may be needed to run the `gh release` command depending on permissions granted to the default GitHub token.'
    required: false
    default: ${{ github.token }}
  # gh-setup:
  #   description: 'Determine if the action should setup git with `git config`, defaults to false. '
  #   required: false
  #   default: 'false'
  # gh-user-name:
  #   description: 'The GitHub user name for committing changes to the JSON vars file. '
  #   required: false
  #   #   keep 'github-actions[bot]' as default
  #   default: 'github-actions[bot]'
  # gh-user-email:
  #   description: 'The GitHub user email for committing changes to the JSON vars file. '
  #   required: false
  #   #   keep '<41898282+github-actions[bot]@users.noreply.github.com>' as default
  #   default: '<41898282+github-actions[bot]@users.noreply.github.com>'
  json-vars-file:
    description: 'The JSON vars file, including the relative path in the repo. '
    required: true
    default: 'not-set'
  json-vars-field:
    description: 'The version field within the JSON vars file. '
    required: true
    default: 'not-set'
  release-type:
    description: >-
      'The release type, should be one of: major, minor, patch, or prerelease. The only supported pre-release syntax is prepending "-rc" at this time. '
    required: false
    default: 'not-set'
    # should consider adding 'premajor', 'preminor', and 'prepatch' in the future
  release-version:
    description: 'The release version, should be the next release version number. This can be generated by the get-next-semver action. '
    required: false
    default: 'not-set'
  action-verbose:
    description: 'Determine if the action should run verbose tasks, defaults to false. '
    required: false
    default: 'false'

outputs:
  current-release-version:
    description: "The current release version in the repo. "
    value: ${{ steps.get-current-release.outputs.current-release-version || 'not-set' }}
  next-release-version:
    description: "The next release version in the repo. "
    value: ${{ steps.set-next-release.outputs.next-release-version }}
  old-json-version:
    description: "The old version in the JSON file. "
    value: ${{ steps.get-current-version.outputs.old-json-version }}
  new-json-version:
    description: "The new version in the JSON file. "
    value: ${{ steps.get-updated-version.outputs.new-json-version }}

runs:
  using: "composite"
  # Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
  steps:
    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error title=⛔ error hint::This action supports Linux only"
        exit 1

    - name: Greet the triggering_actor
      if: inputs.action-verbose=='true'
      shell: bash
      run: echo Hello ${{ github.triggering_actor }}, the action-verbose variable is set to true.

    - name: Validate that either the 'release-type' input or the 'release-version' input is set
      id: validate-inputs
      if: | 
        ${{ inputs.release-version == 'not-set' }} && (
        ${{ inputs.release-type != 'major' }} || ${{ inputs.release-type != 'minor' }} || 
        ${{ inputs.release-type != 'patch' }} || ${{ inputs.release-type != 'prerelease' }} )
      shell: bash
      run: |
        echo "::error title=⛔ error hint::Invalid input, either provide a 'release-version' or provide a 'release-type' that is one of: major, minor, patch, or prerelease"
        exit 1

    - name: Verbose | Print the inputs
      if: inputs.action-verbose=='true'
      id: verbose-print-inputs
      shell: bash
      run: | 
        ## Print the inputs if inputs.action-verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'verbose-print-inputs' step. "
        echo ""
        echo "author-name is    :  ${{ inputs.author-name }} "
        echo "author-email is   :  ${{ inputs.author-email }} "
        echo "committer-name is :  ${{ inputs.committer-name }} "
        echo "committer-email is:  ${{ inputs.committer-email }} "
        ##echo "cwd is            :  ${{ inputs.cwd }} "
        echo "default-author is :  ${{ inputs.default-author }} "
        echo "json-vars-file is :  ${{ inputs.json-vars-file }} "
        echo "json-vars-field is:  ${{ inputs.json-vars-field }} "
        echo "release-type is   :  ${{ inputs.release-type }} "
        echo "release-version is:  ${{ inputs.release-version }} "
        echo "action-verbose is :  ${{ inputs.action-verbose }} "
        ##
        echo "completing the 'verbose-print-inputs' step. "

    - name: Get Next Semver
      id: get-next-semver
      uses: rwaight/actions/test/get-next-semver@main
      if: ${{ inputs.release-type != 'not-set' }}
      with:
        gh-token: ${{ inputs.gh-token }}
        #pre-release-id: ${{ inputs.preid }}
        pre-release-id: 'rc'
        release-type: ${{ inputs.release-type }}
        action-verbose: true

    - name: Get Next Semver | Print outputs
      id: print-get-next-semver
      if: ${{ steps.get-next-semver.outputs.next-version }}
      shell: bash
      run: |
        echo "The output from the 'get-next-semver' step was: "
        echo "current tag       : ${{ env.current-tag }} "
        echo "current version   : ${{ env.current-version }} "
        echo "next version      : ${{ env.next-version }} "
        echo "is next prerelease: ${{ env.is-next-prerelease }} "
      env:
        current-tag: ${{ steps.get-next-semver.outputs.current-tag }}
        current-version: ${{ steps.get-next-semver.outputs.current-version }}
        next-version: ${{ steps.get-next-semver.outputs.next-version }}
        is-next-prerelease: ${{ steps.get-next-semver.outputs.is-next-prerelease }}

# migrate files from 'rw-updates-202403-v2' to this action

    # Require the checkout action runs before this action is called
    # - name: Checkout '${{ inputs.json-vars-file }}' from the commit tree
    #   uses: actions/checkout@v4
    #   with:
    #     fetch-tags: true
    #     token: ${{ inputs.gh-token }}
    #     sparse-checkout: |
    #       .github
    #       ${{ inputs.json-vars-file }}
    #     #sparse-checkout-cone-mode: true
    #     sparse-checkout-cone-mode: false

    - name: Get the current value of the ${{ inputs.json-vars-field }} version field
      id: get-current-version
      shell: bash
      run: |
        ## Get the current value of ${{ env.json_vars_field }}
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'get-current-version' step. "
            echo "json_vars_file is :  ${{ env.json_vars_file }} "
            echo "json_vars_field is:  ${{ env.json_vars_field }} "
            echo ""
            echo "the syntax is 'MY_CUSTOM_VERSION=$(jq --raw-output .my_custom_field my-custom-variables.json)' "
        fi
        current_json_version=$(jq --raw-output .${{ env.json_vars_field }} ${{ env.json_vars_file }})
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "current_json_version: $current_json_version"
            echo "writing the 'current_json_version' to the environment and GitHub output"
        fi
        echo "current_json_version=$current_json_version" >> $GITHUB_ENV
        echo "current_json_version=$current_json_version" >> "$GITHUB_OUTPUT"
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "writing $current_json_version to the 'old-json-version' GitHub output"
        fi
        echo "old-json-version=$current_json_version" >> $GITHUB_ENV
        echo "old-json-version=$current_json_version" >> "$GITHUB_OUTPUT"
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'get-current-version' step. "; fi
      env:
        json_vars_file: ${{ inputs.json-vars-file }}
        json_vars_field: ${{ inputs.json-vars-field }}

    - name: Validate the current json version
      id: validate-current-version
      shell: bash
      run: |
        ## Validate the current json version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'set-next-release' step. "
            echo "current_release_version is:  ${{ env.current_release_version }} "
        fi
        VERSION="${{ env.current_json_version }}"
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.action-verbose }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE"
            fi
        else
            ## Fail the workflow if the 'old-json-version' is not valid
            echo "::error::Current JSON version '$VERSION' is not in a valid format"
            exit 1
        fi
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'validate-current-version' step. "; fi
      env:
        current_json_version: ${{ steps.get-current-version.outputs.old-json-version }}

    - name: Get the current release version
      id: get-current-release
      if: steps.get-next-semver.outcome != 'skipped'
      shell: bash
      run: |
        ## Get the current release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'get-current-release' step. "
            echo ""
            echo "Using the GitHub CLI to print release information"
            echo "See https://cli.github.com/manual/gh_release_list for information about the command. "
            echo ""
            echo "Verbose enabled, running additional 'gh release' commands"
            echo ""
            echo "::group::running 'gh release list' ... "
            gh release list
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts' ... "
            gh release list --exclude-drafts
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases' ... "
            gh release list --exclude-drafts --exclude-pre-releases
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1
            echo "::endgroup::"
            echo ""
            echo "::group::running 'gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r \".[].tagName\"' ... "
            gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName"
            echo "::endgroup::"
            echo ""
            echo "To learn more about using the GitHub CLI with workflows... "
            echo "See https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows "
            echo ""
        fi
        ##
        if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
            echo "capturing the latest pre-release from the GitHub CLI, as the 'release-type' is 'prerelease'. "
            current_release_version=$(gh release list --exclude-drafts --limit 1 --json tagName | jq -r ".[].tagName")
        else
            echo "capturing the latest (current) release from the GitHub CLI "
            current_release_version=$(gh release list --exclude-drafts --exclude-pre-releases --limit 1 --json tagName | jq -r ".[].tagName")
        fi
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "current_release_version: $current_release_version"
            echo "writing the 'current_release_version' to the environment and GitHub output"
        fi
        echo "current_release_version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current_release_version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "The current release version of this repo is \`$current_release_version\`"
            echo "writing $current_release_version to the 'current-release-version' GitHub output"
        fi
        echo "current-release-version=${current_release_version}" >> "$GITHUB_OUTPUT"
        echo "current-release-version=${current_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'get-current-release' step. "; fi
      #env:
      #  GH_TOKEN: ${{ inputs.gh-token }}

    - name: Compare the current json version to the current release version
      id: compare-current-versions
      if: steps.get-next-semver.outcome != 'skipped'
      shell: bash
      run: |
        ## Compare the current json version to the current release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'compare-current-versions' step. "
            echo "current_json_version is   :  ${{ env.current_json_version }} "
            echo "current_release_version is:  ${{ env.current_release_version }} "
        fi
        ##
        if [ '${{ env.current_json_version }}' == '${{ env.current_release_version }}' ]; then
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and matches "
            echo "  the 'current_release_version' which is set to '${{ env.current_release_version }}'. "
            current_version_match=true
        else
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and DOES NOT MATCH "
            echo "  the 'current_release_version' which is set to '${{ env.current_release_version }}'. "
            current_version_match=false
        fi
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "setting the value of 'do_current_versions_match' to '${current_version_match}' and sending it to GitHub output"
        fi
        echo "do_current_versions_match=${current_version_match}" >> "$GITHUB_OUTPUT"
        echo "do_current_versions_match=${current_version_match}" >> $GITHUB_ENV
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'compare-current-versions' step. "; fi
      env:
        current_json_version: ${{ steps.get-current-version.outputs.old-json-version }}
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version }}

    - name: Set the next release version
      id: set-next-release
      shell: bash
      run: |
        ## Set the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'set-next-release' step. "
            echo "current_json_version is   :  ${{ env.current_json_version }} "
            echo "current_release_version is:  ${{ env.current_release_version }} "
            echo "release-type is           :  ${{ inputs.release-type }} "
            echo "release-version is        :  ${{ inputs.release-version }} "
            echo ""
            echo "::group::printing the syntax to bump '${{ inputs.release-type }}' ... "
            if [ '${{ inputs.release-type }}' == 'prerelease' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
                echo "the syntax to bump 'prerelease' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\"-rc\"} {\$2+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'patch' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
                echo "the syntax to bump 'patch' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$3+=1} 1'"
            elif [ '${{ inputs.release-type }}' == 'minor' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
                echo "the syntax to bump 'minor' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$2+=1;\$3=0} 1'"
            elif [ '${{ inputs.release-type }}' == 'major' ]; then
                ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'
                echo "the syntax to bump 'major' is: "
                echo "echo \"\$version\" | awk 'BEGIN{FS=OFS=\".\"} {\$1+=1;\$2=0;\$3=0} 1'"
            else
                echo "something is wrong with a conditional. "
                echo "this is the VERBOSE 'else' statement in the 'set-next-release' step. "
            fi
            echo "::endgroup::"
        fi
        ##
        if [ '${{ inputs.release-version }}' != 'not-set' ]; then
            echo "updating the next version based on the user provided release-version. "
            next_release_version=${{ inputs.release-version }}
            ##
        elif [ '${{ inputs.release-type }}' == 'prerelease' ]; then
            echo "updating the next rc-version for a prerelease. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'patch' ]; then
            echo "updating the next-version for a patch release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'minor' ]; then
            echo "updating the next-version for a minor release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1')
            ##
        elif [ '${{ inputs.release-type }}' == 'major' ]; then
            echo "updating the next-version for a major release. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1')
            ##
        else
            echo "something is wrong with a conditional, incrementing the version as a PATCH release.. "
            next_release_version=$(echo "$current_release_version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
        fi
        echo "next_release_version=${next_release_version}" >> "$GITHUB_OUTPUT"
        echo "next_release_version=${next_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "The next release version has been set to \`$next_release_version\`"
            echo "writing $next_release_version to the 'next-release-version' GitHub output"
        fi
        echo "next-release-version=${next_release_version}" >> "$GITHUB_OUTPUT"
        echo "next-release-version=${next_release_version}" >> $GITHUB_ENV
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'set-next-release' step. "; fi
      env:
        current_json_version: ${{ steps.get-current-version.outputs.old-json-version }}
        current_release_version: ${{ steps.get-current-release.outputs.current-release-version || 'not-set' }}
        ## Increment a PRERELEASE '-rc' version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="-rc"} {$2+=1} 1'
        ## Increment a PATCH version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1'
        ## Increment a MINOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$2+=1;$3=0} 1'
        ## Increment a MAJOR version:
        ## echo "$version" | awk 'BEGIN{FS=OFS="."} {$1+=1;$2=0;$3=0} 1'

    - name: Validate the next release version
      id: validate-next-release
      shell: bash
      run: |
        ## Validate the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [[ "${{ env.next_release_version }}" != "not-set" ]]; then
            echo "Using the 'next_release_version' as the 'VERSION' "
            echo "  setting 'VERSION' to '${{ env.next_release_version }}' "
            VERSION="${{ env.next_release_version }}"
            ##
        elif [[ "${{ env.user_release_version }}" != "not-set" ]]; then
            echo "Using the user provided 'release_version' as the 'VERSION' "
            echo "  setting 'VERSION' to '${{ env.user_release_version }}' "
            VERSION="${{ env.user_release_version }}"
            ##
        else
            echo "the 'actions:autorelease' label exists"
        fi
        ##
        if [[ -z "${{ env.VERSION }}" ]]; then
            echo "Creating 'version:${{ inputs.release-type }}' label"
            VERSION="${{ env.next_release_version }}"
        else
            echo "the 'version:${{ inputs.release-type }}' label already exists"
        fi
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.action-verbose }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE"
            fi
        else
            ## Fail the workflow if the 'next-release-version' is not valid
            echo "::error::Next release version '$VERSION' is not in a valid format"
            exit 1
        fi
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'validate-next-release' step. "; fi
      env:
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}
        user_release_version: ${{ inputs.release-version }}

    - name: Compare the current json version to the next release version
      id: compare-current-json-to-next-release
      shell: bash
      run: |
        ## Compare the current json version to the next release version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'compare-current-json-to-next-release' step. "
            echo "current_json_version is:  ${{ env.current_json_version }} "
            echo "next_release_version is:  ${{ env.next_release_version }} "
        fi
        ##
        if [ '${{ env.current_json_version }}' == '${{ env.next_release_version }}' ]; then
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and matches "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            current_and_next_match=true
        else
            echo "the 'current_json_version' is set to '${{ env.current_json_version }}' and DOES NOT MATCH "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            current_and_next_match=false
        fi
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "setting the value of 'does_current_match_next' to '${current_and_next_match}' and sending it to GitHub output"
        fi
        echo "does_current_match_next=${current_and_next_match}" >> "$GITHUB_OUTPUT"
        echo "does_current_match_next=${current_and_next_match}" >> $GITHUB_ENV
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'compare-current-json-to-next-release' step. "; fi
      env:
        current_json_version: ${{ steps.get-current-version.outputs.old-json-version }}
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Skip bumping the current json version
      id: skip-bumping-current-json-version
      if: ( '${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}' == 'true' )
      shell: bash
      run: |
        ## Skip bumping the current json version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'skip-bumping-current-json-version' step. "
        fi
        echo "This action will not bump the current JSON version since it already matches the next release version. "
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'skip-bumping-current-json-version' step. "; fi
      env: 
        current_and_next_match: ${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}

    # Require the proper checkout action to be run before this action is called
    # https://github.com/actions/checkout/?tab=readme-ov-file#push-a-commit-using-the-built-in-token
    # - name: Set up git config
    #   id: set-up-git
    #   if: |
    #     inputs.gh-setup == 'true' && 
    #     ( '${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}' != 'true' )
    #   shell: bash
    #   run: |
    #     if [ '${{ inputs.action-verbose }}' == 'true' ]; then
    #         echo "starting the 'set-up-git' step. "
    #         echo "git_user_name is :  ${{ env.git_user_name }} "
    #         echo "git_user_email is:  ${{ env.git_user_email }} "
    #     fi
    #     git --version
    #     git config user.name "${{ env.git_user_name }}"
    #     git config user.email "${{ env.git_user_email }}"
    #     git status
    #     if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'set-up-git' step. "; fi
    #   env:
    #     git_user_name: ${{ inputs.gh-user-name }}
    #     git_user_email: ${{ inputs.gh-user-email }}

    - name: Bump the current json version
      id: bump-current-json-version
      if: ( '${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}' != 'true' )
      shell: bash
      run: |
        ## Bump the current json version
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'bump-current-json-version' step. "
            echo "json_vars_file is      :  ${{ env.json_vars_file }} "
            echo "json_vars_field is     :  ${{ env.json_vars_field }} "
            echo "next_release_version is:  ${{ env.next_release_version }} "
            echo ""
            echo "::group::printing the syntax to set the '${{ env.json_vars_field }}' field to ${{ env.next_release_version }} ... "
            ## tmp=$(mktemp)
            ## jq '.my_custom_version = "my-new-value"' my-custom-variables.json > "$tmp" && mv "$tmp" my-custom-variables.json
            echo "tmp=\$(mktemp)"
            echo "jq '.my_custom_version = \"my-new-value\"' my-custom-variables.json > \"\$tmp\" && mv \"\$tmp\" my-custom-variables.json\" "
            echo ""
            echo "special thanks to whoever posted the commands on stackoverflow... "
            echo " https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place "
            echo ""
            echo "::endgroup::"
        fi
        tmp=$(mktemp)
        jq '.${{ env.json_vars_field }} = "${{ env.next_release_version }}"' ${{ env.json_vars_file }} > "$tmp" && mv "$tmp" ${{ env.json_vars_file }}
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "going to check the version in the JSON file "
        fi
        ##
        check_json_version=$(jq --raw-output .${{ env.json_vars_field }} ${{ env.json_vars_file }})
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "check_json_version: $check_json_version"
        fi
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'bump-current-json-version' step. "; fi
      env:
        json_vars_file: ${{ inputs.json-vars-file }}
        json_vars_field: ${{ inputs.json-vars-field }}
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Get the updated value of the ${{ inputs.json-vars-field }} version field
      id: get-updated-version
      shell: bash
      run: |
        ## Get the updated value of the ${{ inputs.json-vars-field }} version field
        ## the double number signs below are for line spacing and readability only
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "starting the 'get-updated-version' step. "
            echo "json_vars_file is :  ${{ env.json_vars_file }} "
            echo "json_vars_field is:  ${{ env.json_vars_field }} "
            echo ""
            echo "the syntax is 'MY_CUSTOM_VERSION=$(jq --raw-output .my_custom_field my-custom-variables.json)' "
        fi
        updated_json_version=$(jq --raw-output .${{ env.json_vars_field }} ${{ env.json_vars_file }})
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "updated_json_version: $updated_json_version"
            echo "writing the 'updated_json_version' to the environment and GitHub output"
        fi
        ##
        echo "updated_json_version=$updated_json_version" >> $GITHUB_ENV
        echo "updated_json_version=$updated_json_version" >> "$GITHUB_OUTPUT"
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "writing $updated_json_version to the 'new-json-version' GitHub output"
        fi
        echo "new-json-version=$updated_json_version" >> $GITHUB_ENV
        echo "new-json-version=$updated_json_version" >> "$GITHUB_OUTPUT"
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "checking to see if the updated_json_version matches the next_release_version "
        fi
        if [ '$updated_json_version' == '${{ env.next_release_version }}' ]; then
            echo "the 'updated_json_version' is set to '$updated_json_version' and matches "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            next_and_updated_match=true
        else
            echo "the 'updated_json_version' is set to '$updated_json_version' and DOES NOT MATCH "
            echo "  the 'next_release_version' which is set to '${{ env.next_release_version }}'. "
            next_and_updated_match=false
        fi
        ##
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then
            echo "setting the value of 'does_next_match_updated' to '${next_and_updated_match}' and sending it to GitHub output"
        fi
        echo "does_next_match_updated=${next_and_updated_match}" >> "$GITHUB_OUTPUT"
        echo "does_next_match_updated=${next_and_updated_match}" >> $GITHUB_ENV
        #
        if [ '${{ inputs.action-verbose }}' == 'true' ]; then echo "completing the 'get-updated-version' step. "; fi
      env:
        json_vars_file: ${{ inputs.json-vars-file }}
        json_vars_field: ${{ inputs.json-vars-field }}
        next_release_version: ${{ steps.set-next-release.outputs.next-release-version }}

    - name: Commit the changes to the '${{ inputs.json-vars-file }}' file
      id: commit-json-version-changes
      # probably want to only try to commit changes if 'does_next_match_updated' is 'true'
      #if: ( '${{ steps.get-updated-version.outputs.does_next_match_updated }}' == 'true' )
      #uses: stefanzweifel/git-auto-commit-action@v4
      #uses: EndBug/add-and-commit@v9
      uses: rwaight/actions/git/add-and-commit@main
      with:
        add: ${{ inputs.json-vars-file }}
        author_name: ${{ inputs.author-name }}
        author_email: ${{ inputs.author-email }}
        commit: --signoff
        committer_name: ${{ inputs.committer-name }}
        committer_email: ${{ inputs.committer-email }}
        default_author: ${{ inputs.default-author }}
        message: '[bump-json-version] Bump ${{ inputs.json-vars-field }} to ${{ steps.set-next-release.outputs.next-release-version }}'
        # options below are for 'stefanzweifel/git-auto-commit-action'
        #commit_message: Bump ${{ inputs.json-vars-field }} to ${{ steps.set-next-release.outputs.next-release-version }}
        #commit_options: '--signoff'
        #file_pattern: ${{ inputs.json-vars-file }}
        #branch: '${{ github.ref_name }}'
        #create_branch: false
        #commit_user_name: ${{ inputs.gh-user-name }}
        #commit_user_email: ${{ inputs.gh-user-email }}

    - name: Verbose | Print the outputs
      if: inputs.action-verbose=='true'
      id: verbose-print-outputs
      shell: bash
      run: | 
        ## Print the outputs if inputs.action-verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "starting the 'verbose-print-outputs' step. "
        echo ""
        echo "Current release and old JSON version information: "
        echo "old-json-version is       :  ${{ env.old-json-version }} "
        echo "current-release-version is:  ${{ env.current-release-version }} "
        echo ""
        echo "Next release and new JSON version information: "
        echo "next-release-version is   :  ${{ env.next-release-version }} "
        echo "new-json-version is       :  ${{ env.new-json-version }} "
        echo ""
        echo "Version match results: "
        echo "do_current_versions_match is:  ${{ env.do_current_versions_match }} "
        echo "does_current_match_next is  :  ${{ env.does_current_match_next }} "
        echo "does_next_match_updated is  :  ${{ env.does_next_match_updated }} "
        echo ""
        ##
        echo "completing the 'verbose-print-outputs' step. "
      env:
        current-release-version: ${{ steps.get-current-release.outputs.current-release-version || 'not-set' }}
        next-release-version: ${{ steps.set-next-release.outputs.next-release-version }}
        old-json-version: ${{ steps.get-current-version.outputs.old-json-version }}
        new-json-version: ${{ steps.get-updated-version.outputs.new-json-version }}
        do_current_versions_match: ${{ steps.compare-current-versions.outputs.do_current_versions_match }}
        does_current_match_next: ${{ steps.compare-current-json-to-next-release.outputs.does_current_match_next }}
        does_next_match_updated: ${{ steps.get-updated-version.outputs.does_next_match_updated }}

    # - name: Modify a JSON key value in place
    #   id: update-json-in-place
    #   shell: bash
    #   run: |
    #     echo "special thanks to this person on stack overflow ... "
    #     echo "https://stackoverflow.com/questions/42716734/modify-a-key-value-in-a-json-using-jq-in-place "
    #     tmp=$(mktemp)
    #     jq '.my_custom_version = "ami-02d8sdfsdf"' my-custom-variables.json > "$tmp" && mv "$tmp" my-custom-variables.json
