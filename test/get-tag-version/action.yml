name: 'Get Tag Version'
description: 'A GitHub action that provides the tag version from a push event, specifically when a tag is created.'
# Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
author: 'rwaight'
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#branding
branding:
  icon: 'edit'
  color: 'blue'
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  verbose:
    description: 'Determine if the action should run verbose tasks, defaults to false.'
    required: false
    default: 'false'

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  full-version-ref:
    description: "The full version ref. "
    value: ${{ steps.get-tag-version.outputs.full-version-ref }}
  major-ref:
    description: "The major version ref. "
    value: ${{ steps.get-tag-version.outputs.major-ref }}
  minor-ref:
    description: "The minor version ref. "
    value: ${{ steps.get-tag-version.outputs.minor-ref }}
  patch-ref:
    description: "The patch version ref. "
    value: ${{ steps.get-tag-version.outputs.patch-ref }}
  prerelease:
    description: "The prerelease identifier, if applicable. "
    value: ${{ steps.get-tag-version.outputs.prerelease }}
  is-prerelease:
    description: "If the version is a prerelease or not. "
    value: ${{ steps.get-tag-version.outputs.is-prerelease }}
  major-num:
    description: "The major version number, without the 'v'. "
    value: ${{ steps.get-tag-version.outputs.major-num }}
  minor-num:
    description: "The minor version number, without the 'v'. "
    value: ${{ steps.get-tag-version.outputs.minor-num }}
  patch-num:
    description: "The patch version number, without the 'v'. "
    value: ${{ steps.get-tag-version.outputs.patch-num }}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:
    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message
      shell: bash
      run: |
        echo "::error title=⛔ error hint::This action supports Linux only"
        exit 1

    - name: Greet the triggering_actor
      if: inputs.verbose=='true'
      shell: bash
      run: echo Hello ${{ github.triggering_actor }}, the verbose variable is set to true.

    - name: Verbose | Print the inputs
      if: inputs.verbose=='true'
      id: verbose-print-inputs
      shell: bash
      run: | 
        ## Print the inputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo "verbose is set to ${{ inputs.verbose }} "
        ##

    - name: Print notice about checkout action
      id: print-checkout-notice
      shell: bash
      run: |
        echo "this action uses git commands to detect changes, the repository must be already checked out. "
        echo "  you can use the GitHub checkout action, see: https://github.com/actions/checkout "

    - name: Fetch the tags from the repo
      id: git-fetch
      # error: 'fatal: --unshallow on a complete repository does not make sense'
      #run: "git fetch --force --prune --unshallow --tags"
      # end error for the command above
      shell: bash
      run: |
        echo "starting the 'git-fetch' step... "
        git fetch --force --prune --tags
        echo "finishing the 'git-fetch' step... "

    - name: This should run when there are tags pushed
      if: github.ref_type == 'tag'
      shell: bash
      run: |
        echo "The ref_type is: ${{ github.ref_type }}"
        echo "The release.tag_name value is ${{ github.event.release.tag_name }}"
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub ref_name: ${{ github.ref_name }}"
        echo "GitHub ref_type: ${{ github.ref_type }}"

    - name: get-tag-version
      id: get-tag-version
      if: (github.ref_type == 'tag')
      shell: bash
      run: |
        echo "starting step 'get-tag-version' "
        VERSION="${{ github.event.release.tag_name || github.ref_name }}"
        ##
        RE='^[vV]?([0-9]+)[.]([0-9]+)[.]([0-9]+)(-[0-9A-Za-z.+-]*)?'
        if [[ $VERSION =~ $RE ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            PRERELEASE="${BASH_REMATCH[4]}"
            if [ '${{ inputs.VERBOSE }}' == 'true' ]; then
                echo "VERSION is: $VERSION "
                echo "RE is     : $RE "
                echo "MAJOR is  : $MAJOR "
                echo "MINOR is  : $MINOR "
                echo "PATCH is  : $PATCH "
                echo "PRERELEASE: $PRERELEASE "
            fi
        else
            echo "::error file=get-tag-version-action.yml,title=⛔ get-tag-version error hint::Version '$VERSION' is not in a valid format."
            exit 1
        fi
        ##
        if [[ "$PRERELEASE" ]]; then pre=true; else pre=false; fi
        ##
        echo "full-version-ref=$VERSION" >> $GITHUB_OUTPUT
        ##
        echo "major-ref=v$MAJOR" >> $GITHUB_OUTPUT
        echo "major-num=$MAJOR" >> $GITHUB_OUTPUT
        ##
        echo "minor-ref=v$MINOR" >> $GITHUB_OUTPUT
        echo "minor-num=$MINOR" >> $GITHUB_OUTPUT
        ##
        echo "patch-ref=v$PATCH" >> $GITHUB_OUTPUT
        echo "patch-num=$PATCH" >> $GITHUB_OUTPUT
        ##
        echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
        ##
        echo "is-prerelease=$pre" >> $GITHUB_OUTPUT
        ##
        echo "completing the 'get-tag-version' step "
      ## the old full version did not include the prerelease, sadly
      # ##echo "full-version-ref=v$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT

    - name: get-tag-version | Print outputs
      id: check-get-tag-version
      #if: (github.ref_type == 'tag')
      if: ${{ steps.get-tag-version.outputs.full-version-ref }}
      shell: bash
      run: |
        echo "starting step 'check-get-tag-version' "
        echo "## get-tag-version outputs"
        echo "Full version : ${{ env.FULL_VERSION_REF }} "
        echo "Major ref    : ${{ env.MAJOR_REF }} "
        echo "Minor ref    : ${{ env.MINOR_REF }} "
        echo "Patch ref    : ${{ env.PATCH_REF }} "
        echo "Prerelease   : ${{ env.PRERELEASE }} "
        echo "Is prerelease: ${{ env.IS_PRERELEASE }} "
        echo ""
        echo "Major num    : ${{ env.MAJOR_NUM }} "
        echo "Minor num    : ${{ env.MINOR_NUM }} "
        echo "Patch num    : ${{ env.PATCH_NUM }} "
        echo ""
        echo "completing the 'check-get-tag-version' step. "
      env:
        #FULL_VERSION_TAG: ${{ steps.get-tag-version.outputs.full-version-tag }}
        FULL_VERSION_REF: ${{ steps.get-tag-version.outputs.full-version-ref }}
        MAJOR_REF: ${{ steps.get-tag-version.outputs.major-ref }}
        MINOR_REF: ${{ steps.get-tag-version.outputs.minor-ref }}
        PATCH_REF: ${{ steps.get-tag-version.outputs.patch-ref }}
        MAJOR_NUM: ${{ steps.get-tag-version.outputs.major-num }}
        MINOR_NUM: ${{ steps.get-tag-version.outputs.minor-num }}
        PATCH_NUM: ${{ steps.get-tag-version.outputs.patch-num }}
        PRERELEASE: ${{ steps.get-tag-version.outputs.prerelease }}
        IS_PRERELEASE: ${{ steps.get-tag-version.outputs.is-prerelease }}
