name: 'Configure GitHub CLI'
description: 'Configure the GitHub CLI using either a GitHub App (`bot`) or a GitHub User Account (`user`).'
# Ref: https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
author: 'rwaight'
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#branding
branding:
  # Ref: https://haya14busa.github.io/github-action-brandings/
  # fork: https://github.com/rwaight/github-action-brandings
  icon: 'git-commit'
  color: 'blue'

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  account-type:
    description: 'The type of GitHub account to use: either GitHub App (`bot`) or GitHub User Account (`user`).'
    required: true
    #default: 'bot'
  gh-app-id:
    description: 'The GitHub App ID used to authenticate to the GitHub CLI.'
    required: false
  gh-app-key:
    description: 'The GitHub App Key used to authenticate to the GitHub CLI. This is a private key that is used to create a GitHub App Token.'
    required: false
    default: ${{ github.token }}
  gh-token:
    description: 'GITHUB_TOKEN or a `repo` scoped Personal Access Token (PAT) used to authenticate to the GitHub CLI.'
    required: false
    default: ${{ github.token }}
    # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
  verbose:
    description: 'Determine if the action should run verbose tasks, defaults to false.'
    required: false
    default: 'false'

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  app-token:
    description: "GitHub App installation access token"
    # https://github.com/actions/create-github-app-token#outputs
    value: ${{ steps.app-token.outputs.token }}
  app-installation-id:
    description: "GitHub App installation ID"
    # https://github.com/actions/create-github-app-token#outputs
    value: ${{ steps.app-token.outputs.installation-id }}
  app-slug:
    description: "GitHub App slug"
    # https://github.com/actions/create-github-app-token#outputs
    value: ${{ steps.app-token.outputs.app-slug }}
  user-id:
    description: "The ID of the authenticated GitHub user."
    value: ${{ steps.set-action-outputs.outputs.user-id }}
  user-login:
    description: "The login of the authenticated GitHub user."
    value: ${{ steps.set-action-outputs.outputs.user-login }}
  user-name:
    description: "The name of the authenticated GitHub user."
    value: ${{ steps.set-action-outputs.outputs.user-name }}
  user-type:
    description: "The type of the authenticated GitHub user."
    value: ${{ steps.set-action-outputs.outputs.user-type }}
  user-email:
    description: "The email of the authenticated GitHub user."
    value: ${{ steps.set-action-outputs.outputs.user-email }}
  user-committer:
    description: "The committer information for the authenticated GitHub user."
    value: ${{ steps.set-action-outputs.outputs.user-committer }}

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:

    - name: Validate that the runner OS is Linux
      if: ${{ runner.os != 'Linux' }}
      id: validate-runner-os
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message
      run: |
        echo "error in the action '${{ github.action }}' at file path: '${{ github.action_path }}' "
        echo "::error file=test/config-gh-cli/action.yml,title=â›” config-gh-cli error hint::This action supports Linux only"
        exit 1
      shell: bash

    - name: Greet the triggering_actor
      if: inputs.verbose=='true' || ${{ runner.debug == '1' }}
      id: verbose-greeting
      run: | 
        echo "::group::starting the 'verbose-greeting' step... "
        echo ""
        echo "Hello ${{ github.triggering_actor }}, the verbose variable is set to true."
        echo ""
        echo "Here is some information about this action: "
        echo "  action name  :  ${{ github.action }} "
        echo "  action path  :  ${{ github.action_path }} "
        echo "  action ref   :  ${{ github.action_ref }} "
        echo "  action repo  :  ${{ github.action_repository }} "
        echo "  action status:  ${{ github.action_status }} "
        echo ""
        echo "finishing the 'verbose-greeting' step... "
        echo "::endgroup::"
      shell: bash

    - name: Verbose | Print the inputs
      if: inputs.verbose=='true' || ${{ runner.debug == '1' }}
      id: verbose-print-inputs
      env:
        USER_TYPE: ${{ inputs.account-type == 'bot' && 'bot' || 'user' }}
      run: | 
        echo "::group::starting the 'verbose-print-inputs' step... "
        ## Print the inputs if inputs.verbose=='true'
        ## the double number signs below are for line spacing and readability only
        ##
        echo ""
        echo "Here are the inputs provided to the action: "
        echo "    account-type:  ${{ inputs.account-type }} "
        echo "    gh-app-id   :  ${{ inputs.gh-app-id }} "
        echo "    verbose     :  ${{ inputs.verbose }} "
        echo ""
        echo "finishing the 'verbose-print-inputs' step... "
        ##
        echo "::endgroup::"
      shell: bash

    - name: User Account | Login with a GitHub Token
      id: gh-user-auth
      # switch to this #if: ${{ steps.pr-from-commit.outputs.result && inputs.account-type=='user' }}
      if: inputs.account-type=='user'
      # references:
      #  # https://cli.github.com/manual/gh_auth_login
      #  # https://github.com/jongio/gh-setup-git-credential-helper/blob/main/gh-setup-git-credential-helper
      #  # https://josh-ops.com/posts/gh-auth-login-in-actions/
      #  # https://stackoverflow.com/questions/75968833/does-gh-auth-login-create-a-github-token-or-gh-token
      ##nope##env:
        # use GH_TOKEN per https://josh-ops.com/posts/gh-auth-login-in-actions/
        #bot#GH_TOKEN: ${{ inputs.gh-app-key }}
        #user#GH_TOKEN: ${{ inputs.gh-token }}
        ##nope##GH_TOKEN: ${{ inputs.gh-token }}
      run: |
        echo "::group::starting the 'gh-user-auth' step... "
        echo ""
        echo "  [INFO] Going to unset GITHUB_TOKEN and GH_TOKEN from the runner environment, then run gh command."
        echo "             See https://stackoverflow.com/a/41749660 & https://github.com/cli/cli/issues/3799 for more."
        export GITHUB_TOKEN=
        export GH_TOKEN=
        echo ""
        echo "  [INFO] Going to login with the provided GitHub token "
        echo ${{ inputs.gh-token }} | gh auth login --with-token
        echo ""
        ##nope## echo "Login using 'gh auth login' "
        ##nope## gh auth login
        echo "  [INFO] Going to check the GitHub authentication status "
        gh auth status
        exitcode="$?"
        # capture the initial 'gh auth status' exit code for debugging
        # capture the gh auth status for debugging
        ##extra - cleanup## cli_auth_status=$(gh auth status)
        echo ""
        echo "  [INFO] Going to set the GitHub CLI as the credential helper "
        gh auth setup-git
        echo ""
        echo "finishing the 'gh-user-auth' step... "
        echo "::endgroup::"
      shell: bash

    - name: Bot Account | Create a GitHub App Token
      # Verified creator: https://github.com/marketplace/actions/create-github-app-token
      # GitHub Action for creating a GitHub App installation access token.
      uses: actions/create-github-app-token@3ff1caaa28b64c9cc276ce0a02e2ff584f3900c5 # v2.0.2
      id: app-token
      # this worked when we were using the 'bot' for authentication
      if: inputs.account-type=='bot'
      with:
        # required
        app-id: ${{ inputs.gh-app-id }}
        private-key: ${{ inputs.gh-app-key }}
        # create a token for all repositories in the current owner's installation
        # https://github.com/actions/create-github-app-token#create-a-token-for-all-repositories-in-the-current-owners-installation
        owner: ${{ github.repository_owner }}

    - name: Bot Account | Check GitHub auth status
      id: check-bot-github-auth
      if: inputs.account-type=='bot'
      env:
        # use GH_TOKEN per https://josh-ops.com/posts/gh-auth-login-in-actions/
        #bot#GH_TOKEN: ${{ inputs.gh-app-key }}
        #user#GH_TOKEN: ${{ inputs.gh-token }}
        #GH_TOKEN: ${{ steps.app-token.outputs.token || inputs.gh-token }}
        # set GH_TOKEN to 'steps.app-token.outputs.token' if the account-type is 'bot'
        #   otherwise set GH_TOKEN to 'inputs.gh-token'
        GH_TOKEN: ${{ inputs.account-type == 'bot' && steps.app-token.outputs.token || inputs.gh-token }}
        #
        #bot#GITHUB_TOKEN: ${{ inputs.gh-app-key }}
        #user#GITHUB_TOKEN: ${{ inputs.gh-token }}
      run: |
        echo "::group::starting the 'check-bot-github-auth' step... "
        echo ""
        echo "Check the GitHub authentication status "
        gh auth status
        exitcode="$?"
        # capture the initial 'gh auth status' exit code for debugging
        # capture the gh auth status for debugging
        cli_auth_status=$(gh auth status)
        echo ""
        echo "finishing the 'check-bot-github-auth' step... "
        echo "::endgroup::"
      shell: bash

    - name: Get the GitHub user information
      id: gh-user-info
      env:
        GH_LOCAL_PRIMARY: ${{ inputs.account-type }}
        # use GH_TOKEN per https://josh-ops.com/posts/gh-auth-login-in-actions/
        #bot#GH_TOKEN: ${{ inputs.gh-app-key }}
        #user#GH_TOKEN: ${{ inputs.gh-token }}
        #GH_TOKEN: ${{ steps.app-token.outputs.token || inputs.gh-token }}
        # set GH_TOKEN to 'steps.app-token.outputs.token' if the account-type is 'bot'
        #   otherwise set GH_TOKEN to 'inputs.gh-token'
        GH_TOKEN: ${{ inputs.account-type == 'bot' && steps.app-token.outputs.token || inputs.gh-token }}
        #
        #bot#GITHUB_TOKEN: ${{ inputs.gh-app-key }}
        #user#GITHUB_TOKEN: ${{ inputs.gh-token }}
      run: |
        echo "::group::starting the 'gh-user-info' step... "
        echo ""
        echo "Get the GitHub User information "
        cli_user_id=$(gh api user -q ".id")
        cli_user_login=$(gh api user -q ".login")
        cli_user_name=$(gh api user -q ".name")
        cli_user_type=$(gh api user -q ".type")
        #
        #
        if [[ "${GH_LOCAL_PRIMARY}" == "bot" ]]; then
            # append '[bot]' to the user login
            cli_user_login="${cli_user_login}[bot]"
        elif [[ "${GH_LOCAL_PRIMARY}" == "user" ]]; then
            # do nothing, maybe set cli_user_login again
            cli_user_login="${cli_user_login}"
        else
            echo "this workflow will now fail"
            exit 1
        fi
        #
        cli_user_email="${cli_user_id}+${cli_user_login}@users.noreply.github.com"
        #
        #
        # Print user information
        echo "the user ID is ${cli_user_id} "
        echo "the user type is ${cli_user_type} "
        echo "the user name is ${cli_user_name} "
        echo "the user login is ${cli_user_login} "
        echo "the user email is ${cli_user_email} "
        #
        # Send the user information to GitHub output
        echo "user-id=${cli_user_id}" >> "$GITHUB_OUTPUT"
        echo "user-login=${cli_user_login}" >> "$GITHUB_OUTPUT"
        echo "user-name=${cli_user_name}" >> "$GITHUB_OUTPUT"
        echo "user-type=${cli_user_type}" >> "$GITHUB_OUTPUT"
        echo "user-email=${cli_user_email}" >> "$GITHUB_OUTPUT"
        #
        # Send the user information to the GitHub runner environment
        echo "user-id=${cli_user_id}" >> $GITHUB_ENV
        echo "user-login=${cli_user_login}" >> $GITHUB_ENV
        echo "user-name=${cli_user_name}" >> $GITHUB_ENV
        echo "user-type=${cli_user_type}" >> $GITHUB_ENV
        echo "user-email=${cli_user_email}" >> $GITHUB_ENV
        # 
        echo ""
        #
        echo "consolidate this with the 'configure-git' step"
        echo ""
        echo "finishing the 'gh-user-info' step... "
        echo "::endgroup::"
      shell: bash

    - name: Configure git for the provided GitHub user account
      id: configure-git
      continue-on-error: true
      # See the 'GitHub steps context' section in the actions README file
      env:
        # use GH_TOKEN per https://josh-ops.com/posts/gh-auth-login-in-actions/
        #bot#GH_TOKEN: ${{ inputs.gh-app-key }}
        #user#GH_TOKEN: ${{ inputs.gh-token }}
        #old-do-not-use#GH_TOKEN: ${{ inputs.gh-token }}
        #GH_TOKEN: ${{ steps.app-token.outputs.token || inputs.gh-token }}
        # set GH_TOKEN to 'steps.app-token.outputs.token' if the account-type is 'bot'
        #   otherwise set GH_TOKEN to 'inputs.gh-token'
        GH_TOKEN: ${{ inputs.account-type == 'bot' && steps.app-token.outputs.token || inputs.gh-token }}
        #
        #bot#GITHUB_TOKEN: ${{ inputs.gh-app-key }}
        #user#GITHUB_TOKEN: ${{ inputs.gh-token }}
      run: |
        echo "::group::starting the 'configure-git' step... "
        echo ""
        git config --global user.name '${{ steps.gh-user-info.outputs.user-name }}'
        git config --global user.email '${{ steps.gh-user-info.outputs.user-email }}'
        echo "consolidate this with the 'gh-user-info' step"
        echo ""
        echo "finishing the 'configure-git' step... "
        echo "::endgroup::"
      shell: bash

    - name: Configure git as the GitHub Actions Bot
      id: configure-gh-actions-bot
      # This is a fallback step in case the GitHub CLI fails to authenticate
      if: steps.configure-git.outcome == 'failure'
      env:
        # user: 'github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>'
        GH_TOKEN: ${{ github.token }}
        user-id: '41898282'
        user-login: 'github-actions[bot]'
        user-name: 'github-actions[bot]'
        user-type: 'bot'
        user-email: '41898282+github-actions[bot]@users.noreply.github.com'
      run: |
        echo "::group::starting the 'configure-gh-actions-bot' step... "
        echo ""
        echo "fallback step: configure git as the GitHub actions bot"
        ## Configure git to login as the GitHub Actions Bot.
        #
        # git config user.name github-actions[bot]
        git config user.name ${{ env.user-name }}
        #
        # git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git config user.email ${{ env.user-email }}
        echo "fallback step: configure git as the GitHub actions bot"
        #
        # Fallback | Send the user information to the GitHub runner environment
        echo "user-id=${user-id}" >> $GITHUB_ENV
        echo "user-login=${user-login}" >> $GITHUB_ENV
        echo "user-name=${user-name}" >> $GITHUB_ENV
        echo "user-type=${user-type}" >> $GITHUB_ENV
        echo "user-email=${user-email}" >> $GITHUB_ENV
        #
        echo ""
        echo "finishing the 'configure-gh-actions-bot' step... "
        echo "::endgroup::"
      shell: bash

    - name: Output variables from this job to the action output
      # Output variables for the action
      id: set-action-outputs
      env:
        user-id: ${{ env.user-id }}
        user-login: ${{ env.user-login }}
        user-name: ${{ env.user-name }}
        user-type: ${{ env.user-type }}
        user-email: ${{ env.user-email }}
      run: |
        echo "::group::starting the 'set-action-outputs' step... "
        echo ""
        # Send the user information to GitHub output
        echo "user-id=${user-id}" >> "$GITHUB_OUTPUT"
        echo "user-login=${user-login}" >> "$GITHUB_OUTPUT"
        echo "user-name=${user-name}" >> "$GITHUB_OUTPUT"
        echo "user-type=${user-type}" >> "$GITHUB_OUTPUT"
        echo "user-email=${user-email}" >> "$GITHUB_OUTPUT"
        echo ""
        echo "finishing the 'set-action-outputs' step... "
        echo "::endgroup::"
      shell: bash

